{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "e65f3fa09b6e4dac8018eccfb17ff525": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8ad654c5f81b4ff6ae2be77852d4461b",
              "IPY_MODEL_e1e8baffa6994cf2910d8686bb31b824",
              "IPY_MODEL_39985768889d41049bdd2b9c0a5be08b"
            ],
            "layout": "IPY_MODEL_2b77bbe0f6aa467ebebd42a57e34db99"
          }
        },
        "8ad654c5f81b4ff6ae2be77852d4461b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5c37b300307d41679a17b67c3ea173a6",
            "placeholder": "​",
            "style": "IPY_MODEL_22d359f327f641fdb8e777baef64beb2",
            "value": "modules.json: 100%"
          }
        },
        "e1e8baffa6994cf2910d8686bb31b824": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bc3b876c634348408311e2b8114a6941",
            "max": 349,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e345f96d133b47e881563ff8d7d93904",
            "value": 349
          }
        },
        "39985768889d41049bdd2b9c0a5be08b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f09f1744372c4fdfad374187c663dd18",
            "placeholder": "​",
            "style": "IPY_MODEL_6c08385f6fbf4f799f2a6f0c1b478c53",
            "value": " 349/349 [00:00&lt;00:00, 28.6kB/s]"
          }
        },
        "2b77bbe0f6aa467ebebd42a57e34db99": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5c37b300307d41679a17b67c3ea173a6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "22d359f327f641fdb8e777baef64beb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bc3b876c634348408311e2b8114a6941": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e345f96d133b47e881563ff8d7d93904": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "f09f1744372c4fdfad374187c663dd18": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6c08385f6fbf4f799f2a6f0c1b478c53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "26c6c09fcf8e4d75a7cd7342dbbbefb5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f01897f265e2436aa1fbc173264c7e3a",
              "IPY_MODEL_d128f90634364a59b5eb78ba782555bd",
              "IPY_MODEL_e802dfc0db0044e5977cd9554a88c10b"
            ],
            "layout": "IPY_MODEL_3eef4b33b5bd4a26b3415b2c2877a5ac"
          }
        },
        "f01897f265e2436aa1fbc173264c7e3a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dc69eb3d45db4372a06d0e52f3f23400",
            "placeholder": "​",
            "style": "IPY_MODEL_d864e7e8e4a3442cb72f448db638ae0c",
            "value": "config_sentence_transformers.json: 100%"
          }
        },
        "d128f90634364a59b5eb78ba782555bd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a6a0739e9cbf4812a16a1152ba3e9603",
            "max": 116,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d8087961cbb94b1580068956a37be779",
            "value": 116
          }
        },
        "e802dfc0db0044e5977cd9554a88c10b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_48a9be5ca97249ccafee58be2e51a979",
            "placeholder": "​",
            "style": "IPY_MODEL_12b77008a2d54c04959a231bdb69ff65",
            "value": " 116/116 [00:00&lt;00:00, 9.69kB/s]"
          }
        },
        "3eef4b33b5bd4a26b3415b2c2877a5ac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dc69eb3d45db4372a06d0e52f3f23400": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d864e7e8e4a3442cb72f448db638ae0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a6a0739e9cbf4812a16a1152ba3e9603": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d8087961cbb94b1580068956a37be779": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "48a9be5ca97249ccafee58be2e51a979": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "12b77008a2d54c04959a231bdb69ff65": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3f3542deefd040408200194917ac0030": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f74efb8984e247c8b977b6c28a795779",
              "IPY_MODEL_fd28c971233d4adfb965fe5012826b26",
              "IPY_MODEL_2df525a402d54e2ca4584e03473499e8"
            ],
            "layout": "IPY_MODEL_fff6c603a5044f9bb0d033b60b7d4a8a"
          }
        },
        "f74efb8984e247c8b977b6c28a795779": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_06cf0f3bc920465da9a77cd01c939861",
            "placeholder": "​",
            "style": "IPY_MODEL_2f2841f0370a4bdd91cb0c699ff2f021",
            "value": "README.md: 100%"
          }
        },
        "fd28c971233d4adfb965fe5012826b26": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_601d0140ae7d4ebc9ba5b9a099ba7a8c",
            "max": 11586,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_e512cd41ebab4ae4bf7a99624a4ffa29",
            "value": 11586
          }
        },
        "2df525a402d54e2ca4584e03473499e8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e20d632d53324f15ab0711c68ec0eb36",
            "placeholder": "​",
            "style": "IPY_MODEL_39b4728f524748daaaa7691c1a355435",
            "value": " 11.6k/11.6k [00:00&lt;00:00, 900kB/s]"
          }
        },
        "fff6c603a5044f9bb0d033b60b7d4a8a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "06cf0f3bc920465da9a77cd01c939861": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2f2841f0370a4bdd91cb0c699ff2f021": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "601d0140ae7d4ebc9ba5b9a099ba7a8c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e512cd41ebab4ae4bf7a99624a4ffa29": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "e20d632d53324f15ab0711c68ec0eb36": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "39b4728f524748daaaa7691c1a355435": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "731e57912009413d9e497b3d3bea01cf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3667dc5d7f94489c8003bfef0fca692f",
              "IPY_MODEL_65c3854da1304669b62b075687aec985",
              "IPY_MODEL_fb5c7ed8520946afb05e73d865185128"
            ],
            "layout": "IPY_MODEL_23f9e8060b6341a08474813858d00c2d"
          }
        },
        "3667dc5d7f94489c8003bfef0fca692f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5d4ac306e6b04f509cf38625c0752e57",
            "placeholder": "​",
            "style": "IPY_MODEL_45394da7c63f4d5fb8abe1a5d83bddd3",
            "value": "sentence_bert_config.json: 100%"
          }
        },
        "65c3854da1304669b62b075687aec985": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fc16cc398e474cea9e4e3501ab9edc24",
            "max": 53,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_c49fb586d24e42a7afd5546f347f696f",
            "value": 53
          }
        },
        "fb5c7ed8520946afb05e73d865185128": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_eef442574f4f45f2b518478428c3b656",
            "placeholder": "​",
            "style": "IPY_MODEL_648b758dba9d433d9d2738a1fec47a02",
            "value": " 53.0/53.0 [00:00&lt;00:00, 4.45kB/s]"
          }
        },
        "23f9e8060b6341a08474813858d00c2d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5d4ac306e6b04f509cf38625c0752e57": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "45394da7c63f4d5fb8abe1a5d83bddd3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fc16cc398e474cea9e4e3501ab9edc24": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c49fb586d24e42a7afd5546f347f696f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "eef442574f4f45f2b518478428c3b656": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "648b758dba9d433d9d2738a1fec47a02": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ff01d76b31dd40fabfbe50b975291f8b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_eef4f8993de845e388aaae324657b61a",
              "IPY_MODEL_3b8391555e6f4a609548bb3b444569b0",
              "IPY_MODEL_c81c30032ca04f97b4b791e2323c4422"
            ],
            "layout": "IPY_MODEL_74b9c066ada54eb189a198f5d164bed9"
          }
        },
        "eef4f8993de845e388aaae324657b61a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dd8345f9850444bca1db279721b8aec9",
            "placeholder": "​",
            "style": "IPY_MODEL_ecb30cc2b3cd410e956ebef3117047b5",
            "value": "config.json: 100%"
          }
        },
        "3b8391555e6f4a609548bb3b444569b0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_090fbdf4116445bd9a378bcbad1cf237",
            "max": 612,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ccd10358637742b39d1a1db1a17f72db",
            "value": 612
          }
        },
        "c81c30032ca04f97b4b791e2323c4422": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2cf81fb89dd6469a982a674c2bfc29ba",
            "placeholder": "​",
            "style": "IPY_MODEL_870da40386a547a3afbd72db65fb3fed",
            "value": " 612/612 [00:00&lt;00:00, 55.4kB/s]"
          }
        },
        "74b9c066ada54eb189a198f5d164bed9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dd8345f9850444bca1db279721b8aec9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ecb30cc2b3cd410e956ebef3117047b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "090fbdf4116445bd9a378bcbad1cf237": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ccd10358637742b39d1a1db1a17f72db": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "2cf81fb89dd6469a982a674c2bfc29ba": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "870da40386a547a3afbd72db65fb3fed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7cc7d683911b4f11bdd862ed8f648700": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_64112d328a95447e9b44dd922992fdc9",
              "IPY_MODEL_2d594a0e2b744deb9e1c39e23c0e9740",
              "IPY_MODEL_8dc9d1f62cd34f93a74630cdde8f3355"
            ],
            "layout": "IPY_MODEL_0082c04ea1164b3c9bdef7e94d1b815e"
          }
        },
        "64112d328a95447e9b44dd922992fdc9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d99b3341796e485e8eb62ff5266a8eb7",
            "placeholder": "​",
            "style": "IPY_MODEL_3ddbd076385244a1a87e0a787050b183",
            "value": "model.safetensors: 100%"
          }
        },
        "2d594a0e2b744deb9e1c39e23c0e9740": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_edc4221b86dc4b40947ec96e19d400e4",
            "max": 90868376,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_126c45dfd5174e2986fb61b3c3231361",
            "value": 90868376
          }
        },
        "8dc9d1f62cd34f93a74630cdde8f3355": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4eb98dd4ad1645bfa134bac2e8b80d9f",
            "placeholder": "​",
            "style": "IPY_MODEL_b5b31d13c9fa42a6889ce131adfa86f1",
            "value": " 90.9M/90.9M [00:00&lt;00:00, 281MB/s]"
          }
        },
        "0082c04ea1164b3c9bdef7e94d1b815e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d99b3341796e485e8eb62ff5266a8eb7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3ddbd076385244a1a87e0a787050b183": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "edc4221b86dc4b40947ec96e19d400e4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "126c45dfd5174e2986fb61b3c3231361": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4eb98dd4ad1645bfa134bac2e8b80d9f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b5b31d13c9fa42a6889ce131adfa86f1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "a1492647f1974fbdbbaba807f3745d48": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_03da2966b41143d18005d97cb7c40ddd",
              "IPY_MODEL_2ef7801c07af4d039894fb8c777f9973",
              "IPY_MODEL_ba9622cc59a341c7a8f5bb2f5094f469"
            ],
            "layout": "IPY_MODEL_986cb1cdb0c74d6aa5adeba8d5899e13"
          }
        },
        "03da2966b41143d18005d97cb7c40ddd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bb66f294cdc1437ca3cf0d4158be58ac",
            "placeholder": "​",
            "style": "IPY_MODEL_9c83dea3c3b94b8d8f94e0efa57d47d4",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "2ef7801c07af4d039894fb8c777f9973": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9fcfaaaf8e874788886101f105437d9d",
            "max": 383,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_259fcebf1d6248a289c4eef8a77ffdc5",
            "value": 383
          }
        },
        "ba9622cc59a341c7a8f5bb2f5094f469": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a24dd28bde954407a50d139bd0650cb5",
            "placeholder": "​",
            "style": "IPY_MODEL_d12071dbab5e427c912c1b31d6d5457d",
            "value": " 383/383 [00:00&lt;00:00, 34.2kB/s]"
          }
        },
        "986cb1cdb0c74d6aa5adeba8d5899e13": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bb66f294cdc1437ca3cf0d4158be58ac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9c83dea3c3b94b8d8f94e0efa57d47d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9fcfaaaf8e874788886101f105437d9d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "259fcebf1d6248a289c4eef8a77ffdc5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "a24dd28bde954407a50d139bd0650cb5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d12071dbab5e427c912c1b31d6d5457d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "76219e0e496947eeaecac20b92b1c63c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_062ec0030ea84bfea84b3bd87b08cc33",
              "IPY_MODEL_2b7bd2d80b3946408d964bb18be2ce75",
              "IPY_MODEL_706fdeba948f4a2a905b507ae4d4512a"
            ],
            "layout": "IPY_MODEL_dee2181fafda45cebb1c71355b33a558"
          }
        },
        "062ec0030ea84bfea84b3bd87b08cc33": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6319ff7cb91748739f6bf8135a879149",
            "placeholder": "​",
            "style": "IPY_MODEL_c8376763a05e4d069dba8ec1f51989a7",
            "value": "vocab.txt: 100%"
          }
        },
        "2b7bd2d80b3946408d964bb18be2ce75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4fd16e48cb2f4cb196179f41167b2faa",
            "max": 231508,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_1dfb57681ca9494c914b8c1b771ab210",
            "value": 231508
          }
        },
        "706fdeba948f4a2a905b507ae4d4512a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2c275d92d7eb4754a5257b63f5705fb5",
            "placeholder": "​",
            "style": "IPY_MODEL_c88bcc6ba16c4cf49fce99c43bf5858d",
            "value": " 232k/232k [00:00&lt;00:00, 17.0MB/s]"
          }
        },
        "dee2181fafda45cebb1c71355b33a558": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6319ff7cb91748739f6bf8135a879149": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c8376763a05e4d069dba8ec1f51989a7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4fd16e48cb2f4cb196179f41167b2faa": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1dfb57681ca9494c914b8c1b771ab210": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "2c275d92d7eb4754a5257b63f5705fb5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c88bcc6ba16c4cf49fce99c43bf5858d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6ff4568c64af48d988f779da86d02e09": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a42fe4d0e1ad4abb855747c74b5d271a",
              "IPY_MODEL_94a0395bf592450e9a56b4cbd9c96674",
              "IPY_MODEL_4802caaa19ce48d487e305ed1f12b16f"
            ],
            "layout": "IPY_MODEL_6d56cb1c40b744189db521793aa1e40f"
          }
        },
        "a42fe4d0e1ad4abb855747c74b5d271a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d39e04c27c7142d0bd0cc5ebf93f403f",
            "placeholder": "​",
            "style": "IPY_MODEL_6fde65e2279a4987979d671a45f35528",
            "value": "tokenizer.json: 100%"
          }
        },
        "94a0395bf592450e9a56b4cbd9c96674": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c77d0c66a6b643e5b13d0746e7864c5b",
            "max": 466247,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_88c192ed36b5423094573d20182a99c4",
            "value": 466247
          }
        },
        "4802caaa19ce48d487e305ed1f12b16f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c16a648c5fa1410ab512e360cbb1b348",
            "placeholder": "​",
            "style": "IPY_MODEL_872fbcc7cc7d40d088a38204fb99f20e",
            "value": " 466k/466k [00:00&lt;00:00, 2.19MB/s]"
          }
        },
        "6d56cb1c40b744189db521793aa1e40f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d39e04c27c7142d0bd0cc5ebf93f403f": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6fde65e2279a4987979d671a45f35528": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c77d0c66a6b643e5b13d0746e7864c5b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "88c192ed36b5423094573d20182a99c4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "c16a648c5fa1410ab512e360cbb1b348": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "872fbcc7cc7d40d088a38204fb99f20e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9ba4f028391a48a89dcee173516baefd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3300a1948ef94c008fabaa802a5abecd",
              "IPY_MODEL_36fffc40a0a6400a8532dd68beb645dd",
              "IPY_MODEL_80d8d38f92c946ebba92eb81729c9587"
            ],
            "layout": "IPY_MODEL_a96e427615d54dee87dcfc8e33dbc1f3"
          }
        },
        "3300a1948ef94c008fabaa802a5abecd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e47327380a9f48e4b444b76a139e8d8b",
            "placeholder": "​",
            "style": "IPY_MODEL_9bf18fdcac7742e5a62460e56fa8fbb2",
            "value": "special_tokens_map.json: 100%"
          }
        },
        "36fffc40a0a6400a8532dd68beb645dd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2d0cec0acff4418ca1464598e0548061",
            "max": 112,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_6e89c2136ce543b6a565779f8bc694fd",
            "value": 112
          }
        },
        "80d8d38f92c946ebba92eb81729c9587": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_87cfbfae10624021844c61ed1bb1a6ee",
            "placeholder": "​",
            "style": "IPY_MODEL_1ac65b8bd3394cd080afd9af231b0167",
            "value": " 112/112 [00:00&lt;00:00, 10.2kB/s]"
          }
        },
        "a96e427615d54dee87dcfc8e33dbc1f3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e47327380a9f48e4b444b76a139e8d8b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9bf18fdcac7742e5a62460e56fa8fbb2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2d0cec0acff4418ca1464598e0548061": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6e89c2136ce543b6a565779f8bc694fd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "87cfbfae10624021844c61ed1bb1a6ee": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1ac65b8bd3394cd080afd9af231b0167": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d36a12f0a8b64eb5b4750b9a6c2f3688": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_255d16bcdea749ccbfb638ad6ea07f11",
              "IPY_MODEL_abe7bcbbfa5e418287d4731a230a0e60",
              "IPY_MODEL_d9a143b4f6f64315bc390e5cda61a4ee"
            ],
            "layout": "IPY_MODEL_db4985f8618f4214a034bbf0b7eb61d7"
          }
        },
        "255d16bcdea749ccbfb638ad6ea07f11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad665fd32aa844259cdd9757267988b5",
            "placeholder": "​",
            "style": "IPY_MODEL_ea1e381667864b83b3c54c0033facac4",
            "value": "1_Pooling/config.json: 100%"
          }
        },
        "abe7bcbbfa5e418287d4731a230a0e60": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f9a353f49050434fb336662f91701a43",
            "max": 190,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7717cdda97084a208769391096e3142c",
            "value": 190
          }
        },
        "d9a143b4f6f64315bc390e5cda61a4ee": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cddc5ba3fa7b4bf3954ac9f7c0be47a5",
            "placeholder": "​",
            "style": "IPY_MODEL_12a3ab54ed3648c0ac3e4fa6ec868f37",
            "value": " 190/190 [00:00&lt;00:00, 15.9kB/s]"
          }
        },
        "db4985f8618f4214a034bbf0b7eb61d7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ad665fd32aa844259cdd9757267988b5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ea1e381667864b83b3c54c0033facac4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f9a353f49050434fb336662f91701a43": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7717cdda97084a208769391096e3142c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cddc5ba3fa7b4bf3954ac9f7c0be47a5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "12a3ab54ed3648c0ac3e4fa6ec868f37": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# mount content google drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GF-BV3Hd0xCu",
        "outputId": "4a72df85-80e7-4757-fe48-9e00c9487298"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install python-docx\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4_9DiUOj09K9",
        "outputId": "b0fa33dd-b36d-4aee-d2bb-bbceebf8bcec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting python-docx\n",
            "  Downloading python_docx-1.1.2-py3-none-any.whl.metadata (2.0 kB)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.9.4)\n",
            "Requirement already satisfied: typing-extensions>=4.9.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.12.2)\n",
            "Downloading python_docx-1.1.2-py3-none-any.whl (244 kB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/244.3 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m244.3/244.3 kB\u001b[0m \u001b[31m16.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: python-docx\n",
            "Successfully installed python-docx-1.1.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Part 1 **EDA**"
      ],
      "metadata": {
        "id": "FDVA0hof0Vnv"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "OxCjYZwU0Ph5",
        "outputId": "b8b8b94b-0a9f-4fea-8839-31b9d04028f1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import os\n",
        "from docx import Document\n",
        "import re\n",
        "from collections import Counter\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from wordcloud import WordCloud\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "# loading all .docx files from mydrive folder\n",
        "def load_documents_from_folder(folder_path):\n",
        "    documents = {}\n",
        "    for filename in os.listdir(folder_path):\n",
        "        if filename.endswith('.docx'):\n",
        "            doc_path = os.path.join(folder_path, filename)\n",
        "            doc = Document(doc_path)\n",
        "            # Extract text from the document\n",
        "            full_text = []\n",
        "            for para in doc.paragraphs:\n",
        "                full_text.append(para.text)\n",
        "            documents[filename] = \" \".join(full_text)\n",
        "    return documents\n",
        "\n",
        "# Load documents\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "# Combine all documents' text into one large text\n",
        "combined_text = \" \".join(documents.values())\n",
        "\n",
        "# Text preprocessing: Remove punctuation and convert to lowercase\n",
        "def preprocess_text(text):\n",
        "    # Remove punctuation and numbers\n",
        "    text = re.sub(r'[^\\w\\s]', '', text)\n",
        "    text = re.sub(r'\\d+', '', text)\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "    return text\n",
        "\n",
        "# Preprocess the combined text\n",
        "processed_text = preprocess_text(combined_text)\n",
        "\n",
        "# Split text into words\n",
        "words = processed_text.split()\n",
        "\n",
        "# Remove common stopwords\n",
        "stopwords = set([\"the\", \"and\", \"of\", \"to\", \"in\", \"a\", \"for\", \"on\", \"is\", \"with\", \"that\", \"by\", \"as\", \"at\", \"an\", \"it\", \"from\", \"are\", \"this\", \"we\", \"be\", \"or\", \"not\", \"have\", \"all\", \"has\", \"more\", \"but\", \"they\", \"which\", \"you\", \"their\", \"can\", \"also\", \"its\", \"will\", \"one\", \"new\", \"was\", \"our\"])\n",
        "filtered_words = [word for word in words if word not in stopwords]\n",
        "\n",
        "# Get the most common words\n",
        "most_common_words = Counter(filtered_words).most_common(20)\n",
        "\n",
        "# Create a DataFrame for the most common words\n",
        "common_words_df = pd.DataFrame(most_common_words, columns=['Word', 'Frequency'])\n",
        "\n",
        "# Plot the most common words as a bar chart\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(common_words_df['Word'], common_words_df['Frequency'], color='skyblue')\n",
        "plt.title('Top 20 Most Common Words in All Documents')\n",
        "plt.xticks(rotation=45)\n",
        "plt.xlabel('Words')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()\n",
        "\n",
        "# Generate a word cloud for the combined text\n",
        "wordcloud = WordCloud(width=800, height=400, background_color='white').generate(\" \".join(filtered_words))\n",
        "\n",
        "# Display the word cloud\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.imshow(wordcloud, interpolation='bilinear')\n",
        "plt.axis('off')\n",
        "plt.title('Word Cloud of All Documents in Folder')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part 2 Manual approach to information retrivial.\n",
        "###Without using any methods"
      ],
      "metadata": {
        "id": "ekiqQEcX1VZA"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "asZRfajb1iBf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from docx import Document\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "doc_path = '/content/drive/MyDrive/Thesis/2021_Annual_Report.docx'\n",
        "doc = Document(doc_path)\n",
        "\n",
        "\n",
        "full_text = []\n",
        "for para in doc.paragraphs:\n",
        "    full_text.append(para.text)\n",
        "\n",
        "\n",
        "full_text_str = \"\\n\".join(full_text)\n",
        "print(full_text_str[:2000])\n",
        "\n",
        "# Extract all tables\n",
        "tables = doc.tables\n",
        "\n",
        "# List to store each table as a DataFrame\n",
        "tables_data = []\n",
        "\n",
        "# Loop through each table and convert to DataFrame\n",
        "for i, table in enumerate(tables):\n",
        "    data = []\n",
        "    for row in table.rows:\n",
        "        data.append([cell.text.strip() for cell in row.cells])\n",
        "\n",
        "    # Create DataFrame and store in list\n",
        "    df_1 = pd.DataFrame(data)\n",
        "    tables_data.append(df_1)\n",
        "\n",
        "    # Print the first few rows of the DataFrame for inspection\n",
        "    print(f\"Table {i + 1}:\")\n",
        "    print(df_1.head(), \"\\n\")\n",
        "\n",
        "def clean_table(df_1):\n",
        "    # Remove empty rows and columns\n",
        "    df_1.dropna(how='all', axis=0, inplace=True)\n",
        "    df_1.dropna(how='all', axis=1, inplace=True)\n",
        "\n",
        "\n",
        "    df_1.reset_index(drop=True, inplace=True)\n",
        "\n",
        "\n",
        "    if len(df_1) > 1:\n",
        "        df_1.columns = df_1.iloc[0]\n",
        "        df_1 = df_1[1:]\n",
        "\n",
        "\n",
        "    df_1 = df_1.apply(pd.to_numeric, errors='ignore')\n",
        "\n",
        "    return df_1\n",
        "\n",
        "# Apply cleaning to each table\n",
        "cleaned_tables = [clean_table(df_1) for df_1 in tables_data]\n",
        "\n",
        "# print the shape of cleaned tables to verify\n",
        "for i, df_1 in enumerate(cleaned_tables):\n",
        "    print(f\"Cleaned Table {i + 1} with shape {df_1.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vmw-f4fZsREp",
        "outputId": "29047fd7-7d0d-473c-944d-3ed51810ab4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Annual Report 2021\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "As I write this, people and organizations everywhere continue to struggle with the uncertainty of a pandemic that continues to cause so much suffering. And yet, as I reflect on what has been a very challenging year for so many—one that will be forever remembered as a heartbreaking chapter in our history—I find reasons to be hopeful. \n",
            "Our mission to empower every person and every organization on the planet to achieve more has never been more urgent or more needed. And every day this past year, I have had the privilege to see it in action, as customers of every size, in every industry, in every part of the world use our platforms and tools to help address their own challenges and opportunities as well as those of their communities and society at-large. \n",
            "I have had the honor to see how the hard work and commitment of Microsoft’s employees, the ingenuity of our partners, the trust of our customers, and the support of our shareholders translate into strong results. In fiscal year 2021, we delivered $168 billion in revenue, up 18 percent year-over-year. Operating income grew 32 percent to $70 billion. And we continue to create successful new franchises. LinkedIn and our security business both passed $10 billion in annual revenue for the first time.\n",
            "OUR OPPORTUNITY \n",
            "For all the disruption and suffering that the pandemic has wrought on our lives and our communities, it has also been the catalyst for an unprecedented digital transformation that is driving massive technological and societal shifts that are creating important new opportunities for our customers and for Microsoft. \n",
            "Tech as a percentage of total GDP will double from 5 to 10 percent by 2030. But the most notable thing is what will happen to the other 90 percent. Digital transformation that was projected to happen over the next 10 years is happening today. \n",
            "Microsoft was built for this moment. Our goal is to foster innovatio\n",
            "Table 1:\n",
            "                     0       1       2       3       4       5       6\n",
            "0                                                                     \n",
            "1        (In millions)  Shares  Amount  Shares  Amount  Shares  Amount\n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4  Year Ended June 30,    2021    2021    2020    2020    2019    2019 \n",
            "\n",
            "Table 2:\n",
            "                  0            1             2                    3  \\\n",
            "0                                                                     \n",
            "1  Declaration Date  Record Date  Payment Date  Dividend\\nPer Share   \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4  Fiscal Year 2021                                                   \n",
            "\n",
            "               4  \n",
            "0                 \n",
            "1         Amount  \n",
            "2                 \n",
            "3                 \n",
            "4  (In millions)   \n",
            "\n",
            "Table 3:\n",
            "                      0       1       2       3       4       5       6   \\\n",
            "0                                                                          \n",
            "1                           6/16    6/17    6/17    6/18    6/18    6/19   \n",
            "2                                                                          \n",
            "3  Microsoft Corporation  100.00  138.05  138.05  201.33  201.33  277.97   \n",
            "4                S&P 500  100.00  117.90  117.90  134.84  134.84  148.89   \n",
            "\n",
            "       7       8       9       10      11  \n",
            "0                                          \n",
            "1    6/19    6/20    6/20    6/21    6/21  \n",
            "2                                          \n",
            "3  277.97  427.51  427.51  574.61  574.61  \n",
            "4  148.89  160.06  160.06  225.36  225.36   \n",
            "\n",
            "Table 4:\n",
            "                                             0  \\\n",
            "0                                                \n",
            "1  Commercial remaining performance obligation   \n",
            "2                                                \n",
            "3                     Commercial cloud revenue   \n",
            "4                                                \n",
            "\n",
            "                                                   1  \n",
            "0                                                     \n",
            "1  Commercial portion of revenue allocated to rem...  \n",
            "2                                                     \n",
            "3  Revenue from our commercial cloud business, wh...  \n",
            "4                                                      \n",
            "\n",
            "Table 5:\n",
            "                                                   0  \\\n",
            "0                                                      \n",
            "1  Office Commercial products and cloud services ...   \n",
            "2                                                      \n",
            "3  Office Consumer products and cloud services re...   \n",
            "4                                                      \n",
            "\n",
            "                                                   1  \n",
            "0                                                     \n",
            "1  Revenue from Office Commercial products and cl...  \n",
            "2                                                     \n",
            "3  Revenue from Office Consumer products and clou...  \n",
            "4                                                      \n",
            "\n",
            "Table 6:\n",
            "                                    0  \\\n",
            "0                                       \n",
            "1      Windows OEM Pro revenue growth   \n",
            "2                                       \n",
            "3  Windows OEM non-Pro revenue growth   \n",
            "4                                       \n",
            "\n",
            "                                                   1  \n",
            "0                                                     \n",
            "1  Revenue from sales of Windows Pro licenses sol...  \n",
            "2                                                     \n",
            "3  Revenue from sales of Windows non-Pro licenses...  \n",
            "4                                                      \n",
            "\n",
            "Table 7:\n",
            "                                                   0             1  \\\n",
            "0                                                                    \n",
            "1  (In millions, except percentages and per share...          2021   \n",
            "2                                                                    \n",
            "3                                                                    \n",
            "4                                            Revenue  $\\t  168,088   \n",
            "\n",
            "              2             3                   4                   5  \n",
            "0                                                                      \n",
            "1          2020          2020  Percentage\\nChange  Percentage\\nChange  \n",
            "2                                                                      \n",
            "3                                                                      \n",
            "4  $\\t  143,015  $\\t  143,015                 18%                 18%   \n",
            "\n",
            "Table 8:\n",
            "                                   0     1     2                   3\n",
            "0                                                                   \n",
            "1  (In millions, except percentages)  2021  2020  Percentage\\nChange\n",
            "2                                                                   \n",
            "3                                                                   \n",
            "4                            Revenue                                 \n",
            "\n",
            "Table 9:\n",
            "                                   0            1            2  \\\n",
            "0                                                                \n",
            "1  (In millions, except percentages)         2021         2020   \n",
            "2                                                                \n",
            "3                                                                \n",
            "4           Research and development  $\\t  20,716  $\\t  19,269   \n",
            "\n",
            "                    3  \n",
            "0                      \n",
            "1  Percentage\\nChange  \n",
            "2                      \n",
            "3                      \n",
            "4                  8%   \n",
            "\n",
            "Table 10:\n",
            "                                   0            1            2  \\\n",
            "0                                                                \n",
            "1  (In millions, except percentages)         2021         2020   \n",
            "2                                                                \n",
            "3                                                                \n",
            "4                Sales and marketing  $\\t  20,117  $\\t  19,598   \n",
            "\n",
            "                    3  \n",
            "0                      \n",
            "1  Percentage\\nChange  \n",
            "2                      \n",
            "3                      \n",
            "4                  3%   \n",
            "\n",
            "Table 11:\n",
            "                                   0           1           2  \\\n",
            "0                                                              \n",
            "1  (In millions, except percentages)        2021        2020   \n",
            "2                                                              \n",
            "3                                                              \n",
            "4         General and administrative  $\\t  5,107  $\\t  5,111   \n",
            "\n",
            "                    3  \n",
            "0                      \n",
            "1  Percentage\\nChange  \n",
            "2                      \n",
            "3                      \n",
            "4                  0%   \n",
            "\n",
            "Table 12:\n",
            "                     0                    1     2     3     4\n",
            "0                                                            \n",
            "1        (In millions)        (In millions)                  \n",
            "2                                                            \n",
            "3                                                            \n",
            "4  Year Ended June 30,  Year Ended June 30,  2021  2020  2020 \n",
            "\n",
            "Table 13:\n",
            "                                                   0            1  \\\n",
            "0                                                                   \n",
            "1  (In millions, except percentages and per share...         2021   \n",
            "2                                                                   \n",
            "3                                         Net income  $\\t  61,271   \n",
            "4  Net income tax benefit related to India Suprem...      (620\\t)   \n",
            "\n",
            "             2                   3  \n",
            "0                                   \n",
            "1         2020  Percentage\\nChange  \n",
            "2                                   \n",
            "3  $\\t  44,281                 38%  \n",
            "4            0                   *   \n",
            "\n",
            "Table 14:\n",
            "                     0 1\n",
            "0                       \n",
            "1        (In millions)  \n",
            "2                       \n",
            "3                       \n",
            "4  Three Months Ending   \n",
            "\n",
            "Table 15:\n",
            "                      0     1          2          3           4      5\n",
            "0                                                                     \n",
            "1         (In millions)  2022  2023-2024  2025-2026  Thereafter  Total\n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4  Long-term debt:  (a)                                                \n",
            "\n",
            "Table 16:\n",
            "                 0                    1               2       3\n",
            "0    (In millions)                                             \n",
            "1                                                              \n",
            "2                                                              \n",
            "3  Risk Categories  Hypothetical Change  June 30,\\n2021  Impact\n",
            "4                                                               \n",
            "\n",
            "Table 17:\n",
            "                                         0     1     2     3\n",
            "0                                                           \n",
            "1  (In millions, except per share amounts)                  \n",
            "2                                                           \n",
            "3                                                           \n",
            "4                      Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 18:\n",
            "                     0                    1                    2     3     4  \\\n",
            "0                                                                              \n",
            "1        (In millions)        (In millions)        (In millions)               \n",
            "2                                                                              \n",
            "3                                                                              \n",
            "4  Year Ended June 30,  Year Ended June 30,  Year Ended June 30,  2021  2020   \n",
            "\n",
            "      5     6     7  \n",
            "0                    \n",
            "1                    \n",
            "2                    \n",
            "3                    \n",
            "4  2020  2019  2019   \n",
            "\n",
            "Table 19:\n",
            "               0     1     2\n",
            "0                           \n",
            "1  (In millions)            \n",
            "2                           \n",
            "3                           \n",
            "4       June 30,  2021  2020 \n",
            "\n",
            "Table 20:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 21:\n",
            "                                         0     1     2     3\n",
            "0                                                           \n",
            "1  (In millions, except per share amounts)                  \n",
            "2                                                           \n",
            "3                                                           \n",
            "4                      Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 22:\n",
            "                     0                    1                    2     3     4  \\\n",
            "0                                                                              \n",
            "1        (In millions)        (In millions)        (In millions)               \n",
            "2                                                                              \n",
            "3                                                                              \n",
            "4  Year Ended June 30,  Year Ended June 30,  Year Ended June 30,  2021  2020   \n",
            "\n",
            "      5     6     7  \n",
            "0                    \n",
            "1                    \n",
            "2                    \n",
            "3                    \n",
            "4  2020  2019  2019   \n",
            "\n",
            "Table 23:\n",
            "               0              1     2     3     4     5     6\n",
            "0                                                            \n",
            "1  (In millions)  (In millions)                              \n",
            "2                                                            \n",
            "3       June 30,       June 30,  2021  2020  2020  2019  2019\n",
            "4                                                             \n",
            "\n",
            "Table 24:\n",
            "                                          0     1     2     3\n",
            "0                                                            \n",
            "1  (In millions, except earnings per share)                  \n",
            "2                                                            \n",
            "3                                                            \n",
            "4                       Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 25:\n",
            "                     0     1     2     3     4     5\n",
            "0                                                   \n",
            "1        (In millions)                              \n",
            "2                                                   \n",
            "3                                                   \n",
            "4  Year Ended June 30,  2021  2020  2020  2019  2019 \n",
            "\n",
            "Table 26:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 27:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 28:\n",
            "               0                  1                     2                  3  \\\n",
            "0                                                                              \n",
            "1  (In millions)  Fair Value\\nLevel  Adjusted\\nCost Basis  Unrealized\\nGains   \n",
            "2                                                                              \n",
            "3                                                                              \n",
            "4  June 30, 2021                                                               \n",
            "\n",
            "                    4                5                            6  \\\n",
            "0                                                                     \n",
            "1  Unrealized\\nLosses  Recorded\\nBasis  Cash\\nand Cash\\nEquivalents   \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4                                                                     \n",
            "\n",
            "                         7                    8  \n",
            "0                                                \n",
            "1  Short-term\\nInvestments  Equity\\nInvestments  \n",
            "2                                                \n",
            "3                                                \n",
            "4                                                 \n",
            "\n",
            "Table 29:\n",
            "               0                  1                     2                  3  \\\n",
            "0                                                                              \n",
            "1  (In millions)  Fair Value\\nLevel  Adjusted\\nCost Basis  Unrealized\\nGains   \n",
            "2                                                                              \n",
            "3                                                                              \n",
            "4  June 30, 2020                                                               \n",
            "\n",
            "                    4                5                            6  \\\n",
            "0                                                                     \n",
            "1  Unrealized\\nLosses  Recorded\\nBasis  Cash\\nand Cash\\nEquivalents   \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4                                                                     \n",
            "\n",
            "                         7                    8  \n",
            "0                                                \n",
            "1  Short-term\\nInvestments  Equity\\nInvestments  \n",
            "2                                                \n",
            "3                                                \n",
            "4                                                 \n",
            "\n",
            "Table 30:\n",
            "               0                    1                    2  \\\n",
            "0                                                            \n",
            "1                 Less than 12 Months  Less than 12 Months   \n",
            "2                                                            \n",
            "3  (In millions)           Fair Value   Unrealized\\nLosses   \n",
            "4                                                            \n",
            "\n",
            "                      3                     4                  5  \\\n",
            "0                                                                  \n",
            "1  12 Months or Greater  12 Months or Greater                      \n",
            "2                                                                  \n",
            "3            Fair Value    Unrealized\\nLosses  Total\\nFair Value   \n",
            "4                                                                  \n",
            "\n",
            "                           6  \n",
            "0                             \n",
            "1  Total\\nUnrealized\\nLosses  \n",
            "2  Total\\nUnrealized\\nLosses  \n",
            "3  Total\\nUnrealized\\nLosses  \n",
            "4                              \n",
            "\n",
            "Table 31:\n",
            "               0                    1                    2  \\\n",
            "0                                                            \n",
            "1                 Less than 12 Months  Less than 12 Months   \n",
            "2                                                            \n",
            "3  (In millions)           Fair Value   Unrealized\\nLosses   \n",
            "4                                                            \n",
            "\n",
            "                      3                     4                  5  \\\n",
            "0                                                                  \n",
            "1  12 Months or Greater  12 Months or Greater                      \n",
            "2                                                                  \n",
            "3            Fair Value    Unrealized\\nLosses  Total\\nFair Value   \n",
            "4                                                                  \n",
            "\n",
            "                           6  \n",
            "0                             \n",
            "1  Total\\nUnrealized\\nLosses  \n",
            "2  Total\\nUnrealized\\nLosses  \n",
            "3  Total\\nUnrealized\\nLosses  \n",
            "4                              \n",
            "\n",
            "Table 32:\n",
            "               0                     1                      2\n",
            "0                                                            \n",
            "1  (In millions)  Adjusted\\nCost Basis  Estimated\\nFair Value\n",
            "2                                                            \n",
            "3                                                            \n",
            "4  June 30, 2021                                              \n",
            "\n",
            "Table 33:\n",
            "                                   0               1               2\n",
            "0                                                                   \n",
            "1                      (In millions)  June 30,\\n2021  June 30,\\n2020\n",
            "2                                                                   \n",
            "3                                                                   \n",
            "4  Designated as Hedging Instruments                                 \n",
            "\n",
            "Table 34:\n",
            "               0                   1                        2  \\\n",
            "0                                                               \n",
            "1  (In millions)  Derivative\\nAssets  Derivative\\nLiabilities   \n",
            "2                                                               \n",
            "3                                                               \n",
            "4                     June 30,\\n2021           June 30,\\n2021   \n",
            "\n",
            "                    3                        4  \n",
            "0                                               \n",
            "1  Derivative\\nAssets  Derivative\\nLiabilities  \n",
            "2                                               \n",
            "3                                               \n",
            "4      June 30,\\n2020           June 30,\\n2020   \n",
            "\n",
            "Table 35:\n",
            "               0        1        2        3      4\n",
            "0                                                 \n",
            "1  (In millions)  Level 1  Level 2  Level 3  Total\n",
            "2                                                 \n",
            "3                                                 \n",
            "4  June 30, 2021                                   \n",
            "\n",
            "Table 36:\n",
            "                     0        1                                     2  \\\n",
            "0                                                                       \n",
            "1        (In millions)                                                  \n",
            "2                                                                       \n",
            "3                                                                       \n",
            "4  Year Ended June 30,  Revenue  2021\\nOther\\nIncome\\n(Expense),\\nNet   \n",
            "\n",
            "         3                                     4        5  \\\n",
            "0                                                           \n",
            "1                                                           \n",
            "2                                                           \n",
            "3                                                           \n",
            "4  Revenue  2020\\nOther\\nIncome\\n(Expense),\\nNet  Revenue   \n",
            "\n",
            "                                      6  \n",
            "0                                        \n",
            "1                                        \n",
            "2                                        \n",
            "3                                        \n",
            "4  2019\\nOther\\nIncome\\n(Expense),\\nNet   \n",
            "\n",
            "Table 37:\n",
            "                     0     1     2     3     4     5\n",
            "0                                                   \n",
            "1        (In millions)                              \n",
            "2                                                   \n",
            "3                                                   \n",
            "4  Year Ended June 30,  2021  2020  2020  2019  2019 \n",
            "\n",
            "Table 38:\n",
            "               0              1              2\n",
            "0                                             \n",
            "1  (In millions)  (In millions)  (In millions)\n",
            "2                                             \n",
            "3                                             \n",
            "4       June 30,           2021           2020 \n",
            "\n",
            "Table 39:\n",
            "               0              1              2\n",
            "0                                             \n",
            "1  (In millions)  (In millions)  (In millions)\n",
            "2                                             \n",
            "3                                             \n",
            "4       June 30,           2021           2020 \n",
            "\n",
            "Table 40:\n",
            "                           0       1\n",
            "0                                   \n",
            "1              (In millions)        \n",
            "2                                   \n",
            "3  Cash and cash equivalents  $\\t768\n",
            "4                   Goodwill   5,469 \n",
            "\n",
            "Table 41:\n",
            "                  0           1                       2\n",
            "0                                                      \n",
            "1     (In millions)      Amount  Weighted\\nAverage Life\n",
            "2                                                      \n",
            "3                                                      \n",
            "4  Technology-based  $\\t  1,341                 4 years \n",
            "\n",
            "Table 42:\n",
            "                                                   0       1\n",
            "0                                                           \n",
            "1                                      (In millions)        \n",
            "2                                                           \n",
            "3                                                           \n",
            "4  Cash, cash equivalents, and short-term investm...  $\\t234 \n",
            "\n",
            "Table 43:\n",
            "                  0        1                       2\n",
            "0                                                   \n",
            "1     (In millions)   Amount  Weighted\\nAverage Life\n",
            "2                                                   \n",
            "3                                                   \n",
            "4  Customer-related  $\\t 648                 8 years \n",
            "\n",
            "Table 44:\n",
            "                                     0               1             2  \\\n",
            "0                                                                      \n",
            "1                        (In millions)  June 30,\\n2019  Acquisitions   \n",
            "2                                                                      \n",
            "3  Productivity and Business Processes       $\\t24,277          $\\t7   \n",
            "4                    Intelligent Cloud          11,351         1,351   \n",
            "\n",
            "           3               4             5       6               7  \n",
            "0                                                                   \n",
            "1      Other  June 30,\\n2020  Acquisitions   Other  June 30,\\n2021  \n",
            "2                                                                   \n",
            "3  $\\t(94\\t)       $\\t24,190          $\\t0  $\\t127       $\\t24,317  \n",
            "4      (5\\t)          12,697           505      54          13,256   \n",
            "\n",
            "Table 45:\n",
            "               0                        1                          2  \\\n",
            "0                                                                      \n",
            "1  (In millions)  Gross\\nCarrying\\nAmount  Accumulated\\nAmortization   \n",
            "2                                                                      \n",
            "3                                                                      \n",
            "4       June 30,                                                       \n",
            "\n",
            "                      3                        4                          5  \\\n",
            "0                                                                             \n",
            "1  Net Carrying\\nAmount  Gross\\nCarrying\\nAmount  Accumulated\\nAmortization   \n",
            "2                                                                             \n",
            "3                                                                             \n",
            "4                  2021                                                       \n",
            "\n",
            "                      6  \n",
            "0                        \n",
            "1  Net Carrying\\nAmount  \n",
            "2                        \n",
            "3                        \n",
            "4                  2020   \n",
            "\n",
            "Table 46:\n",
            "                     0       1                       2       3  \\\n",
            "0                                                                \n",
            "1        (In millions)  Amount  Weighted\\nAverage Life  Amount   \n",
            "2                                                                \n",
            "3                                                                \n",
            "4  Year Ended June 30,    2021                            2020   \n",
            "\n",
            "                        4  \n",
            "0                          \n",
            "1  Weighted\\nAverage Life  \n",
            "2                          \n",
            "3                          \n",
            "4                           \n",
            "\n",
            "Table 47:\n",
            "                      0 1\n",
            "0                        \n",
            "1         (In millions)  \n",
            "2                        \n",
            "3                        \n",
            "4  Year Ending June 30,   \n",
            "\n",
            "Table 48:\n",
            "                                          0                            1  \\\n",
            "0                                                                          \n",
            "1  (In millions, issuance by calendar year)  Maturities\\n(calendar year)   \n",
            "2                                                                          \n",
            "3         2009 issuance of $3.8 billion (a)                         2039   \n",
            "4         2010 issuance of $4.8 billion (a)                         2040   \n",
            "\n",
            "                       2                         3               4  \\\n",
            "0                                                                    \n",
            "1  Stated Interest\\nRate  Effective Interest\\nRate  June 30,\\n2021   \n",
            "2                                                                    \n",
            "3                  5.20%                     5.24%          $\\t520   \n",
            "4                  4.50%                     4.57%             486   \n",
            "\n",
            "                5  \n",
            "0                  \n",
            "1  June 30,\\n2020  \n",
            "2                  \n",
            "3          $\\t559  \n",
            "4           1,571   \n",
            "\n",
            "Table 49:\n",
            "                      0 1\n",
            "0                        \n",
            "1         (In millions)  \n",
            "2                        \n",
            "3                        \n",
            "4  Year Ending June 30,   \n",
            "\n",
            "Table 50:\n",
            "                     0              1              2              3\n",
            "0                                                                  \n",
            "1        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "2                                                                  \n",
            "3                                                                  \n",
            "4  Year Ended June 30,           2021           2020           2019 \n",
            "\n",
            "Table 51:\n",
            "                     0              1              2              3\n",
            "0                                                                  \n",
            "1        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "2                                                                  \n",
            "3                                                                  \n",
            "4  Year Ended June 30,           2021           2020           2019 \n",
            "\n",
            "Table 52:\n",
            "                        0      1      2      3\n",
            "0                                             \n",
            "1                                             \n",
            "2     Year Ended June 30,   2021   2020   2019\n",
            "3                                             \n",
            "4  Federal statutory rate  21.0%  21.0%  21.0% \n",
            "\n",
            "Table 53:\n",
            "               0     1     2\n",
            "0                           \n",
            "1  (In millions)            \n",
            "2                           \n",
            "3                           \n",
            "4       June 30,  2021  2020 \n",
            "\n",
            "Table 54:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 55:\n",
            "               0     1     2\n",
            "0                           \n",
            "1  (In millions)            \n",
            "2                           \n",
            "3                           \n",
            "4       June 30,  2021  2020 \n",
            "\n",
            "Table 56:\n",
            "                          0 1\n",
            "0                            \n",
            "1             (In millions)  \n",
            "2                            \n",
            "3                            \n",
            "4  Year Ended June 30, 2021   \n",
            "\n",
            "Table 57:\n",
            "                     0              1              2     3\n",
            "0                                                         \n",
            "1        (In millions)  (In millions)  (In millions)      \n",
            "2                                                         \n",
            "3                                                         \n",
            "4  Year Ended June 30,           2021           2020  2019 \n",
            "\n",
            "Table 58:\n",
            "                     0              1              2     3\n",
            "0                                                         \n",
            "1        (In millions)  (In millions)  (In millions)      \n",
            "2                                                         \n",
            "3                                                         \n",
            "4  Year Ended June 30,           2021           2020  2019 \n",
            "\n",
            "Table 59:\n",
            "                                                   0     1     2\n",
            "0                                                               \n",
            "1  (In millions, except lease term and discount r...            \n",
            "2                                                               \n",
            "3                                                               \n",
            "4                                           June 30,  2021  2020 \n",
            "\n",
            "Table 60:\n",
            "                      0                  1                2\n",
            "0                                                          \n",
            "1         (In millions)                                    \n",
            "2                                                          \n",
            "3                                                          \n",
            "4  Year Ending June 30,  Operating\\nLeases  Finance\\nLeases \n",
            "\n",
            "Table 61:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 62:\n",
            "                     0       1       2       3       4       5       6\n",
            "0                                                                     \n",
            "1        (In millions)  Shares  Amount  Shares  Amount  Shares  Amount\n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4  Year Ended June 30,    2021    2021    2020    2020    2019    2019 \n",
            "\n",
            "Table 63:\n",
            "                  0 1            2             3                    4  \\\n",
            "0                                                                       \n",
            "1  Declaration Date    Record Date  Payment Date  Dividend\\nPer Share   \n",
            "2                                                                       \n",
            "3                                                                       \n",
            "4  Fiscal Year 2021                                                     \n",
            "\n",
            "               5  \n",
            "0                 \n",
            "1         Amount  \n",
            "2                 \n",
            "3                 \n",
            "4  (In millions)   \n",
            "\n",
            "Table 64:\n",
            "                     0              1     2     3\n",
            "0                                                \n",
            "1        (In millions)  (In millions)            \n",
            "2                                                \n",
            "3                                                \n",
            "4  Year Ended June 30,           2021  2020  2019 \n",
            "\n",
            "Table 65:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 66:\n",
            "                                         0                  1  \\\n",
            "0                                                               \n",
            "1                                                               \n",
            "2                      Year Ended June 30,               2021   \n",
            "3                                                               \n",
            "4  Dividends per share (quarterly amounts)  $\\t  0.51 –  0.56   \n",
            "\n",
            "                   2                  3  \n",
            "0                                        \n",
            "1                                        \n",
            "2               2020               2019  \n",
            "3                                        \n",
            "4  $\\t  0.46 –  0.51  $\\t  0.42 –  0.46   \n",
            "\n",
            "Table 67:\n",
            "               0              1              2       3  \\\n",
            "0                                                        \n",
            "1         Shares         Shares         Shares  Shares   \n",
            "2                                                        \n",
            "3  (In millions)  (In millions)  (In millions)           \n",
            "4                                                        \n",
            "\n",
            "                                           4  \n",
            "0                                             \n",
            "1  Weighted\\nAverage\\nGrant-Date\\nFair Value  \n",
            "2                                             \n",
            "3                                             \n",
            "4                                              \n",
            "\n",
            "Table 68:\n",
            "                      0     1     2     3     4     5\n",
            "0                                                    \n",
            "1  (Shares in millions)                              \n",
            "2                                                    \n",
            "3                                                    \n",
            "4   Year Ended June 30,  2021  2020  2020  2019  2019 \n",
            "\n",
            "Table 69:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 70:\n",
            "                     0     1     2     3     4     5\n",
            "0                                                   \n",
            "1        (In millions)                              \n",
            "2                                                   \n",
            "3                                                   \n",
            "4  Year Ended June 30,  2021  2020  2020  2019  2019 \n",
            "\n",
            "Table 71:\n",
            "                     0     1     2     3\n",
            "0                                       \n",
            "1        (In millions)                  \n",
            "2                                       \n",
            "3                                       \n",
            "4  Year Ended June 30,  2021  2020  2019 \n",
            "\n",
            "Table 72:\n",
            "               0     1     2     3\n",
            "0                                 \n",
            "1  (In millions)                  \n",
            "2                                 \n",
            "3                                 \n",
            "4       June 30,  2021  2020  2019 \n",
            "\n",
            "Table 73:\n",
            "                                                   0  \\\n",
            "0                                                      \n",
            "1  Satya Nadella\\nChairman and Chief Executive Of...   \n",
            "2                                                      \n",
            "3  Reid G. Hoffman\\nGeneral Partner, Greylock Par...   \n",
            "4                                                      \n",
            "\n",
            "                                                   1  \\\n",
            "0                                                      \n",
            "1  Sandra E. Peterson 2,3\\nOperating Partner,\\nCl...   \n",
            "2                                                      \n",
            "3  Penny S. Pritzker 4\\nFounder and Chairman,\\nPS...   \n",
            "4                                                      \n",
            "\n",
            "                                                   2  \n",
            "0                                                     \n",
            "1  John W. Thompson 3,4\\nLead Independent Directo...  \n",
            "2                                                     \n",
            "3  Emma N. Walmsley 2,4\\nChief Executive Officer,...  \n",
            "4                                                      \n",
            "\n",
            "Table 74:\n",
            "                                                   0  \\\n",
            "0                                                      \n",
            "1  Satya Nadella\\nChairman and Chief Executive Of...   \n",
            "2                                                      \n",
            "3  Judson Althoff\\nExecutive Vice President, Chie...   \n",
            "4                                                      \n",
            "\n",
            "                                                   1  \n",
            "0                                                     \n",
            "1  Amy E. Hood\\nExecutive Vice President, Chief F...  \n",
            "2                                                     \n",
            "3        Bradford L. Smith\\nPresident and Vice Chair  \n",
            "4                                                      \n",
            "\n",
            "Cleaned Table 1 with shape (12, 7)\n",
            "Cleaned Table 2 with shape (23, 5)\n",
            "Cleaned Table 3 with shape (5, 12)\n",
            "Cleaned Table 4 with shape (5, 2)\n",
            "Cleaned Table 5 with shape (13, 2)\n",
            "Cleaned Table 6 with shape (10, 2)\n",
            "Cleaned Table 7 with shape (12, 6)\n",
            "Cleaned Table 8 with shape (20, 4)\n",
            "Cleaned Table 9 with shape (6, 4)\n",
            "Cleaned Table 10 with shape (6, 4)\n",
            "Cleaned Table 11 with shape (6, 4)\n",
            "Cleaned Table 12 with shape (14, 5)\n",
            "Cleaned Table 13 with shape (12, 4)\n",
            "Cleaned Table 14 with shape (13, 2)\n",
            "Cleaned Table 15 with shape (15, 6)\n",
            "Cleaned Table 16 with shape (10, 4)\n",
            "Cleaned Table 17 with shape (39, 4)\n",
            "Cleaned Table 18 with shape (16, 8)\n",
            "Cleaned Table 19 with shape (54, 3)\n",
            "Cleaned Table 20 with shape (52, 4)\n",
            "Cleaned Table 21 with shape (35, 4)\n",
            "Cleaned Table 22 with shape (11, 8)\n",
            "Cleaned Table 23 with shape (9, 7)\n",
            "Cleaned Table 24 with shape (18, 4)\n",
            "Cleaned Table 25 with shape (14, 6)\n",
            "Cleaned Table 26 with shape (11, 4)\n",
            "Cleaned Table 27 with shape (11, 4)\n",
            "Cleaned Table 28 with shape (34, 9)\n",
            "Cleaned Table 29 with shape (35, 9)\n",
            "Cleaned Table 30 with shape (15, 7)\n",
            "Cleaned Table 31 with shape (14, 7)\n",
            "Cleaned Table 32 with shape (12, 3)\n",
            "Cleaned Table 33 with shape (16, 3)\n",
            "Cleaned Table 34 with shape (32, 5)\n",
            "Cleaned Table 35 with shape (13, 5)\n",
            "Cleaned Table 36 with shape (28, 7)\n",
            "Cleaned Table 37 with shape (10, 6)\n",
            "Cleaned Table 38 with shape (11, 3)\n",
            "Cleaned Table 39 with shape (16, 3)\n",
            "Cleaned Table 40 with shape (10, 2)\n",
            "Cleaned Table 41 with shape (8, 3)\n",
            "Cleaned Table 42 with shape (11, 2)\n",
            "Cleaned Table 43 with shape (10, 3)\n",
            "Cleaned Table 44 with shape (8, 8)\n",
            "Cleaned Table 45 with shape (12, 7)\n",
            "Cleaned Table 46 with shape (12, 5)\n",
            "Cleaned Table 47 with shape (14, 2)\n",
            "Cleaned Table 48 with shape (24, 6)\n",
            "Cleaned Table 49 with shape (14, 2)\n",
            "Cleaned Table 50 with shape (23, 4)\n",
            "Cleaned Table 51 with shape (10, 4)\n",
            "Cleaned Table 52 with shape (17, 4)\n",
            "Cleaned Table 53 with shape (41, 3)\n",
            "Cleaned Table 54 with shape (14, 4)\n",
            "Cleaned Table 55 with shape (11, 3)\n",
            "Cleaned Table 56 with shape (11, 2)\n",
            "Cleaned Table 57 with shape (13, 4)\n",
            "Cleaned Table 58 with shape (14, 4)\n",
            "Cleaned Table 59 with shape (38, 3)\n",
            "Cleaned Table 60 with shape (17, 3)\n",
            "Cleaned Table 61 with shape (11, 4)\n",
            "Cleaned Table 62 with shape (12, 7)\n",
            "Cleaned Table 63 with shape (22, 6)\n",
            "Cleaned Table 64 with shape (43, 4)\n",
            "Cleaned Table 65 with shape (8, 4)\n",
            "Cleaned Table 66 with shape (6, 4)\n",
            "Cleaned Table 67 with shape (13, 5)\n",
            "Cleaned Table 68 with shape (8, 6)\n",
            "Cleaned Table 69 with shape (22, 4)\n",
            "Cleaned Table 70 with shape (10, 6)\n",
            "Cleaned Table 71 with shape (17, 4)\n",
            "Cleaned Table 72 with shape (11, 4)\n",
            "Cleaned Table 73 with shape (7, 3)\n",
            "Cleaned Table 74 with shape (7, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save each cleaned table to a CSV file\n",
        "for i, df_1 in enumerate(cleaned_tables):\n",
        "    df_1.to_csv(f'tabledf1_{i + 1}.csv', index=False)\n",
        "\n",
        "\n",
        "example_table = cleaned_tables[16]\n",
        "print(example_table.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ePpaxY83lcb",
        "outputId": "75324aa2-61c8-4d88-fd37-e0b4fdbbf73a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0                                                           \n",
            "1  (In millions, except per share amounts)                  \n",
            "2                                                           \n",
            "3                                                           \n",
            "4                      Year Ended June 30,  2021  2020  2019\n",
            "5                                                           \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example: Accessing the 16th cleaned table\n",
        "sixteenth_table = cleaned_tables[16]\n",
        "print(sixteenth_table)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iF2gdvGg3pC6",
        "outputId": "47371343-489f-43c3-b233-2d877f9e43bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0                                                                           \n",
            "1   (In millions, except per share amounts)                                 \n",
            "2                                                                           \n",
            "3                                                                           \n",
            "4                       Year Ended June 30,       2021       2020       2019\n",
            "5                                                                           \n",
            "6                                  Revenue:                                 \n",
            "7                                   Product  $\\t71,074  $\\t68,041  $\\t66,069\n",
            "8                         Service and other     97,014     74,974     59,774\n",
            "9                                                                           \n",
            "10                            Total revenue    168,088    143,015    125,843\n",
            "11                                                                          \n",
            "12                         Cost of revenue:                                 \n",
            "13                                  Product     18,219     16,017     16,273\n",
            "14                        Service and other     34,013     30,061     26,637\n",
            "15                                                                          \n",
            "16                    Total cost of revenue     52,232     46,078     42,910\n",
            "17                                                                          \n",
            "18                             Gross margin    115,856     96,937     82,933\n",
            "19                 Research and development     20,716     19,269     16,876\n",
            "20                      Sales and marketing     20,117     19,598     18,213\n",
            "21               General and administrative      5,107      5,111      4,885\n",
            "22                                                                          \n",
            "23                         Operating income     69,916     52,959     42,959\n",
            "24                        Other income, net      1,186         77        729\n",
            "25                                                                          \n",
            "26               Income before income taxes     71,102     53,036     43,688\n",
            "27               Provision for income taxes      9,831      8,755      4,448\n",
            "28                                                                          \n",
            "29                               Net income  $\\t61,271  $\\t44,281  $\\t39,240\n",
            "30                                                                          \n",
            "31                                                                          \n",
            "32                      Earnings per share:                                 \n",
            "33                                    Basic    $\\t8.12    $\\t5.82    $\\t5.11\n",
            "34                                  Diluted    $\\t8.05    $\\t5.76    $\\t5.06\n",
            "35                                                                          \n",
            "36     Weighted average shares outstanding:                                 \n",
            "37                                    Basic      7,547      7,610      7,673\n",
            "38                                  Diluted      7,608      7,683      7,753\n",
            "39                                                                          \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the specific rows where \"Year\" and \"Net Income\" should be\n",
        "print(\"Row 3 (Expected Year Row):\", sixteenth_table.iloc[3])\n",
        "print(\"Row 5 (Expected Net Income Row):\", sixteenth_table.iloc[28])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j3QxorxM3r0u",
        "outputId": "8b4b47bb-446f-4df7-ee43-75515b6b16fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Row 3 (Expected Year Row): 0\n",
            "    Year Ended June 30,\n",
            "                   2021\n",
            "                   2020\n",
            "                   2019\n",
            "Name: 4, dtype: object\n",
            "Row 5 (Expected Net Income Row): 0\n",
            "    Net income\n",
            "     $\\t61,271\n",
            "     $\\t44,281\n",
            "     $\\t39,240\n",
            "Name: 29, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "years1 = sixteenth_table.iloc[3, 1:].values\n",
        "net_income1 = sixteenth_table.iloc[28, 1:].values\n",
        "\n",
        "\n",
        "print(\"Extracted Years:\", years1)\n",
        "print(\"Extracted Net Income:\", net_income1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CJ5QNbZl3uWa",
        "outputId": "85606676-c597-47be-a949-6cc65433b72d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracted Years: ['2021' '2020' '2019']\n",
            "Extracted Net Income: ['$\\t61,271' '$\\t44,281' '$\\t39,240']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Extraction of rows using keyword matching\n",
        "year_row1 = sixteenth_table[sixteenth_table.iloc[:, 0].str.contains('Year', case=False, na=False)]\n",
        "net_income_row1 = sixteenth_table[sixteenth_table.iloc[:, 0].str.contains('Net income', case=False, na=False)]\n",
        "\n",
        "\n",
        "print(\"Year Row:\", year_row1)\n",
        "print(\"Net Income Row:\", net_income_row1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vAPNDL3i3w68",
        "outputId": "6f4dfcb8-1330-4202-c627-94bbf9cb07d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year Row: 0                                       \n",
            "4  Year Ended June 30,  2021  2020  2019\n",
            "Net Income Row: 0                                              \n",
            "29  Net income  $\\t61,271  $\\t44,281  $\\t39,240\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import pandas as pd\n",
        "\n",
        "if not year_row1.empty and not net_income_row1.empty:\n",
        "    years = year_row1.iloc[0, 1:].values\n",
        "    net_income = net_income_row1.iloc[0, 1:].values\n",
        "\n",
        "    # Clean the extracted data\n",
        "    years_cleaned1 = pd.to_numeric([re.sub(r'[^\\d.-]', '', str(val)) for val in years], errors='coerce')\n",
        "    net_income_cleaned1 = pd.to_numeric([re.sub(r'[^\\d.-]', '', str(val)) for val in net_income], errors='coerce')\n",
        "\n",
        "    # Create DataFrame\n",
        "    net_income_df_1 = pd.DataFrame({\n",
        "        'Year': years_cleaned1,\n",
        "        'Net Income': net_income_cleaned1\n",
        "    })\n",
        "\n",
        "\n",
        "    print(net_income_df_1)\n",
        "else:\n",
        "    print(\"Year or Net Income rows are missing.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qy-Mv1BF31Ie",
        "outputId": "9201ddc4-92fb-4a77-b3fc-5f0868daf22b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year  Net Income\n",
            "0  2021       61271\n",
            "1  2020       44281\n",
            "2  2019       39240\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from docx import Document\n",
        "import pandas as pd\n",
        "\n",
        "# Load the document\n",
        "doc_path = '/content/drive/MyDrive/Thesis/2022_Annual_Report (1).docx'\n",
        "doc = Document(doc_path)\n",
        "\n",
        "# Extract all text\n",
        "full_text = []\n",
        "for para in doc.paragraphs:\n",
        "    full_text.append(para.text)\n",
        "\n",
        "\n",
        "full_text_str = \"\\n\".join(full_text)\n",
        "print(full_text_str[:2000])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DrxuRptc34Xd",
        "outputId": "ae1e04fb-354d-43d4-dbcf-ad36267f7757"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 2019. As I write this, inflation is at a 40-year high, supply chains are stretched, and the war in Ukraine is ongoing. At the same time, we are entering a technological era with the potential to power awesome advancements across every sector of our economy and society. As the world’s largest software company, this places us at a historic intersection of opportunity and responsibility to the world around us. \n",
            "Our mission to empower every person and every organization on the planet to achieve more has never been more urgent or more necessary. For all the uncertainty in the world, one thing is clear: People and organizations in every industry are increasingly looking to digital technology to overcome today’s challenges and emerge stronger. And no company is better positioned to help them than Microsoft. \n",
            "Every day this past fiscal year I have had the privilege to witness our customers use our platforms and tools to connect what technology can do with what the world needs it to do. \n",
            "Here are just a few examples: \n",
            "•\tFerrovial, which builds and manages some of the world’s busiest airports and highways, is using our cloud infrastructure to build safer roads as it prepares for a future of autonomous transportation. \n",
            "•\tPeace Parks Foundation, a nonprofit helping protect natural ecosystems in Southern Africa, is using Microsoft Dynamics 365 and Power BI to secure essential funding, as well as our Azure AI and IoT solutions to help rangers scale their park maintenance and wildlife crime prevention work. \n",
            "•\tOne of the world’s largest robotics companies, Kawasaki Heavy Industries, is using the breadth of our tools—from Azure IoT and HoloLens—to create an industrial metaverse solution that brings its distributed workforce together with its network of connected equipment to improve prod\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "irB2n16u0QJR"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DAKyJpJ638ef"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "tables = doc.tables\n",
        "\n",
        "\n",
        "tables_data = []\n",
        "\n",
        "\n",
        "for i, table in enumerate(tables):\n",
        "    data = []\n",
        "    for row in table.rows:\n",
        "        data.append([cell.text.strip() for cell in row.cells])\n",
        "\n",
        "\n",
        "    df_2 = pd.DataFrame(data)\n",
        "    tables_data.append(df_2)\n",
        "\n",
        "\n",
        "    print(f\"Table {i + 1}:\")\n",
        "    print(df_2.head(), \"\\n\")\n",
        "\n",
        "def clean_table(df_2):\n",
        "\n",
        "    df_2.dropna(how='all', axis=0, inplace=True)\n",
        "    df_2.dropna(how='all', axis=1, inplace=True)\n",
        "\n",
        "\n",
        "    df_2.reset_index(drop=True, inplace=True)\n",
        "\n",
        "\n",
        "    if len(df_2) > 1:\n",
        "        df_2.columns = df_2.iloc[0]\n",
        "        df_2 = df_2[1:]\n",
        "\n",
        "\n",
        "    df_2 = df_2.apply(pd.to_numeric, errors='ignore')\n",
        "\n",
        "    return df_2\n",
        "\n",
        "\n",
        "cleaned_tables = [clean_table(df_2) for df_2 in tables_data]\n",
        "\n",
        "\n",
        "for i, df_2 in enumerate(cleaned_tables):\n",
        "    print(f\"Cleaned Table {i + 1} with shape {df_2.shape}\")\n",
        "\n",
        "\n",
        "# Save each cleaned table to a CSV file\n",
        "for i, df_2 in enumerate(cleaned_tables):\n",
        "    df_2.to_csv(f'tabledf2_{i + 1}.csv', index=False)\n",
        "\n",
        "\n",
        "example_table = cleaned_tables[16]\n",
        "print(example_table.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p1T_aooEuHEG",
        "outputId": "823e2272-2bb4-4682-c6ec-7ec00e69d032"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Table 1:\n",
            "                     0       1       2       3       4       5       6\n",
            "0        (In millions)  Shares  Amount  Shares  Amount  Shares  Amount\n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Year Ended June 30,    2022    2022    2021    2021    2020    2020\n",
            "4                                                                      \n",
            "\n",
            "Table 2:\n",
            "                  0            1             2                    3  \\\n",
            "0  Declaration Date  Record Date  Payment Date  Dividend\\nPer Share   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Fiscal Year 2022                                                   \n",
            "4                                                                     \n",
            "\n",
            "               4  \n",
            "0         Amount  \n",
            "1                 \n",
            "2                 \n",
            "3  (In millions)  \n",
            "4                  \n",
            "\n",
            "Table 3:\n",
            "                       0       1       2       3       4       5       6\n",
            "0                           6/17    6/18    6/19    6/20    6/21    6/22\n",
            "1                                                                       \n",
            "2  Microsoft Corporation  100.00  145.84  201.36  309.69  416.25  397.90\n",
            "3                S&P 500  100.00  114.37  126.29  135.77  191.15  170.86\n",
            "4        NASDAQ Computer  100.00  131.27  139.29  196.40  288.13  228.71 \n",
            "\n",
            "Table 4:\n",
            "                                             0  \\\n",
            "0  Commercial remaining performance obligation   \n",
            "1                                                \n",
            "2                      Microsoft Cloud revenue   \n",
            "3                                                \n",
            "4      Microsoft Cloud gross margin percentage   \n",
            "\n",
            "                                                   1  \n",
            "0  Commercial portion of revenue allocated to rem...  \n",
            "1                                                     \n",
            "2  Revenue from Azure and other cloud services, O...  \n",
            "3                                                     \n",
            "4  Gross margin percentage for our Microsoft Clou...   \n",
            "\n",
            "Table 5:\n",
            "                                                   0  \\\n",
            "0  Office Commercial products and cloud services ...   \n",
            "1                                                      \n",
            "2  Office Consumer products and cloud services re...   \n",
            "3                                                      \n",
            "4                  Office 365 Commercial seat growth   \n",
            "\n",
            "                                                   1  \n",
            "0  Revenue from Office Commercial products and cl...  \n",
            "1                                                     \n",
            "2  Revenue from Office Consumer products and clou...  \n",
            "3                                                     \n",
            "4  The number of Office 365 Commercial seats at e...   \n",
            "\n",
            "Table 6:\n",
            "                                                   0  \\\n",
            "0                         Windows OEM revenue growth   \n",
            "1                                                      \n",
            "2  Windows Commercial products and cloud services...   \n",
            "3                                                      \n",
            "4                             Surface revenue growth   \n",
            "\n",
            "                                                   1  \n",
            "0  Revenue from sales of Windows Pro and non-Pro ...  \n",
            "1                                                     \n",
            "2  Revenue from Windows Commercial products and c...  \n",
            "3                                                     \n",
            "4       Revenue from Surface devices and accessories   \n",
            "\n",
            "Table 7:\n",
            "                                                   0            1  \\\n",
            "0  (In millions, except percentages and per share...         2022   \n",
            "1                                                                   \n",
            "2                                                                   \n",
            "3                                            Revenue  $\\t 198,270   \n",
            "4                                       Gross margin      135,620   \n",
            "\n",
            "              2                   3  \n",
            "0          2021  Percentage\\nChange  \n",
            "1                                    \n",
            "2                                    \n",
            "3  $\\t  168,088                 18%  \n",
            "4       115,856                 17%   \n",
            "\n",
            "Table 8:\n",
            "                                   0     1     2                   3\n",
            "0  (In millions, except percentages)  2022  2021  Percentage\\nChange\n",
            "1                                                                   \n",
            "2                                                                   \n",
            "3                            Revenue                                \n",
            "4                                                                    \n",
            "\n",
            "Table 9:\n",
            "                                   0            1            2  \\\n",
            "0  (In millions, except percentages)         2022         2021   \n",
            "1                                                                \n",
            "2                                                                \n",
            "3           Research and development  $\\t  24,512  $\\t  20,716   \n",
            "4            As a percent of revenue          12%          12%   \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                      \n",
            "3                 18%  \n",
            "4                0ppt   \n",
            "\n",
            "Table 10:\n",
            "                                   0            1            2  \\\n",
            "0  (In millions, except percentages)         2022         2021   \n",
            "1                                                                \n",
            "2                                                                \n",
            "3                Sales and marketing  $\\t  21,825  $\\t  20,117   \n",
            "4            As a percent of revenue          11%          12%   \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                      \n",
            "3                  8%  \n",
            "4              (1)ppt   \n",
            "\n",
            "Table 11:\n",
            "                                   0           1           2  \\\n",
            "0  (In millions, except percentages)        2022        2021   \n",
            "1                                                              \n",
            "2                                                              \n",
            "3         General and administrative  $\\t  5,900  $\\t  5,107   \n",
            "4            As a percent of revenue          3%          3%   \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                      \n",
            "3                 16%  \n",
            "4                0ppt   \n",
            "\n",
            "Table 12:\n",
            "                     0     1     2\n",
            "0        (In millions)            \n",
            "1                                 \n",
            "2                                 \n",
            "3  Year Ended June 30,  2022  2021\n",
            "4                                  \n",
            "\n",
            "Table 13:\n",
            "                                                   0            1  \\\n",
            "0  (In millions, except percentages and per share...         2022   \n",
            "1                                                                   \n",
            "2                                         Net income  $\\t  72,738   \n",
            "3  Net income tax benefit related to transfer of ...    (3,291\\t)   \n",
            "4  Net income tax benefit related to India Suprem...            0   \n",
            "\n",
            "             2                   3  \n",
            "0         2021  Percentage\\nChange  \n",
            "1                                   \n",
            "2  $\\t  61,271                 19%  \n",
            "3            0                   *  \n",
            "4      (620\\t)                   *   \n",
            "\n",
            "Table 14:\n",
            "                     0 1\n",
            "0        (In millions)  \n",
            "1                       \n",
            "2                       \n",
            "3  Three Months Ending  \n",
            "4                        \n",
            "\n",
            "Table 15:\n",
            "                     0         1           2          3\n",
            "0        (In millions)      2023  Thereafter      Total\n",
            "1                                                      \n",
            "2                                                      \n",
            "3  Long-term debt: (a)                                 \n",
            "4   Principal payments  $\\t2,750   $\\t52,761  $\\t55,511 \n",
            "\n",
            "Table 16:\n",
            "                 0                    1               2       3\n",
            "0    (In millions)                                             \n",
            "1                                                              \n",
            "2                                                              \n",
            "3  Risk Categories  Hypothetical Change  June 30,\\n2022  Impact\n",
            "4                                                               \n",
            "\n",
            "Table 17:\n",
            "                                         0     1     2     3\n",
            "0  (In millions, except per share amounts)                  \n",
            "1                                                           \n",
            "2                                                           \n",
            "3                      Year Ended June 30,  2022  2021  2020\n",
            "4                                                            \n",
            "\n",
            "Table 18:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 19:\n",
            "               0     1     2\n",
            "0  (In millions)            \n",
            "1                           \n",
            "2                           \n",
            "3       June 30,  2022  2021\n",
            "4                            \n",
            "\n",
            "Table 20:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 21:\n",
            "                                         0     1     2     3\n",
            "0  (In millions, except per share amounts)                  \n",
            "1                                                           \n",
            "2                                                           \n",
            "3                      Year Ended June 30,  2022  2021  2020\n",
            "4                                                            \n",
            "\n",
            "Table 22:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 23:\n",
            "                                                   0          1          2  \\\n",
            "0                                      (In millions)                         \n",
            "1                                                                            \n",
            "2                                           June 30,       2022       2021   \n",
            "3                                                                            \n",
            "4  Accounts receivable, net of allowance for doub...  $\\t   633  $\\t   751   \n",
            "\n",
            "           3  \n",
            "0             \n",
            "1             \n",
            "2       2020  \n",
            "3             \n",
            "4  $\\t   788   \n",
            "\n",
            "Table 24:\n",
            "                                          0     1     2     3\n",
            "0  (In millions, except earnings per share)                  \n",
            "1                                                            \n",
            "2                                                            \n",
            "3                       Year Ended June 30,  2022  2021  2020\n",
            "4                                                             \n",
            "\n",
            "Table 25:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 26:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 27:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 28:\n",
            "               0                  1                     2                  3  \\\n",
            "0  (In millions)  Fair Value\\nLevel  Adjusted\\nCost Basis  Unrealized\\nGains   \n",
            "1                                                                              \n",
            "2                                                                              \n",
            "3  June 30, 2022                                                               \n",
            "4                                                                              \n",
            "\n",
            "                    4                5                            6  \\\n",
            "0  Unrealized\\nLosses  Recorded\\nBasis  Cash\\nand Cash\\nEquivalents   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4                                                                     \n",
            "\n",
            "                         7                    8  \n",
            "0  Short-term\\nInvestments  Equity\\nInvestments  \n",
            "1                                                \n",
            "2                                                \n",
            "3                                                \n",
            "4                                                 \n",
            "\n",
            "Table 29:\n",
            "               0                  1                     2                  3  \\\n",
            "0  (In millions)  Fair Value\\nLevel  Adjusted\\nCost Basis  Unrealized\\nGains   \n",
            "1                                                                              \n",
            "2                                                                              \n",
            "3  June 30, 2021                                                               \n",
            "4                                                                              \n",
            "\n",
            "                    4                5                            6  \\\n",
            "0  Unrealized\\nLosses  Recorded\\nBasis  Cash\\nand Cash\\nEquivalents   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4                                                                     \n",
            "\n",
            "                         7                    8  \n",
            "0  Short-term\\nInvestments  Equity\\nInvestments  \n",
            "1                                                \n",
            "2                                                \n",
            "3                                                \n",
            "4                                                 \n",
            "\n",
            "Table 30:\n",
            "               0                    1                    2  \\\n",
            "0                 Less than 12 Months  Less than 12 Months   \n",
            "1                                                            \n",
            "2  (In millions)           Fair Value   Unrealized\\nLosses   \n",
            "3                                                            \n",
            "4                                                            \n",
            "\n",
            "                      3                     4                  5  \\\n",
            "0  12 Months or Greater  12 Months or Greater                      \n",
            "1                                                                  \n",
            "2            Fair Value    Unrealized\\nLosses  Total\\nFair Value   \n",
            "3                                                                  \n",
            "4                                                                  \n",
            "\n",
            "                           6  \n",
            "0  Total\\nUnrealized\\nLosses  \n",
            "1  Total\\nUnrealized\\nLosses  \n",
            "2  Total\\nUnrealized\\nLosses  \n",
            "3                             \n",
            "4                              \n",
            "\n",
            "Table 31:\n",
            "               0                    1                    2  \\\n",
            "0                 Less than 12 Months  Less than 12 Months   \n",
            "1                                                            \n",
            "2  (In millions)           Fair Value   Unrealized\\nLosses   \n",
            "3                                                            \n",
            "4  June 30, 2021                                             \n",
            "\n",
            "                      3                     4                  5  \\\n",
            "0  12 Months or Greater  12 Months or Greater                      \n",
            "1                                                                  \n",
            "2            Fair Value    Unrealized\\nLosses  Total\\nFair Value   \n",
            "3                                                                  \n",
            "4                                                                  \n",
            "\n",
            "                           6  \n",
            "0  Total\\nUnrealized\\nLosses  \n",
            "1  Total\\nUnrealized\\nLosses  \n",
            "2  Total\\nUnrealized\\nLosses  \n",
            "3                             \n",
            "4                              \n",
            "\n",
            "Table 32:\n",
            "               0                     1                      2\n",
            "0  (In millions)  Adjusted\\nCost Basis  Estimated\\nFair Value\n",
            "1                                                            \n",
            "2                                                            \n",
            "3  June 30, 2022                                             \n",
            "4                                                             \n",
            "\n",
            "Table 33:\n",
            "                                   0               1               2\n",
            "0                      (In millions)  June 30,\\n2022  June 30,\\n2021\n",
            "1                                                                   \n",
            "2                                                                   \n",
            "3  Designated as Hedging Instruments                                \n",
            "4                                                                    \n",
            "\n",
            "Table 34:\n",
            "               0                   1                        2  \\\n",
            "0  (In millions)  Derivative\\nAssets  Derivative\\nLiabilities   \n",
            "1                                                               \n",
            "2                                                               \n",
            "3                     June 30,\\n2022           June 30,\\n2022   \n",
            "4                                                               \n",
            "\n",
            "                    3                        4  \n",
            "0  Derivative\\nAssets  Derivative\\nLiabilities  \n",
            "1                                               \n",
            "2                                               \n",
            "3      June 30,\\n2021           June 30,\\n2021  \n",
            "4                                                \n",
            "\n",
            "Table 35:\n",
            "               0        1        2        3      4\n",
            "0  (In millions)  Level 1  Level 2  Level 3  Total\n",
            "1                                                 \n",
            "2                                                 \n",
            "3  June 30, 2022                                  \n",
            "4                                                  \n",
            "\n",
            "Table 36:\n",
            "                     0              1              2              3\n",
            "0        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "1                                                                  \n",
            "2                                                                  \n",
            "3  Year Ended June 30,           2022           2021           2020\n",
            "4                                                                   \n",
            "\n",
            "Table 37:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 38:\n",
            "               0              1              2\n",
            "0  (In millions)  (In millions)  (In millions)\n",
            "1                                             \n",
            "2                                             \n",
            "3       June 30,           2022           2021\n",
            "4                                              \n",
            "\n",
            "Table 39:\n",
            "               0              1              2\n",
            "0  (In millions)  (In millions)  (In millions)\n",
            "1                                             \n",
            "2                                             \n",
            "3       June 30,           2022           2021\n",
            "4                                              \n",
            "\n",
            "Table 40:\n",
            "                   0          1\n",
            "0      (In millions)           \n",
            "1                              \n",
            "2       Goodwill (a)  $\\t16,308\n",
            "3  Intangible assets      4,365\n",
            "4       Other assets         59 \n",
            "\n",
            "Table 41:\n",
            "                                    0       1                       2\n",
            "0  (In millions, except average life)  Amount  Weighted\\nAverage Life\n",
            "1                                                                    \n",
            "2                                                                    \n",
            "3                    Customer-related  $2,610                 9 years\n",
            "4                    Technology-based   1,540                 5 years \n",
            "\n",
            "Table 42:\n",
            "                           0       1\n",
            "0              (In millions)        \n",
            "1                                   \n",
            "2  Cash and cash equivalents  $\\t766\n",
            "3                   Goodwill   5,510\n",
            "4          Intangible assets   1,968 \n",
            "\n",
            "Table 43:\n",
            "                                    0           1                       2\n",
            "0  (In millions, except average life)      Amount  Weighted\\nAverage Life\n",
            "1                                                                        \n",
            "2                                                                        \n",
            "3                    Technology-based  $\\t  1,341                 4 years\n",
            "4                   Marketing-related         627                11 years \n",
            "\n",
            "Table 44:\n",
            "                                     0               1             2  \\\n",
            "0                        (In millions)  June 30,\\n2020  Acquisitions   \n",
            "1                                                                      \n",
            "2  Productivity and Business Processes       $\\t24,190          $\\t0   \n",
            "3                    Intelligent Cloud          12,697           505   \n",
            "4              More Personal Computing           6,464  5,556\\t  (a)   \n",
            "\n",
            "            3               4              5           6               7  \n",
            "0       Other  June 30,\\n2021   Acquisitions       Other  June 30,\\n2022  \n",
            "1                                                                         \n",
            "2      $\\t127       $\\t24,317         $\\t599  $\\t(105\\t)       $\\t24,811  \n",
            "3          54          13,256  16,879\\t  (b)   47\\t  (b)          30,182  \n",
            "4  118\\t  (a)          12,138            648     (255\\t)          12,531   \n",
            "\n",
            "Table 45:\n",
            "               0                          1                          2  \\\n",
            "0  (In millions)  Gross \\nCarrying \\nAmount  Accumulated\\nAmortization   \n",
            "1                                                                        \n",
            "2                                                                        \n",
            "3       June 30,                                                         \n",
            "4                                                                        \n",
            "\n",
            "                      3                          4                          5  \\\n",
            "0  Net Carrying\\nAmount  Gross \\nCarrying \\nAmount  Accumulated\\nAmortization   \n",
            "1                                                                               \n",
            "2                                                                               \n",
            "3                  2022                                                         \n",
            "4                                                                               \n",
            "\n",
            "                      6  \n",
            "0  Net Carrying\\nAmount  \n",
            "1                        \n",
            "2                        \n",
            "3                  2021  \n",
            "4                         \n",
            "\n",
            "Table 46:\n",
            "                     0       1                       2       3  \\\n",
            "0        (In millions)  Amount  Weighted\\nAverage Life  Amount   \n",
            "1                                                                \n",
            "2                                                                \n",
            "3  Year Ended June 30,    2022                            2021   \n",
            "4                                                                \n",
            "\n",
            "                        4  \n",
            "0  Weighted\\nAverage Life  \n",
            "1                          \n",
            "2                          \n",
            "3                          \n",
            "4                           \n",
            "\n",
            "Table 47:\n",
            "                      0 1\n",
            "0         (In millions)  \n",
            "1                        \n",
            "2                        \n",
            "3  Year Ending June 30,  \n",
            "4                         \n",
            "\n",
            "Table 48:\n",
            "                                          0                            1  \\\n",
            "0                                                                          \n",
            "1  (In millions, issuance by calendar year)  Maturities\\n(calendar year)   \n",
            "2                                                                          \n",
            "3         2009 issuance of $3.8 billion (a)                         2039   \n",
            "4         2010 issuance of $4.8 billion (a)                         2040   \n",
            "\n",
            "                       2                         3               4  \\\n",
            "0                                                                    \n",
            "1  Stated Interest\\nRate  Effective Interest\\nRate  June 30,\\n2022   \n",
            "2                                                                    \n",
            "3                  5.20%                     5.24%          $\\t520   \n",
            "4                  4.50%                     4.57%             486   \n",
            "\n",
            "                5  \n",
            "0                  \n",
            "1  June 30,\\n2021  \n",
            "2                  \n",
            "3          $\\t520  \n",
            "4             486   \n",
            "\n",
            "Table 49:\n",
            "                      0 1\n",
            "0         (In millions)  \n",
            "1                        \n",
            "2                        \n",
            "3  Year Ending June 30,  \n",
            "4                         \n",
            "\n",
            "Table 50:\n",
            "                     0              1              2              3\n",
            "0        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "1                                                                  \n",
            "2                                                                  \n",
            "3  Year Ended June 30,           2022           2021           2020\n",
            "4                                                                   \n",
            "\n",
            "Table 51:\n",
            "                     0              1              2              3\n",
            "0        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "1                                                                  \n",
            "2                                                                  \n",
            "3  Year Ended June 30,           2022           2021           2020\n",
            "4                                                                   \n",
            "\n",
            "Table 52:\n",
            "                        0      1      2      3\n",
            "0                                             \n",
            "1     Year Ended June 30,   2022   2021   2020\n",
            "2                                             \n",
            "3  Federal statutory rate  21.0%  21.0%  21.0%\n",
            "4              Effect of:                      \n",
            "\n",
            "Table 53:\n",
            "               0     1     2\n",
            "0  (In millions)            \n",
            "1                           \n",
            "2                           \n",
            "3       June 30,  2022  2021\n",
            "4                            \n",
            "\n",
            "Table 54:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 55:\n",
            "               0     1     2\n",
            "0  (In millions)            \n",
            "1                           \n",
            "2                           \n",
            "3       June 30,  2022  2021\n",
            "4                            \n",
            "\n",
            "Table 56:\n",
            "                          0 1\n",
            "0             (In millions)  \n",
            "1                            \n",
            "2                            \n",
            "3  Year Ended June 30, 2022  \n",
            "4                             \n",
            "\n",
            "Table 57:\n",
            "                     0              1              2     3\n",
            "0        (In millions)  (In millions)  (In millions)      \n",
            "1                                                         \n",
            "2                                                         \n",
            "3  Year Ended June 30,           2022           2021  2020\n",
            "4                                                          \n",
            "\n",
            "Table 58:\n",
            "                     0              1              2     3\n",
            "0        (In millions)  (In millions)  (In millions)      \n",
            "1                                                         \n",
            "2                                                         \n",
            "3  Year Ended June 30,           2022           2021  2020\n",
            "4                                                          \n",
            "\n",
            "Table 59:\n",
            "                                                   0     1     2\n",
            "0  (In millions, except lease term and discount r...            \n",
            "1                                                               \n",
            "2                                                               \n",
            "3                                           June 30,  2022  2021\n",
            "4                                                                \n",
            "\n",
            "Table 60:\n",
            "                      0                  1                2\n",
            "0         (In millions)                                    \n",
            "1                                                          \n",
            "2                                                          \n",
            "3  Year Ending June 30,  Operating\\nLeases  Finance\\nLeases\n",
            "4                                                           \n",
            "\n",
            "Table 61:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 62:\n",
            "                     0       1       2       3       4       5       6\n",
            "0        (In millions)  Shares  Amount  Shares  Amount  Shares  Amount\n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Year Ended June 30,    2022    2022    2021    2021    2020    2020\n",
            "4                                                                      \n",
            "\n",
            "Table 63:\n",
            "                  0 1            2             3                    4  \\\n",
            "0  Declaration Date    Record Date  Payment Date  Dividend\\nPer Share   \n",
            "1                                                                       \n",
            "2                                                                       \n",
            "3  Fiscal Year 2022                                                     \n",
            "4                                                                       \n",
            "\n",
            "               5  \n",
            "0         Amount  \n",
            "1                 \n",
            "2                 \n",
            "3  (In millions)  \n",
            "4                  \n",
            "\n",
            "Table 64:\n",
            "                     0              1              2     3\n",
            "0        (In millions)  (In millions)  (In millions)      \n",
            "1                                                         \n",
            "2                                                         \n",
            "3  Year Ended June 30,           2022           2021  2020\n",
            "4                                                          \n",
            "\n",
            "Table 65:\n",
            "                                   0              1              2  \\\n",
            "0                      (In millions)  (In millions)  (In millions)   \n",
            "1                Year Ended June 30,           2022           2021   \n",
            "2                                                                    \n",
            "3  Translation Adjustments and Other                                 \n",
            "4                                                                    \n",
            "\n",
            "               3  \n",
            "0  (In millions)  \n",
            "1           2020  \n",
            "2                 \n",
            "3                 \n",
            "4                  \n",
            "\n",
            "Table 66:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 67:\n",
            "                                         0                  1  \\\n",
            "0                                                               \n",
            "1                      Year ended June 30,               2022   \n",
            "2                                                               \n",
            "3  Dividends per share (quarterly amounts)  $\\t  0.56 –  0.62   \n",
            "4                           Interest rates       0.03% – 3.6%   \n",
            "\n",
            "                  2               3  \n",
            "0                                    \n",
            "1              2021            2020  \n",
            "2                                    \n",
            "3  $\\t  0.51 – 0.56  $\\t0.46 – 0.51  \n",
            "4      0.01% – 1.5%     0.1% – 2.2%   \n",
            "\n",
            "Table 68:\n",
            "               0              1                                          2\n",
            "0         Shares         Shares  Weighted\\nAverage\\nGrant-Date\\nFair Value\n",
            "1                                                                         \n",
            "2  (In millions)  (In millions)                                           \n",
            "3                                                                         \n",
            "4   Stock Awards   Stock Awards                               Stock Awards \n",
            "\n",
            "Table 69:\n",
            "                      0     1     2     3\n",
            "0  (Shares in millions)                  \n",
            "1                                        \n",
            "2                                        \n",
            "3   Year Ended June 30,  2022  2021  2020\n",
            "4                                         \n",
            "\n",
            "Table 70:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 71:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 72:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "4                                        \n",
            "\n",
            "Table 73:\n",
            "               0     1     2     3\n",
            "0  (In millions)                  \n",
            "1                                 \n",
            "2                                 \n",
            "3       June 30,  2022  2021  2020\n",
            "4                                  \n",
            "\n",
            "Table 74:\n",
            "                           0 1\n",
            "0  /S/ DELOITTE & TOUCHE LLP  \n",
            "1                             \n",
            "2        Seattle, Washington  \n",
            "3              July 28, 2022   \n",
            "\n",
            "Table 75:\n",
            "                                                   0  \\\n",
            "0  Satya Nadella\\nChairman and Chief Executive Of...   \n",
            "1                                                      \n",
            "2  Reid G. Hoffman 4\\nGeneral Partner, Greylock P...   \n",
            "3                                                      \n",
            "4  Hugh F. Johnston 1\\nVice Chairman and Executiv...   \n",
            "\n",
            "                                                   1  \\\n",
            "0  Sandra E. Peterson 2,3\\nOperating Partner,\\nCl...   \n",
            "1                                                      \n",
            "2  Penny S. Pritzker 4\\nFounder and Chairman,\\nPS...   \n",
            "3                                                      \n",
            "4  Carlos A. Rodriguez 1\\nChief Executive Officer...   \n",
            "\n",
            "                                                   2  \n",
            "0  John W. Stanton 1,4\\nFounder and Chairman, Tri...  \n",
            "1                                                     \n",
            "2  John W. Thompson 3,4\\nLead Independent Directo...  \n",
            "3                                                     \n",
            "4  Emma N. Walmsley 2,4\\nChief Executive Officer,...   \n",
            "\n",
            "Table 76:\n",
            "                                                   0  \\\n",
            "0  Satya Nadella\\nChairman and Chief Executive Of...   \n",
            "1                                                      \n",
            "2  Judson Althoff\\nExecutive Vice President and C...   \n",
            "3                                                      \n",
            "4  Christopher C. Capossela\\nExecutive Vice Presi...   \n",
            "\n",
            "                                                   1  \n",
            "0  Amy E. Hood\\nExecutive Vice President and Chie...  \n",
            "1                                                     \n",
            "2        Bradford L. Smith\\nVice Chair and President  \n",
            "3                                                     \n",
            "4  Christopher D. Young\\nExecutive Vice President...   \n",
            "\n",
            "Cleaned Table 1 with shape (11, 7)\n",
            "Cleaned Table 2 with shape (22, 5)\n",
            "Cleaned Table 3 with shape (4, 7)\n",
            "Cleaned Table 4 with shape (4, 2)\n",
            "Cleaned Table 5 with shape (11, 2)\n",
            "Cleaned Table 6 with shape (8, 2)\n",
            "Cleaned Table 7 with shape (11, 4)\n",
            "Cleaned Table 8 with shape (19, 4)\n",
            "Cleaned Table 9 with shape (5, 4)\n",
            "Cleaned Table 10 with shape (5, 4)\n",
            "Cleaned Table 11 with shape (5, 4)\n",
            "Cleaned Table 12 with shape (13, 3)\n",
            "Cleaned Table 13 with shape (13, 4)\n",
            "Cleaned Table 14 with shape (12, 2)\n",
            "Cleaned Table 15 with shape (11, 4)\n",
            "Cleaned Table 16 with shape (10, 4)\n",
            "Cleaned Table 17 with shape (38, 4)\n",
            "Cleaned Table 18 with shape (15, 4)\n",
            "Cleaned Table 19 with shape (53, 3)\n",
            "Cleaned Table 20 with shape (51, 4)\n",
            "Cleaned Table 21 with shape (34, 4)\n",
            "Cleaned Table 22 with shape (10, 4)\n",
            "Cleaned Table 23 with shape (8, 4)\n",
            "Cleaned Table 24 with shape (17, 4)\n",
            "Cleaned Table 25 with shape (13, 4)\n",
            "Cleaned Table 26 with shape (10, 4)\n",
            "Cleaned Table 27 with shape (10, 4)\n",
            "Cleaned Table 28 with shape (32, 9)\n",
            "Cleaned Table 29 with shape (37, 9)\n",
            "Cleaned Table 30 with shape (14, 7)\n",
            "Cleaned Table 31 with shape (13, 7)\n",
            "Cleaned Table 32 with shape (11, 3)\n",
            "Cleaned Table 33 with shape (15, 3)\n",
            "Cleaned Table 34 with shape (34, 5)\n",
            "Cleaned Table 35 with shape (12, 5)\n",
            "Cleaned Table 36 with shape (24, 4)\n",
            "Cleaned Table 37 with shape (9, 4)\n",
            "Cleaned Table 38 with shape (10, 3)\n",
            "Cleaned Table 39 with shape (15, 3)\n",
            "Cleaned Table 40 with shape (8, 2)\n",
            "Cleaned Table 41 with shape (8, 3)\n",
            "Cleaned Table 42 with shape (9, 2)\n",
            "Cleaned Table 43 with shape (7, 3)\n",
            "Cleaned Table 44 with shape (7, 8)\n",
            "Cleaned Table 45 with shape (11, 7)\n",
            "Cleaned Table 46 with shape (11, 5)\n",
            "Cleaned Table 47 with shape (13, 2)\n",
            "Cleaned Table 48 with shape (25, 6)\n",
            "Cleaned Table 49 with shape (13, 2)\n",
            "Cleaned Table 50 with shape (22, 4)\n",
            "Cleaned Table 51 with shape (9, 4)\n",
            "Cleaned Table 52 with shape (15, 4)\n",
            "Cleaned Table 53 with shape (40, 3)\n",
            "Cleaned Table 54 with shape (13, 4)\n",
            "Cleaned Table 55 with shape (10, 3)\n",
            "Cleaned Table 56 with shape (10, 2)\n",
            "Cleaned Table 57 with shape (12, 4)\n",
            "Cleaned Table 58 with shape (13, 4)\n",
            "Cleaned Table 59 with shape (37, 3)\n",
            "Cleaned Table 60 with shape (16, 3)\n",
            "Cleaned Table 61 with shape (10, 4)\n",
            "Cleaned Table 62 with shape (11, 7)\n",
            "Cleaned Table 63 with shape (21, 6)\n",
            "Cleaned Table 64 with shape (33, 4)\n",
            "Cleaned Table 65 with shape (11, 4)\n",
            "Cleaned Table 66 with shape (7, 4)\n",
            "Cleaned Table 67 with shape (5, 4)\n",
            "Cleaned Table 68 with shape (12, 3)\n",
            "Cleaned Table 69 with shape (7, 4)\n",
            "Cleaned Table 70 with shape (21, 4)\n",
            "Cleaned Table 71 with shape (9, 4)\n",
            "Cleaned Table 72 with shape (16, 4)\n",
            "Cleaned Table 73 with shape (10, 4)\n",
            "Cleaned Table 74 with shape (3, 2)\n",
            "Cleaned Table 75 with shape (6, 3)\n",
            "Cleaned Table 76 with shape (6, 2)\n",
            "0 (In millions, except per share amounts)                  \n",
            "1                                                          \n",
            "2                                                          \n",
            "3                     Year Ended June 30,  2022  2021  2020\n",
            "4                                                          \n",
            "5                                Revenue:                  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example: Accessing the 17th cleaned table\n",
        "seventeenth_table = cleaned_tables[17]\n",
        "print(seventeenth_table)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "46scmoMa4IwD",
        "outputId": "3056b857-ac55-4a51-e9f2-119acdebb5e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0                                    (In millions)                            \\\n",
            "1                                                                              \n",
            "2                                                                              \n",
            "3                              Year Ended June 30,         2022         2021   \n",
            "4                                                                              \n",
            "5                                       Net income  $\\t  72,738  $\\t  61,271   \n",
            "6                                                                              \n",
            "7   Other comprehensive income (loss), net of tax:                             \n",
            "8                Net change related to derivatives            6           19   \n",
            "9                Net change related to investments    (5,360\\t)    (2,266\\t)   \n",
            "10               Translation adjustments and other    (1,146\\t)          873   \n",
            "11                                                                             \n",
            "12               Other comprehensive income (loss)    (6,500\\t)    (1,374\\t)   \n",
            "13                                                                             \n",
            "14                            Comprehensive income    $\\t66,238    $\\t59,897   \n",
            "15                                                                             \n",
            "\n",
            "0                \n",
            "1                \n",
            "2                \n",
            "3          2020  \n",
            "4                \n",
            "5   $\\t  44,281  \n",
            "6                \n",
            "7                \n",
            "8        (38\\t)  \n",
            "9         3,990  \n",
            "10      (426\\t)  \n",
            "11               \n",
            "12        3,526  \n",
            "13               \n",
            "14    $\\t47,807  \n",
            "15               \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the specific rows where \"Year\" and \"Net Income\" should be\n",
        "print(\"Row 3 (Expected Year Row):\", seventeenth_table.iloc[2])\n",
        "print(\"Row 5 (Expected Net Income Row):\", seventeenth_table.iloc[4])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gczljiLH4LhZ",
        "outputId": "033a46e9-e509-432f-b8e5-1dae5d5e8815"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Row 3 (Expected Year Row): 0\n",
            "(In millions)    Year Ended June 30,\n",
            "                                2022\n",
            "                                2021\n",
            "                                2020\n",
            "Name: 3, dtype: object\n",
            "Row 5 (Expected Net Income Row): 0\n",
            "(In millions)     Net income\n",
            "                 $\\t  72,738\n",
            "                 $\\t  61,271\n",
            "                 $\\t  44,281\n",
            "Name: 5, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "years2 = seventeenth_table.iloc[2, 1:].values\n",
        "net_income2 = seventeenth_table.iloc[4, 1:].values\n",
        "\n",
        "\n",
        "print(\"Extracted Years:\", years2)\n",
        "print(\"Extracted Net Income:\", net_income2)\n",
        "\n",
        "# Extract rows using keyword matching\n",
        "year_row2 = seventeenth_table[seventeenth_table.iloc[:, 0].str.contains('Year', case=False, na=False)]\n",
        "net_income_row2 = seventeenth_table[seventeenth_table.iloc[:, 0].str.contains('Net income', case=False, na=False)]\n",
        "\n",
        "\n",
        "print(\"Year Row:\", year_row2)\n",
        "print(\"Net Income Row:\", net_income_row2)\n",
        "\n",
        "import re\n",
        "import pandas as pd\n",
        "\n",
        "if not year_row2.empty and not net_income_row2.empty:\n",
        "    years = year_row2.iloc[0, 1:].values\n",
        "    net_income = net_income_row2.iloc[0, 1:].values\n",
        "\n",
        "    # Clean the extracted data\n",
        "    years_cleaned2 = pd.to_numeric([re.sub(r'[^\\d.-]', '', str(val)) for val in years], errors='coerce')\n",
        "    net_income_cleaned2 = pd.to_numeric([re.sub(r'[^\\d.-]', '', str(val)) for val in net_income], errors='coerce')\n",
        "\n",
        "    # Create DataFrame\n",
        "    net_income_df_2 = pd.DataFrame({\n",
        "        'Year': years_cleaned2,\n",
        "        'Net Income': net_income_cleaned2\n",
        "    })\n",
        "\n",
        "\n",
        "    print(net_income_df_2)\n",
        "else:\n",
        "    print(\"Year or Net Income rows are missing.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z19lxTh_4Ow6",
        "outputId": "6f035876-909e-4185-912b-ea468f085508"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracted Years: ['2022' '2021' '2020']\n",
            "Extracted Net Income: ['$\\t\\xa0\\xa072,738' '$\\t\\xa0\\xa061,271' '$\\t\\xa0\\xa044,281']\n",
            "Year Row: 0        (In millions)                  \n",
            "3  Year Ended June 30,  2022  2021  2020\n",
            "Net Income Row: 0 (In millions)                                       \n",
            "5    Net income  $\\t  72,738  $\\t  61,271  $\\t  44,281\n",
            "   Year  Net Income\n",
            "0  2022       72738\n",
            "1  2021       61271\n",
            "2  2020       44281\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# two DataFrames\n",
        "net_income_df_2 = pd.DataFrame({\n",
        "    'Year': years_cleaned2,\n",
        "    'Net Income': net_income_cleaned2\n",
        "})\n",
        "\n",
        "net_income_df_1 = pd.DataFrame({\n",
        "    'Year': years_cleaned1,\n",
        "    'Net Income': net_income_cleaned1\n",
        "})\n",
        "\n",
        "# Combine the DataFrames\n",
        "combined_df = pd.concat([net_income_df_2, net_income_df_1], ignore_index=True)\n",
        "df_drop = combined_df.drop_duplicates()\n",
        "# Print the combined DataFrame after drop\n",
        "print(df_drop)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vr8oCazw4SwW",
        "outputId": "4951e838-d879-40c6-9d4a-3912d3bd1766"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year  Net Income\n",
            "0  2022       72738\n",
            "1  2021       61271\n",
            "2  2020       44281\n",
            "5  2019       39240\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "df_drop = df_drop.sort_values(by='Year')\n",
        "\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_drop['Year'], df_drop['Net Income'], marker='o', linestyle='-', color='b')\n",
        "\n",
        "\n",
        "for i, row in df_drop.iterrows():\n",
        "    plt.annotate(f\"{row['Net Income']}\", (row['Year'], row['Net Income']), textcoords=\"offset points\", xytext=(0,5), ha='center')\n",
        "\n",
        "plt.title('Net Income Over Years')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Net Income')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "aRXZ0b-L4YVH",
        "outputId": "34cf516e-1062-49b7-d476-00c9ac12deea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from docx import Document\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "doc_path = '/content/drive/MyDrive/Thesis/2023_Annual_Report.docx'\n",
        "doc = Document(doc_path)\n",
        "\n",
        "\n",
        "full_text = []\n",
        "for para in doc.paragraphs:\n",
        "    full_text.append(para.text)\n",
        "\n",
        "\n",
        "full_text_str = \"\\n\".join(full_text)\n",
        "print(full_text_str[:2000])\n",
        "\n",
        "\n",
        "tables = doc.tables\n",
        "\n",
        "\n",
        "tables_data = []\n",
        "\n",
        "\n",
        "for i, table in enumerate(tables):\n",
        "    data = []\n",
        "    for row in table.rows:\n",
        "        data.append([cell.text.strip() for cell in row.cells])\n",
        "\n",
        "\n",
        "    df_3 = pd.DataFrame(data)\n",
        "    tables_data.append(df_3)\n",
        "\n",
        "\n",
        "    print(f\"Table {i + 1}:\")\n",
        "    print(df_3.head(), \"\\n\")\n",
        "\n",
        "def clean_table(df_3):\n",
        "\n",
        "    df_3.dropna(how='all', axis=0, inplace=True)\n",
        "    df_3.dropna(how='all', axis=1, inplace=True)\n",
        "\n",
        "\n",
        "    df_3.reset_index(drop=True, inplace=True)\n",
        "\n",
        "\n",
        "    if len(df_3) > 1:\n",
        "        df_3.columns = df_3.iloc[0]\n",
        "        df_3 = df_3[1:]\n",
        "\n",
        "\n",
        "    df_3 = df_3.apply(pd.to_numeric, errors='ignore')\n",
        "\n",
        "    return df_3\n",
        "\n",
        "\n",
        "cleaned_tables = [clean_table(df_3) for df_3 in tables_data]\n",
        "\n",
        "\n",
        "for i, df_3 in enumerate(cleaned_tables):\n",
        "    print(f\"Cleaned Table {i + 1} with shape {df_3.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YmUomMKKBuwN",
        "outputId": "9f71818a-6d2e-440c-d7b9-bda5cbaf87ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform productivity for every individual, organization, and industry on earth, and help us address some of our most pressing challenges. \n",
            "This next generation of AI will reshape every software category and every business, including our own. Forty-eight years after its founding, Microsoft remains a consequential company because time and time again—from PC/Server, to Web/Internet, to Cloud/Mobile—we have adapted to technological paradigm shifts. Today, we are doing so once again, as we lead this new era. \n",
            "Amid this transformation, our mission to empower every person and every organization on the planet to achieve more remains constant. As a company, we believe we can be the democratizing force for this new generation of technology and the opportunity it will help unlock for every country, community, and individual, while mitigating its risks. \n",
            "Here are just a few examples of how we are already doing this: \n",
            "•\tLeading electronic health records vendor Epic is addressing some of the biggest challenges facing the healthcare industry today—including physician burnout—by deploying a wide range of copilot solutions built on Azure OpenAI Service and Dragon Ambient eXperience Copilot. \n",
            "•\tMercado Libre is reducing the time its developers spend writing code by more than 50 percent with GitHub Copilot, as the company works to democratize e-commerce across Latin America. \n",
            "•\tMercedes-Benz is making its in-car voice assistant more intuitive for hundreds of thousands of drivers using ChatGPT via the Azure OpenAI Service. \n",
            "•\tLumen Technologies is helping its employees be more productive, enabling them to focus on higher value-added activities, by deploying Microsoft 365 Copilot. \n",
            "•\tNonprofit The C\n",
            "Table 1:\n",
            "                     0       1       2       3       4       5       6\n",
            "0        (In millions)  Shares  Amount  Shares  Amount  Shares  Amount\n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Year Ended June 30,    2023    2023    2022    2022    2021    2021\n",
            "4                                                                      \n",
            "\n",
            "Table 2:\n",
            "                  0            1             2                    3  \\\n",
            "0  Declaration Date  Record Date  Payment Date  Dividend\\nPer Share   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Fiscal Year 2023                                                   \n",
            "4                                                                     \n",
            "\n",
            "               4  \n",
            "0         Amount  \n",
            "1                 \n",
            "2                 \n",
            "3  (In millions)  \n",
            "4                  \n",
            "\n",
            "Table 3:\n",
            "                       0           1           2           3           4  \\\n",
            "0                               6/18        6/19        6/20        6/21   \n",
            "1                                                                          \n",
            "2  Microsoft Corporation  $\\t 100.00  $\\t 138.07  $\\t 212.34  $\\t 285.40   \n",
            "3                S&P 500      100.00      110.42      118.70      167.13   \n",
            "4        NASDAQ Computer      100.00      106.10      156.93      236.08   \n",
            "\n",
            "            5           6  \n",
            "0        6/22        6/23  \n",
            "1                          \n",
            "2  $\\t 272.82  $\\t 365.24  \n",
            "3      149.39      178.66  \n",
            "4      184.53      242.82   \n",
            "\n",
            "Table 4:\n",
            "                                             0  \\\n",
            "0  Commercial remaining performance obligation   \n",
            "1                                                \n",
            "2                      Microsoft Cloud revenue   \n",
            "3                                                \n",
            "4      Microsoft Cloud gross margin percentage   \n",
            "\n",
            "                                                   1  \n",
            "0  Commercial portion of revenue allocated to rem...  \n",
            "1                                                     \n",
            "2  Revenue from Azure and other cloud services, O...  \n",
            "3                                                     \n",
            "4  Gross margin percentage for our Microsoft Clou...   \n",
            "\n",
            "Table 5:\n",
            "                                                   0  \\\n",
            "0  Office Commercial products and cloud services ...   \n",
            "1                                                      \n",
            "2  Office Consumer products and cloud services re...   \n",
            "3                                                      \n",
            "4                  Office 365 Commercial seat growth   \n",
            "\n",
            "                                                   1  \n",
            "0  Revenue from Office Commercial products and cl...  \n",
            "1                                                     \n",
            "2  Revenue from Office Consumer products and clou...  \n",
            "3                                                     \n",
            "4  The number of Office 365 Commercial seats at e...   \n",
            "\n",
            "Table 6:\n",
            "                                                   0  \\\n",
            "0                         Windows OEM revenue growth   \n",
            "1                                                      \n",
            "2  Windows Commercial products and cloud services...   \n",
            "3                                                      \n",
            "4                             Devices revenue growth   \n",
            "\n",
            "                                                   1  \n",
            "0  Revenue from sales of Windows Pro and non-Pro ...  \n",
            "1                                                     \n",
            "2  Revenue from Windows Commercial products and c...  \n",
            "3                                                     \n",
            "4  Revenue from Devices, including Surface, HoloL...   \n",
            "\n",
            "Table 7:\n",
            "                                                   0            1  \\\n",
            "0  (In millions, except percentages and per share...         2023   \n",
            "1                                                                   \n",
            "2                                                                   \n",
            "3                                            Revenue  $\\t 211,915   \n",
            "4                                       Gross margin      146,052   \n",
            "\n",
            "             2                   3  \n",
            "0         2022  Percentage\\nChange  \n",
            "1                                   \n",
            "2                                   \n",
            "3  $\\t 198,270                  7%  \n",
            "4      135,620                  8%   \n",
            "\n",
            "Table 8:\n",
            "                                   0     1     2                   3\n",
            "0  (In millions, except percentages)  2023  2022  Percentage\\nChange\n",
            "1                                                                   \n",
            "2                                                                   \n",
            "3                            Revenue                                \n",
            "4                                                                    \n",
            "\n",
            "Table 9:\n",
            "                                   0            1            2  \\\n",
            "0  (In millions, except percentages)         2023         2022   \n",
            "1                                                                \n",
            "2                                                                \n",
            "3           Research and development  $\\t  27,195  $\\t  24,512   \n",
            "4            As a percent of revenue          13%          12%   \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                      \n",
            "3                 11%  \n",
            "4                1ppt   \n",
            "\n",
            "Table 10:\n",
            "                                   0            1            2  \\\n",
            "0  (In millions, except percentages)         2023         2022   \n",
            "1                                                                \n",
            "2                                                                \n",
            "3                Sales and marketing  $\\t  22,759  $\\t  21,825   \n",
            "4            As a percent of revenue          11%          11%   \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                      \n",
            "3                  4%  \n",
            "4                0ppt   \n",
            "\n",
            "Table 11:\n",
            "                                   0           1           2  \\\n",
            "0  (In millions, except percentages)        2023        2022   \n",
            "1                                                              \n",
            "2                                                              \n",
            "3         General and administrative  $\\t  7,575  $\\t  5,900   \n",
            "4            As a percent of revenue          4%          3%   \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                      \n",
            "3                 28%  \n",
            "4                1ppt   \n",
            "\n",
            "Table 12:\n",
            "                     0     1     2\n",
            "0        (In millions)            \n",
            "1                                 \n",
            "2                                 \n",
            "3  Year Ended June 30,  2023  2022\n",
            "4                                  \n",
            "\n",
            "Table 13:\n",
            "                                                   0           1           2  \\\n",
            "0  (In millions, except percentages and per share...        2023        2022   \n",
            "1                                                                              \n",
            "2                                       Gross margin  $\\t146,052  $\\t135,620   \n",
            "3  Severance, hardware-related impairment, and le...         152           0   \n",
            "4                                                                              \n",
            "\n",
            "                    3  \n",
            "0  Percentage\\nChange  \n",
            "1                      \n",
            "2                  8%  \n",
            "3                   *  \n",
            "4                       \n",
            "\n",
            "Table 14:\n",
            "                     0 1\n",
            "0        (In millions)  \n",
            "1                       \n",
            "2                       \n",
            "3  Three Months Ending  \n",
            "4                        \n",
            "\n",
            "Table 15:\n",
            "                     0         1           2          3\n",
            "0        (In millions)      2024  Thereafter      Total\n",
            "1                                                      \n",
            "2                                                      \n",
            "3  Long-term debt: (a)                                 \n",
            "4   Principal payments  $\\t5,250   $\\t47,616  $\\t52,866 \n",
            "\n",
            "Table 16:\n",
            "                 0                    1               2       3\n",
            "0    (In millions)                                             \n",
            "1                                                              \n",
            "2                                                              \n",
            "3  Risk Categories  Hypothetical Change  June 30,\\n2023  Impact\n",
            "4                                                               \n",
            "\n",
            "Table 17:\n",
            "                                         0     1     2     3\n",
            "0  (In millions, except per share amounts)                  \n",
            "1                                                           \n",
            "2                                                           \n",
            "3                      Year Ended June 30,  2023  2022  2021\n",
            "4                                                            \n",
            "\n",
            "Table 18:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 19:\n",
            "               0     1     2\n",
            "0  (In millions)            \n",
            "1                           \n",
            "2                           \n",
            "3       June 30,  2023  2022\n",
            "4                            \n",
            "\n",
            "Table 20:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 21:\n",
            "                                         0     1     2     3\n",
            "0  (In millions, except per share amounts)                  \n",
            "1                                                           \n",
            "2                                                           \n",
            "3                      Year Ended June 30,  2023  2022  2021\n",
            "4                                                            \n",
            "\n",
            "Table 22:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 23:\n",
            "               0     1     2     3\n",
            "0  (In millions)                  \n",
            "1                                 \n",
            "2                                 \n",
            "3       June 30,  2023  2022  2021\n",
            "4                                  \n",
            "\n",
            "Table 24:\n",
            "                                          0     1     2     3\n",
            "0  (In millions, except earnings per share)                  \n",
            "1                                                            \n",
            "2                                                            \n",
            "3                       Year Ended June 30,  2023  2022  2021\n",
            "4                                                             \n",
            "\n",
            "Table 25:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 26:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 27:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 28:\n",
            "               0                  1                     2                  3  \\\n",
            "0  (In millions)  Fair Value\\nLevel  Adjusted\\nCost Basis  Unrealized\\nGains   \n",
            "1                                                                              \n",
            "2                                                                              \n",
            "3  June 30, 2023                                                               \n",
            "4                                                                              \n",
            "\n",
            "                    4                5                            6  \\\n",
            "0  Unrealized\\nLosses  Recorded\\nBasis  Cash and\\nCash\\nEquivalents   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4                                                                     \n",
            "\n",
            "                         7                    8  \n",
            "0  Short-term\\nInvestments  Equity\\nInvestments  \n",
            "1                                                \n",
            "2                                                \n",
            "3                                                \n",
            "4                                                 \n",
            "\n",
            "Table 29:\n",
            "               0                  1                     2                  3  \\\n",
            "0  (In millions)  Fair Value\\nLevel  Adjusted\\nCost Basis  Unrealized\\nGains   \n",
            "1                                                                              \n",
            "2                                                                              \n",
            "3  June 30, 2022                                                               \n",
            "4                                                                              \n",
            "\n",
            "                    4                5                            6  \\\n",
            "0  Unrealized\\nLosses  Recorded\\nBasis  Cash and\\nCash\\nEquivalents   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3                                                                     \n",
            "4                                                                     \n",
            "\n",
            "                         7                    8  \n",
            "0  Short-term\\nInvestments  Equity\\nInvestments  \n",
            "1                                                \n",
            "2                                                \n",
            "3                                                \n",
            "4                                                 \n",
            "\n",
            "Table 30:\n",
            "               0                    1                    2  \\\n",
            "0                 Less than 12 Months  Less than 12 Months   \n",
            "1                                                            \n",
            "2  (In millions)           Fair Value   Unrealized\\nLosses   \n",
            "3                                                            \n",
            "4                                                            \n",
            "\n",
            "                      3                     4                  5  \\\n",
            "0  12 Months or Greater  12 Months or Greater                      \n",
            "1                                                                  \n",
            "2            Fair Value    Unrealized\\nLosses  Total\\nFair Value   \n",
            "3                                                                  \n",
            "4                                                                  \n",
            "\n",
            "                           6  \n",
            "0  Total\\nUnrealized\\nLosses  \n",
            "1  Total\\nUnrealized\\nLosses  \n",
            "2  Total\\nUnrealized\\nLosses  \n",
            "3                             \n",
            "4                              \n",
            "\n",
            "Table 31:\n",
            "               0                     1                      2\n",
            "0  (In millions)  Adjusted\\nCost Basis  Estimated\\nFair Value\n",
            "1                                                            \n",
            "2                                                            \n",
            "3  June 30, 2023                                             \n",
            "4                                                             \n",
            "\n",
            "Table 32:\n",
            "                                   0               1               2\n",
            "0                      (In millions)  June 30,\\n2023  June 30,\\n2022\n",
            "1                                                                   \n",
            "2                                                                   \n",
            "3  Designated as Hedging Instruments                                \n",
            "4                                                                    \n",
            "\n",
            "Table 33:\n",
            "               0                   1                        2  \\\n",
            "0  (In millions)  Derivative\\nAssets  Derivative\\nLiabilities   \n",
            "1                                                               \n",
            "2                                                               \n",
            "3                     June 30,\\n2023           June 30,\\n2023   \n",
            "4                                                               \n",
            "\n",
            "                    3                        4  \n",
            "0  Derivative\\nAssets  Derivative\\nLiabilities  \n",
            "1                                               \n",
            "2                                               \n",
            "3      June 30,\\n2022           June 30,\\n2022  \n",
            "4                                                \n",
            "\n",
            "Table 34:\n",
            "               0        1        2        3      4\n",
            "0  (In millions)  Level 1  Level 2  Level 3  Total\n",
            "1                                                 \n",
            "2                                                 \n",
            "3  June 30, 2023                                  \n",
            "4                                                  \n",
            "\n",
            "Table 35:\n",
            "                     0              1              2              3\n",
            "0        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "1                                                                  \n",
            "2                                                                  \n",
            "3  Year Ended June 30,           2023           2022           2021\n",
            "4                                                                   \n",
            "\n",
            "Table 36:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 37:\n",
            "               0              1              2\n",
            "0  (In millions)  (In millions)  (In millions)\n",
            "1                                             \n",
            "2                                             \n",
            "3       June 30,           2023           2022\n",
            "4                                              \n",
            "\n",
            "Table 38:\n",
            "               0              1              2\n",
            "0  (In millions)  (In millions)  (In millions)\n",
            "1                                             \n",
            "2                                             \n",
            "3       June 30,           2023           2022\n",
            "4                                              \n",
            "\n",
            "Table 39:\n",
            "                   0          1\n",
            "0      (In millions)           \n",
            "1                              \n",
            "2       Goodwill (a)  $\\t16,326\n",
            "3  Intangible assets      4,365\n",
            "4       Other assets         42 \n",
            "\n",
            "Table 40:\n",
            "                                    0             1                       2\n",
            "0  (In millions, except average life)        Amount  Weighted\\nAverage Life\n",
            "1                                                                          \n",
            "2                                                                          \n",
            "3                    Customer-related  $\\t    2,610                 9 years\n",
            "4                    Technology-based         1,540                 5 years \n",
            "\n",
            "Table 41:\n",
            "                           0       1\n",
            "0              (In millions)        \n",
            "1                                   \n",
            "2  Cash and cash equivalents  $\\t766\n",
            "3                   Goodwill   5,510\n",
            "4          Intangible assets   1,968 \n",
            "\n",
            "Table 42:\n",
            "                                    0         1                       2\n",
            "0  (In millions, except average life)    Amount  Weighted\\nAverage Life\n",
            "1                                                                      \n",
            "2                                                                      \n",
            "3                    Technology-based  $\\t1,341                 4 years\n",
            "4                   Marketing-related       627                11 years \n",
            "\n",
            "Table 43:\n",
            "                                     0               1             2  \\\n",
            "0                        (In millions)  June 30,\\n2021  Acquisitions   \n",
            "1                                                                      \n",
            "2  Productivity and Business Processes       $\\t24,317        $\\t599   \n",
            "3                    Intelligent Cloud          13,256        16,879   \n",
            "4              More Personal Computing          12,138           648   \n",
            "\n",
            "          3               4             5          6               7  \n",
            "0     Other  June 30,\\n2022  Acquisitions      Other  June 30,\\n2023  \n",
            "1                                                                     \n",
            "2  $\\t(105)       $\\t24,811         $\\t11  $\\t(47\\t)       $\\t24,775  \n",
            "3        47          30,182           223         64          30,469  \n",
            "4   (255\\t)          12,531             0        111          12,642   \n",
            "\n",
            "Table 44:\n",
            "               0                        1                          2  \\\n",
            "0  (In millions)  Gross\\nCarrying\\nAmount  Accumulated\\nAmortization   \n",
            "1                                                                      \n",
            "2                                                                      \n",
            "3       June 30,                     2023                       2023   \n",
            "4                                                                      \n",
            "\n",
            "                       3                        4                          5  \\\n",
            "0  Net\\nCarrying\\nAmount  Gross\\nCarrying\\nAmount  Accumulated\\nAmortization   \n",
            "1                                                                              \n",
            "2                                                                              \n",
            "3                   2023                     2022                       2022   \n",
            "4                                                                              \n",
            "\n",
            "                       6  \n",
            "0  Net\\nCarrying\\nAmount  \n",
            "1                         \n",
            "2                         \n",
            "3                   2022  \n",
            "4                          \n",
            "\n",
            "Table 45:\n",
            "                     0       1                       2       3  \\\n",
            "0        (In millions)  Amount  Weighted\\nAverage Life  Amount   \n",
            "1                                                                \n",
            "2                                                                \n",
            "3  Year Ended June 30,    2023                            2022   \n",
            "4                                                                \n",
            "\n",
            "                        4  \n",
            "0  Weighted\\nAverage Life  \n",
            "1                          \n",
            "2                          \n",
            "3                          \n",
            "4                           \n",
            "\n",
            "Table 46:\n",
            "                      0 1\n",
            "0         (In millions)  \n",
            "1                        \n",
            "2                        \n",
            "3  Year Ending June 30,  \n",
            "4                         \n",
            "\n",
            "Table 47:\n",
            "                                          0                            1  \\\n",
            "0  (In millions, issuance by calendar year)  Maturities\\n(calendar year)   \n",
            "1                                                                          \n",
            "2                                                                          \n",
            "3             2009 issuance of $3.8 billion                         2039   \n",
            "4             2010 issuance of $4.8 billion                         2040   \n",
            "\n",
            "                       2                          3               4  \\\n",
            "0  Stated Interest\\nRate  Effective\\nInterest\\nRate  June 30,\\n2023   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3                  5.20%                      5.24%          $\\t520   \n",
            "4                  4.50%                      4.57%             486   \n",
            "\n",
            "                5  \n",
            "0  June 30,\\n2022  \n",
            "1                  \n",
            "2                  \n",
            "3          $\\t520  \n",
            "4             486   \n",
            "\n",
            "Table 48:\n",
            "                      0 1\n",
            "0         (In millions)  \n",
            "1                        \n",
            "2                        \n",
            "3  Year Ending June 30,  \n",
            "4                         \n",
            "\n",
            "Table 49:\n",
            "                     0              1              2              3\n",
            "0        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "1                                                                  \n",
            "2                                                                  \n",
            "3  Year Ended June 30,           2023           2022           2021\n",
            "4                                                                   \n",
            "\n",
            "Table 50:\n",
            "                     0              1              2              3\n",
            "0        (In millions)  (In millions)  (In millions)  (In millions)\n",
            "1                                                                  \n",
            "2                                                                  \n",
            "3  Year Ended June 30,           2023           2022           2021\n",
            "4                                                                   \n",
            "\n",
            "Table 51:\n",
            "                        0      1      2      3\n",
            "0                                             \n",
            "1     Year Ended June 30,   2023   2022   2021\n",
            "2                                             \n",
            "3  Federal statutory rate  21.0%  21.0%  21.0%\n",
            "4              Effect of:                      \n",
            "\n",
            "Table 52:\n",
            "               0     1     2\n",
            "0  (In millions)            \n",
            "1                           \n",
            "2                           \n",
            "3       June 30,  2023  2022\n",
            "4                            \n",
            "\n",
            "Table 53:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 54:\n",
            "               0     1     2\n",
            "0  (In millions)            \n",
            "1                           \n",
            "2                           \n",
            "3       June 30,  2023  2022\n",
            "4                            \n",
            "\n",
            "Table 55:\n",
            "                          0 1\n",
            "0             (In millions)  \n",
            "1                            \n",
            "2                            \n",
            "3  Year Ended June 30, 2023  \n",
            "4                             \n",
            "\n",
            "Table 56:\n",
            "                     0              1              2     3\n",
            "0        (In millions)  (In millions)  (In millions)      \n",
            "1                                                         \n",
            "2                                                         \n",
            "3  Year Ended June 30,           2023           2022  2021\n",
            "4                                                          \n",
            "\n",
            "Table 57:\n",
            "                     0              1              2     3\n",
            "0        (In millions)  (In millions)  (In millions)      \n",
            "1                                                         \n",
            "2                                                         \n",
            "3  Year Ended June 30,           2023           2022  2021\n",
            "4                                                          \n",
            "\n",
            "Table 58:\n",
            "                                                   0     1     2\n",
            "0  (In millions, except lease term and discount r...            \n",
            "1                                                               \n",
            "2                                                               \n",
            "3                                           June 30,  2023  2022\n",
            "4                                                                \n",
            "\n",
            "Table 59:\n",
            "                      0                  1                2\n",
            "0         (In millions)                                    \n",
            "1                                                          \n",
            "2                                                          \n",
            "3  Year Ending June 30,  Operating\\nLeases  Finance\\nLeases\n",
            "4                                                           \n",
            "\n",
            "Table 60:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 61:\n",
            "                     0       1       2       3       4       5       6\n",
            "0        (In millions)  Shares  Amount  Shares  Amount  Shares  Amount\n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Year Ended June 30,    2023    2023    2022    2022    2021    2021\n",
            "4                                                                      \n",
            "\n",
            "Table 62:\n",
            "                  0            1             2                    3  \\\n",
            "0  Declaration Date  Record Date  Payment Date  Dividend\\nPer Share   \n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3  Fiscal Year 2023                                                   \n",
            "4                                                                     \n",
            "\n",
            "               4  \n",
            "0         Amount  \n",
            "1                 \n",
            "2                 \n",
            "3  (In millions)  \n",
            "4                  \n",
            "\n",
            "Table 63:\n",
            "                     0              1              2     3\n",
            "0        (In millions)  (In millions)  (In millions)      \n",
            "1                                                         \n",
            "2                                                         \n",
            "3  Year Ended June 30,           2023           2022  2021\n",
            "4                                                          \n",
            "\n",
            "Table 64:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 65:\n",
            "                                         0                 1  \\\n",
            "0                                                              \n",
            "1                      Year ended June 30,              2023   \n",
            "2                                                              \n",
            "3  Dividends per share (quarterly amounts)  $\\t 0.62 –  0.68   \n",
            "4                           Interest rates       2.0% – 5.4%   \n",
            "\n",
            "                  2                 3  \n",
            "0                                      \n",
            "1              2022              2021  \n",
            "2                                      \n",
            "3  $\\t 0.56 –  0.62  $\\t 0.51 –  0.56  \n",
            "4      0.03% – 3.6%      0.01% – 1.5%   \n",
            "\n",
            "Table 66:\n",
            "               0              1                                        2\n",
            "0         Shares         Shares  Weighted Average\\nGrant-Date Fair Value\n",
            "1                                                                       \n",
            "2                                                                       \n",
            "3  (In millions)  (In millions)                                         \n",
            "4                                                                        \n",
            "\n",
            "Table 67:\n",
            "                      0     1     2     3\n",
            "0  (Shares in millions)                  \n",
            "1                                        \n",
            "2                                        \n",
            "3   Year Ended June 30,  2023  2022  2021\n",
            "4                                         \n",
            "\n",
            "Table 68:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 69:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 70:\n",
            "                     0     1     2     3\n",
            "0        (In millions)                  \n",
            "1                                       \n",
            "2                                       \n",
            "3  Year Ended June 30,  2023  2022  2021\n",
            "4                                        \n",
            "\n",
            "Table 71:\n",
            "               0     1     2     3\n",
            "0  (In millions)                  \n",
            "1                                 \n",
            "2                                 \n",
            "3       June 30,  2023  2022  2021\n",
            "4                                  \n",
            "\n",
            "Table 72:\n",
            "                           0 1\n",
            "0  /S/ DELOITTE & TOUCHE LLP  \n",
            "1                             \n",
            "2        Seattle, Washington  \n",
            "3              July 27, 2023   \n",
            "\n",
            "Table 73:\n",
            "                                                   0  \\\n",
            "0  Satya Nadella\\nChairman and Chief Executive Of...   \n",
            "1                                                      \n",
            "2      Reid G. Hoffman 4\\nPartner, Greylock Partners   \n",
            "3                                                      \n",
            "4  Hugh F. Johnston 1\\nVice Chairman and Executiv...   \n",
            "\n",
            "                                                   1  \\\n",
            "0  Sandra E. Peterson 2,3\\nLead Independent Direc...   \n",
            "1                                                      \n",
            "2  Penny S. Pritzker 4\\nFounder and Chairman, PSP...   \n",
            "3                                                      \n",
            "4  Carlos A. Rodriguez 1,2\\nExecutive Chair, ADP,...   \n",
            "\n",
            "                                                   2  \n",
            "0  John W. Stanton 1,4\\nFounder and Chairman, Tri...  \n",
            "1                                                     \n",
            "2  John W. Thompson 3,4\\nPartner, Lightspeed Vent...  \n",
            "3                                                     \n",
            "4  Emma N. Walmsley 2,4\\nChief Executive Officer,...   \n",
            "\n",
            "Table 74:\n",
            "                                                   0  \\\n",
            "0  Satya Nadella\\nChairman and Chief Executive Of...   \n",
            "1                                                      \n",
            "2  Judson B. Althoff\\nExecutive Vice President an...   \n",
            "3                                                      \n",
            "4  Christopher C. Capossela\\nExecutive Vice Presi...   \n",
            "\n",
            "                                                   1  \n",
            "0  Amy E. Hood\\nExecutive Vice President and Chie...  \n",
            "1                                                     \n",
            "2        Bradford L. Smith\\nVice Chair and President  \n",
            "3                                                     \n",
            "4  Christopher D. Young\\nExecutive Vice President...   \n",
            "\n",
            "Cleaned Table 1 with shape (11, 7)\n",
            "Cleaned Table 2 with shape (22, 5)\n",
            "Cleaned Table 3 with shape (4, 7)\n",
            "Cleaned Table 4 with shape (4, 2)\n",
            "Cleaned Table 5 with shape (12, 2)\n",
            "Cleaned Table 6 with shape (7, 2)\n",
            "Cleaned Table 7 with shape (13, 4)\n",
            "Cleaned Table 8 with shape (19, 4)\n",
            "Cleaned Table 9 with shape (5, 4)\n",
            "Cleaned Table 10 with shape (5, 4)\n",
            "Cleaned Table 11 with shape (5, 4)\n",
            "Cleaned Table 12 with shape (13, 3)\n",
            "Cleaned Table 13 with shape (26, 4)\n",
            "Cleaned Table 14 with shape (12, 2)\n",
            "Cleaned Table 15 with shape (11, 4)\n",
            "Cleaned Table 16 with shape (10, 4)\n",
            "Cleaned Table 17 with shape (38, 4)\n",
            "Cleaned Table 18 with shape (16, 4)\n",
            "Cleaned Table 19 with shape (53, 3)\n",
            "Cleaned Table 20 with shape (51, 4)\n",
            "Cleaned Table 21 with shape (34, 4)\n",
            "Cleaned Table 22 with shape (10, 4)\n",
            "Cleaned Table 23 with shape (9, 4)\n",
            "Cleaned Table 24 with shape (18, 4)\n",
            "Cleaned Table 25 with shape (13, 4)\n",
            "Cleaned Table 26 with shape (10, 4)\n",
            "Cleaned Table 27 with shape (10, 4)\n",
            "Cleaned Table 28 with shape (32, 9)\n",
            "Cleaned Table 29 with shape (32, 9)\n",
            "Cleaned Table 30 with shape (30, 7)\n",
            "Cleaned Table 31 with shape (11, 3)\n",
            "Cleaned Table 32 with shape (16, 3)\n",
            "Cleaned Table 33 with shape (32, 5)\n",
            "Cleaned Table 34 with shape (12, 5)\n",
            "Cleaned Table 35 with shape (25, 4)\n",
            "Cleaned Table 36 with shape (9, 4)\n",
            "Cleaned Table 37 with shape (10, 3)\n",
            "Cleaned Table 38 with shape (15, 3)\n",
            "Cleaned Table 39 with shape (8, 2)\n",
            "Cleaned Table 40 with shape (8, 3)\n",
            "Cleaned Table 41 with shape (9, 2)\n",
            "Cleaned Table 42 with shape (7, 3)\n",
            "Cleaned Table 43 with shape (7, 8)\n",
            "Cleaned Table 44 with shape (11, 7)\n",
            "Cleaned Table 45 with shape (11, 5)\n",
            "Cleaned Table 46 with shape (13, 2)\n",
            "Cleaned Table 47 with shape (24, 6)\n",
            "Cleaned Table 48 with shape (13, 2)\n",
            "Cleaned Table 49 with shape (22, 4)\n",
            "Cleaned Table 50 with shape (9, 4)\n",
            "Cleaned Table 51 with shape (15, 4)\n",
            "Cleaned Table 52 with shape (42, 3)\n",
            "Cleaned Table 53 with shape (13, 4)\n",
            "Cleaned Table 54 with shape (10, 3)\n",
            "Cleaned Table 55 with shape (10, 2)\n",
            "Cleaned Table 56 with shape (12, 4)\n",
            "Cleaned Table 57 with shape (13, 4)\n",
            "Cleaned Table 58 with shape (37, 3)\n",
            "Cleaned Table 59 with shape (16, 3)\n",
            "Cleaned Table 60 with shape (10, 4)\n",
            "Cleaned Table 61 with shape (11, 7)\n",
            "Cleaned Table 62 with shape (22, 5)\n",
            "Cleaned Table 63 with shape (42, 4)\n",
            "Cleaned Table 64 with shape (7, 4)\n",
            "Cleaned Table 65 with shape (5, 4)\n",
            "Cleaned Table 66 with shape (13, 3)\n",
            "Cleaned Table 67 with shape (7, 4)\n",
            "Cleaned Table 68 with shape (21, 4)\n",
            "Cleaned Table 69 with shape (9, 4)\n",
            "Cleaned Table 70 with shape (17, 4)\n",
            "Cleaned Table 71 with shape (10, 4)\n",
            "Cleaned Table 72 with shape (3, 2)\n",
            "Cleaned Table 73 with shape (6, 3)\n",
            "Cleaned Table 74 with shape (6, 2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i, df_3 in enumerate(cleaned_tables):\n",
        "    df_3.to_csv(f'tabledf3_{i + 1}.csv', index=False)\n",
        "\n",
        "\n",
        "example_table = cleaned_tables[16]\n",
        "print(example_table.head())\n",
        "\n",
        "\n",
        "sixteenth_table23 = cleaned_tables[16]\n",
        "print(sixteenth_table23)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pBovkFzY43rk",
        "outputId": "96e9c525-d077-44ed-a29c-64a886169cdb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0 (In millions, except per share amounts)                  \n",
            "1                                                          \n",
            "2                                                          \n",
            "3                     Year Ended June 30,  2023  2022  2021\n",
            "4                                                          \n",
            "5                                Revenue:                  \n",
            "0  (In millions, except per share amounts)                           \\\n",
            "1                                                                     \n",
            "2                                                                     \n",
            "3                      Year Ended June 30,         2023        2022   \n",
            "4                                                                     \n",
            "5                                 Revenue:                            \n",
            "6                                  Product  $\\t  64,699  $\\t 72,732   \n",
            "7                        Service and other      147,216     125,538   \n",
            "8                                                                     \n",
            "9                            Total revenue      211,915     198,270   \n",
            "10                                                                    \n",
            "11                        Cost of revenue:                            \n",
            "12                                 Product       17,804      19,064   \n",
            "13                       Service and other       48,059      43,586   \n",
            "14                                                                    \n",
            "15                   Total cost of revenue       65,863      62,650   \n",
            "16                                                                    \n",
            "17                            Gross margin      146,052     135,620   \n",
            "18                Research and development       27,195      24,512   \n",
            "19                     Sales and marketing       22,759      21,825   \n",
            "20              General and administrative        7,575       5,900   \n",
            "21                                                                    \n",
            "22                        Operating income       88,523      83,383   \n",
            "23                       Other income, net          788         333   \n",
            "24                                                                    \n",
            "25              Income before income taxes       89,311      83,716   \n",
            "26              Provision for income taxes       16,950      10,978   \n",
            "27                                                                    \n",
            "28                              Net income    $\\t72,361   $\\t72,738   \n",
            "29                                                                    \n",
            "30                                                                    \n",
            "31                     Earnings per share:                            \n",
            "32                                   Basic      $\\t9.72     $\\t9.70   \n",
            "33                                 Diluted      $\\t9.68     $\\t9.65   \n",
            "34                                                                    \n",
            "35    Weighted average shares outstanding:                            \n",
            "36                                   Basic        7,446       7,496   \n",
            "37                                 Diluted        7,472       7,540   \n",
            "38                                                                    \n",
            "\n",
            "0                \n",
            "1                \n",
            "2                \n",
            "3          2021  \n",
            "4                \n",
            "5                \n",
            "6   $\\t  71,074  \n",
            "7        97,014  \n",
            "8                \n",
            "9       168,088  \n",
            "10               \n",
            "11               \n",
            "12       18,219  \n",
            "13       34,013  \n",
            "14               \n",
            "15       52,232  \n",
            "16               \n",
            "17      115,856  \n",
            "18       20,716  \n",
            "19       20,117  \n",
            "20        5,107  \n",
            "21               \n",
            "22       69,916  \n",
            "23        1,186  \n",
            "24               \n",
            "25       71,102  \n",
            "26        9,831  \n",
            "27               \n",
            "28    $\\t61,271  \n",
            "29               \n",
            "30               \n",
            "31               \n",
            "32      $\\t8.12  \n",
            "33      $\\t8.05  \n",
            "34               \n",
            "35               \n",
            "36        7,547  \n",
            "37        7,608  \n",
            "38               \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Row 3 (Expected Year Row):\", sixteenth_table23.iloc[2])\n",
        "print(\"Row 5 (Expected Net Income Row):\", sixteenth_table23.iloc[27])\n",
        "\n",
        "years3 = sixteenth_table23.iloc[2, 1:].values\n",
        "net_income3 = sixteenth_table23.iloc[27, 1:].values\n",
        "\n",
        "\n",
        "print(\"Extracted Years:\", years3)\n",
        "print(\"Extracted Net Income:\", net_income3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ww8ldXKg5AlU",
        "outputId": "48d4bd3c-2ac3-48e0-d77b-25993c947817"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Row 3 (Expected Year Row): 0\n",
            "(In millions, except per share amounts)    Year Ended June 30,\n",
            "                                                          2023\n",
            "                                                          2022\n",
            "                                                          2021\n",
            "Name: 3, dtype: object\n",
            "Row 5 (Expected Net Income Row): 0\n",
            "(In millions, except per share amounts)    Net income\n",
            "                                            $\\t72,361\n",
            "                                            $\\t72,738\n",
            "                                            $\\t61,271\n",
            "Name: 28, dtype: object\n",
            "Extracted Years: ['2023' '2022' '2021']\n",
            "Extracted Net Income: ['$\\t72,361' '$\\t72,738' '$\\t61,271']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "year_row3 = sixteenth_table23[sixteenth_table23.iloc[:, 0].str.contains('Year', case=False, na=False)]\n",
        "net_income_row3 = sixteenth_table23[sixteenth_table23.iloc[:, 0].str.contains('Net income', case=False, na=False)]\n",
        "\n",
        "\n",
        "print(\"Year Row:\", year_row1)\n",
        "print(\"Net Income Row:\", net_income_row1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6JvL9xq15FDN",
        "outputId": "b6a5e25d-aab9-4983-ef1e-f6ba692d9f52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Year Row: 0                                       \n",
            "4  Year Ended June 30,  2021  2020  2019\n",
            "Net Income Row: 0                                              \n",
            "29  Net income  $\\t61,271  $\\t44,281  $\\t39,240\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re\n",
        "import pandas as pd\n",
        "\n",
        "if not year_row3.empty and not net_income_row3.empty:\n",
        "    years = year_row3.iloc[0, 1:].values\n",
        "    net_income = net_income_row3.iloc[0, 1:].values\n",
        "\n",
        "\n",
        "    years_cleaned3 = pd.to_numeric([re.sub(r'[^\\d.-]', '', str(val)) for val in years], errors='coerce')\n",
        "    net_income_cleaned3 = pd.to_numeric([re.sub(r'[^\\d.-]', '', str(val)) for val in net_income], errors='coerce')\n",
        "\n",
        "\n",
        "    net_income_df_3 = pd.DataFrame({\n",
        "        'Year': years_cleaned3,\n",
        "        'Net Income': net_income_cleaned3\n",
        "    })\n",
        "\n",
        "\n",
        "    print(net_income_df_3)\n",
        "else:\n",
        "    print(\"Year or Net Income rows are missing.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YhdaqSSP5InE",
        "outputId": "3fe8fdae-0e15-4f45-9d7a-d037df70d289"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year  Net Income\n",
            "0  2023       72361\n",
            "1  2022       72738\n",
            "2  2021       61271\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# three DataFrames\n",
        "net_income_df_2 = pd.DataFrame({\n",
        "    'Year': years_cleaned2,\n",
        "    'Net Income': net_income_cleaned2\n",
        "})\n",
        "\n",
        "net_income_df_1 = pd.DataFrame({\n",
        "    'Year': years_cleaned1,\n",
        "    'Net Income': net_income_cleaned1\n",
        "})\n",
        "\n",
        "net_income_df_3 = pd.DataFrame({\n",
        "    'Year': years_cleaned3,\n",
        "    'Net Income': net_income_cleaned3\n",
        "})\n",
        "\n",
        "\n",
        "# Combine our 3 DataFrames\n",
        "combined_df = pd.concat([net_income_df_2, net_income_df_1, net_income_df_3], ignore_index=True)\n",
        "df_drop = combined_df.drop_duplicates()\n",
        "# Print the combined DataFrame after drop\n",
        "print(df_drop)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "znEqtGDO5OC7",
        "outputId": "5cf7e79e-8820-4511-9258-20335805f48d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Year  Net Income\n",
            "0  2022       72738\n",
            "1  2021       61271\n",
            "2  2020       44281\n",
            "5  2019       39240\n",
            "6  2023       72361\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "df_drop = df_drop.sort_values(by='Year')\n",
        "\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(df_drop['Year'], df_drop['Net Income'], marker='o', linestyle='-', color='b')\n",
        "\n",
        "\n",
        "for i, row in df_drop.iterrows():\n",
        "    plt.annotate(f\"{row['Net Income']}\", (row['Year'], row['Net Income']), textcoords=\"offset points\", xytext=(0,5), ha='center')\n",
        "\n",
        "plt.title('Net Income Over Years')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Net Income')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "hulmycw15S_D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part 3: LDA analysis"
      ],
      "metadata": {
        "id": "sQ0EDeANB-wC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import docx\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from gensim import corpora\n",
        "from gensim.models.ldamodel import LdaModel\n",
        "from gensim.models import CoherenceModel\n",
        "import nltk\n",
        "from wordcloud import WordCloud\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "\n",
        "# Download necessary NLTK data\n",
        "nltk.download('punkt')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "\n",
        "def extract_text_from_docx(file_path):\n",
        "    doc = docx.Document(file_path)\n",
        "    text = []\n",
        "    for paragraph in doc.paragraphs:\n",
        "        text.append(paragraph.text)\n",
        "    return ' '.join(text)\n",
        "\n",
        "# preprocess text\n",
        "def preprocess_text(text):\n",
        "    # Tokenization\n",
        "    words = word_tokenize(text.lower())\n",
        "\n",
        "    # Removing stopwords and punctuation\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    words = [word for word in words if word.isalpha() and word not in stop_words]\n",
        "\n",
        "    # Lemmatization\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    words = [lemmatizer.lemmatize(word) for word in words]\n",
        "\n",
        "    return words\n",
        "\n",
        "\n",
        "documents = []\n",
        "all_words = []\n",
        "\n",
        "for filename in os.listdir(folder_path):\n",
        "    if filename.endswith('.docx'):\n",
        "        file_path = os.path.join(folder_path, filename)\n",
        "        text = extract_text_from_docx(file_path)\n",
        "        preprocessed_text = preprocess_text(text)\n",
        "        documents.append(preprocessed_text)\n",
        "        all_words.extend(preprocessed_text)\n",
        "\n",
        "# Create a dictionary and a corpus for LDA\n",
        "dictionary = corpora.Dictionary(documents)\n",
        "corpus = [dictionary.doc2bow(doc) for doc in documents]\n",
        "\n",
        "# number of topics for LDA\n",
        "num_topics = 5\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = LdaModel(\n",
        "    corpus=corpus,\n",
        "    id2word=dictionary,\n",
        "    num_topics=num_topics,\n",
        "    alpha='auto',\n",
        "    eta='auto',\n",
        "    iterations=100,\n",
        "    passes=20,\n",
        "    eval_every=None,\n",
        "    random_state=42,\n",
        "    per_word_topics=True\n",
        ")\n",
        "\n",
        "\n",
        "topics = lda_model.print_topics(num_words=5)\n",
        "for topic in topics:\n",
        "    print(topic)\n",
        "\n",
        "# coherence score. model evaluation\n",
        "coherence_model_lda = CoherenceModel(model=lda_model, texts=documents, dictionary=dictionary, coherence='c_v')\n",
        "coherence_score = coherence_model_lda.get_coherence()\n",
        "print(f'Coherence Score: {coherence_score:.4f}')\n",
        "\n",
        "\n",
        "def plot_word_clouds(lda_model, num_topics):\n",
        "\n",
        "    num_columns = 4\n",
        "    num_rows = math.ceil(num_topics / num_columns)\n",
        "\n",
        "\n",
        "    fig, axes = plt.subplots(num_rows, num_columns, figsize=(15, num_rows * 3), sharex=True, sharey=True)\n",
        "\n",
        "\n",
        "    axes = axes.flatten()\n",
        "\n",
        "    for i in range(num_topics):\n",
        "        topic_words = dict(lda_model.show_topic(i, 20))  # Get top 20 words for each topic\n",
        "        wc = WordCloud(stopwords=stopwords, background_color='white', colormap='tab10',\n",
        "                       width=300, height=300, max_words=20).generate_from_frequencies(topic_words)\n",
        "\n",
        "\n",
        "        axes[i].imshow(wc, interpolation='bilinear')\n",
        "        axes[i].set_title(f'Topic {i + 1}', fontdict={'fontsize': 16})\n",
        "        axes[i].axis('off')\n",
        "\n",
        "\n",
        "    for j in range(i + 1, len(axes)):\n",
        "        axes[j].axis('off')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "plot_word_clouds(lda_model, num_topics)"
      ],
      "metadata": {
        "id": "MghICDNKDCSH",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "1df328c8-347b-4f63-9a48-ece5ff857413"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n",
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(0, '0.014*\"revenue\" + 0.011*\"year\" + 0.011*\"billion\" + 0.010*\"service\" + 0.009*\"tax\"')\n",
            "(1, '0.014*\"revenue\" + 0.011*\"year\" + 0.010*\"billion\" + 0.010*\"service\" + 0.010*\"product\"')\n",
            "(2, '0.000*\"revenue\" + 0.000*\"service\" + 0.000*\"year\" + 0.000*\"billion\" + 0.000*\"tax\"')\n",
            "(3, '0.000*\"year\" + 0.000*\"service\" + 0.000*\"revenue\" + 0.000*\"billion\" + 0.000*\"product\"')\n",
            "(4, '0.013*\"service\" + 0.010*\"year\" + 0.009*\"product\" + 0.009*\"tax\" + 0.009*\"revenue\"')\n",
            "Coherence Score: 0.3241\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x600 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pyLDAvis"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_32S-ffAEBGy",
        "outputId": "3d76e218-e35b-4e23-cb39-22962137097b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pyLDAvis\n",
            "  Downloading pyLDAvis-3.4.1-py3-none-any.whl.metadata (4.2 kB)\n",
            "Requirement already satisfied: numpy>=1.24.2 in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (1.13.1)\n",
            "Requirement already satisfied: pandas>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (2.1.4)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (1.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (3.1.4)\n",
            "Requirement already satisfied: numexpr in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (2.10.1)\n",
            "Collecting funcy (from pyLDAvis)\n",
            "  Downloading funcy-2.0-py2.py3-none-any.whl.metadata (5.9 kB)\n",
            "Requirement already satisfied: scikit-learn>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (1.3.2)\n",
            "Requirement already satisfied: gensim in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (4.3.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from pyLDAvis) (71.0.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->pyLDAvis) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->pyLDAvis) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=2.0.0->pyLDAvis) (2024.1)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.0.0->pyLDAvis) (3.5.0)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from gensim->pyLDAvis) (7.0.4)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->pyLDAvis) (2.1.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=2.0.0->pyLDAvis) (1.16.0)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open>=1.8.1->gensim->pyLDAvis) (1.16.0)\n",
            "Downloading pyLDAvis-3.4.1-py3-none-any.whl (2.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.6/2.6 MB\u001b[0m \u001b[31m68.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading funcy-2.0-py2.py3-none-any.whl (30 kB)\n",
            "Installing collected packages: funcy, pyLDAvis\n",
            "Successfully installed funcy-2.0 pyLDAvis-3.4.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pyLDAvis\n",
        "import pyLDAvis.gensim_models\n",
        "\n",
        "\n",
        "lda_display = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary, sort_topics=False)\n",
        "\n",
        "\n",
        "pyLDAvis.display(lda_display)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 917
        },
        "id": "EcZ0035aEDug",
        "outputId": "47c6bfa2-51f2-48cb-8b03-a407a0bed619"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v1.0.0.css\">\n",
              "\n",
              "\n",
              "<div id=\"ldavis_el23421372174127047206590980185\" style=\"background-color:white;\"></div>\n",
              "<script type=\"text/javascript\">\n",
              "\n",
              "var ldavis_el23421372174127047206590980185_data = {\"mdsDat\": {\"x\": [-0.12328778289219486, -0.12647040746156163, 0.17692094935648203, 0.17453599134164768, -0.10169875034437316], \"y\": [-9.52872989475238e-05, -0.033015881686979984, -0.001465920174961891, -0.0014896063388880971, 0.03606669549977735], \"topics\": [1, 2, 3, 4, 5], \"cluster\": [1, 1, 1, 1, 1], \"Freq\": [24.28571708177058, 30.155051254546912, 4.89320227891283e-05, 1.780224490175436e-05, 45.55916492941481]}, \"tinfo\": {\"Term\": [\"revenue\", \"million\", \"billion\", \"year\", \"expense\", \"phone\", \"ai\", \"linkedin\", \"service\", \"fiscal\", \"income\", \"tax\", \"window\", \"cloud\", \"value\", \"due\", \"business\", \"product\", \"cost\", \"primarily\", \"microsoft\", \"asset\", \"driven\", \"financial\", \"foreign\", \"june\", \"lease\", \"impact\", \"refer\", \"restructuring\", \"realization\", \"smartphone\", \"restate\", \"harmonizing\", \"outperforming\", \"geared\", \"towards\", \"prominent\", \"mixer\", \"beat\", \"establish\", \"retrospective\", \"firstline\", \"boldly\", \"thoughtful\", \"boeing\", \"partes\", \"lake\", \"inter\", \"retrospectively\", \"requiring\", \"extensibility\", \"oil\", \"tetra\", \"timeless\", \"pak\", \"monolithic\", \"hr\", \"lie\", \"showcase\", \"retained\", \"toughest\", \"restructuring\", \"adoption\", \"modified\", \"negatively\", \"august\", \"applied\", \"previous\", \"adopt\", \"reduction\", \"standard\", \"linkedin\", \"impact\", \"unfavorable\", \"expense\", \"deferral\", \"decreased\", \"revenue\", \"primarily\", \"income\", \"billion\", \"asset\", \"foreign\", \"fiscal\", \"higher\", \"offset\", \"year\", \"million\", \"tax\", \"due\", \"business\", \"loss\", \"sale\", \"impairment\", \"driven\", \"window\", \"charge\", \"service\", \"value\", \"financial\", \"operating\", \"cloud\", \"related\", \"net\", \"product\", \"customer\", \"increased\", \"fair\", \"investment\", \"software\", \"new\", \"cost\", \"including\", \"statement\", \"motorola\", \"itc\", \"expired\", \"bundled\", \"injunction\", \"lumia\", \"nd\", \"mojang\", \"resale\", \"asserts\", \"citizenship\", \"rt\", \"voucher\", \"specified\", \"xp\", \"lync\", \"novell\", \"smartphones\", \"replaced\", \"guarantee\", \"seamless\", \"mpsa\", \"wisconsin\", \"rand\", \"entertain\", \"denmark\", \"wireless\", \"c\", \"reinventing\", \"appealed\", \"joint\", \"nokia\", \"germany\", \"patent\", \"element\", \"commodity\", \"phone\", \"reflecting\", \"arrangement\", \"display\", \"hardware\", \"licensing\", \"million\", \"online\", \"group\", \"revenue\", \"due\", \"commercial\", \"window\", \"cost\", \"microsoft\", \"billion\", \"year\", \"product\", \"june\", \"fiscal\", \"higher\", \"acquisition\", \"segment\", \"value\", \"office\", \"device\", \"service\", \"software\", \"investment\", \"expense\", \"fair\", \"business\", \"financial\", \"income\", \"increased\", \"new\", \"asset\", \"tax\", \"including\", \"customer\", \"evident\", \"engineered\", \"realm\", \"amend\", \"piloting\", \"ge\", \"jeff\", \"geographically\", \"reid\", \"scaling\", \"narrower\", \"pga\", \"deficiency\", \"roam\", \"revolutionizing\", \"hostage\", \"smile\", \"caput\", \"societally\", \"hoffman\", \"bitkom\", \"surround\", \"fastest\", \"donate\", \"tip\", \"equality\", \"forewarning\", \"scorpio\", \"something\", \"vigorous\", \"mathematics\", \"profitable\", \"struck\", \"roughly\", \"ratable\", \"esports\", \"dismiss\", \"dna\", \"essence\", \"multiplier\", \"globalization\", \"revenue\", \"concept\", \"year\", \"service\", \"billion\", \"value\", \"financial\", \"tax\", \"expense\", \"microsoft\", \"customer\", \"income\", \"including\", \"cloud\", \"million\", \"business\", \"cost\", \"fiscal\", \"window\", \"asset\", \"product\", \"new\", \"operating\", \"investment\", \"foreign\", \"software\", \"office\", \"net\", \"management\", \"june\", \"statement\", \"piloting\", \"evident\", \"ge\", \"roam\", \"realm\", \"revolutionizing\", \"scaling\", \"pga\", \"jeff\", \"amend\", \"hoffman\", \"societally\", \"hostage\", \"smile\", \"caput\", \"narrower\", \"surround\", \"engineered\", \"reid\", \"geographically\", \"tip\", \"scorpio\", \"forewarning\", \"donate\", \"deficiency\", \"bitkom\", \"fastest\", \"roughly\", \"something\", \"equality\", \"tailor\", \"tour\", \"feasible\", \"ratable\", \"spear\", \"hershey\", \"essence\", \"zika\", \"theorized\", \"year\", \"service\", \"billion\", \"revenue\", \"product\", \"involves\", \"value\", \"income\", \"business\", \"tax\", \"fiscal\", \"cost\", \"cloud\", \"financial\", \"microsoft\", \"window\", \"new\", \"statement\", \"million\", \"customer\", \"also\", \"expense\", \"operating\", \"organization\", \"asset\", \"software\", \"foreign\", \"device\", \"primarily\", \"investment\", \"related\", \"nuance\", \"racial\", \"black\", \"pandemic\", \"environmental\", \"copilot\", \"zenimax\", \"carbon\", \"inclusion\", \"injustice\", \"healthcare\", \"chat\", \"automate\", \"inequity\", \"viva\", \"reasonableness\", \"computershare\", \"waste\", \"minority\", \"assistance\", \"openai\", \"fundamental\", \"github\", \"municipal\", \"communicated\", \"reward\", \"bethesda\", \"submit\", \"topic\", \"metric\", \"sustainability\", \"diversity\", \"variable\", \"skill\", \"safety\", \"ssp\", \"ai\", \"refer\", \"manager\", \"culture\", \"critical\", \"learning\", \"african\", \"regulation\", \"india\", \"distinct\", \"community\", \"sa\", \"job\", \"help\", \"cloud\", \"service\", \"solution\", \"tax\", \"employee\", \"uncertain\", \"customer\", \"product\", \"audit\", \"financial\", \"lease\", \"performance\", \"organization\", \"digital\", \"year\", \"microsoft\", \"benefit\", \"company\", \"business\", \"management\", \"statement\", \"including\", \"income\", \"billion\", \"revenue\", \"software\", \"investment\", \"value\", \"new\", \"fiscal\", \"related\", \"share\", \"cost\", \"security\", \"net\", \"operating\", \"increased\", \"expense\", \"asset\"], \"Freq\": [2202.0, 1075.0, 1727.0, 2044.0, 1020.0, 427.0, 260.0, 313.0, 2215.0, 1292.0, 1167.0, 1522.0, 918.0, 1031.0, 1124.0, 665.0, 1251.0, 1720.0, 974.0, 667.0, 1185.0, 826.0, 376.0, 1296.0, 639.0, 712.0, 321.0, 416.0, 136.0, 226.0, 8.859474100387102, 8.786229240955043, 6.909333096212133, 5.963467164349639, 5.963623912997232, 5.958006636031342, 5.956461445699253, 5.954593299101865, 5.005158970764107, 5.00360026761757, 4.994540601171141, 21.01959906800953, 4.040916624713888, 4.039332585040262, 4.037542137125948, 4.037110064883985, 4.028241942582351, 4.020359242274313, 3.9968327566802255, 6.576574635312894, 5.704834598384446, 3.077509708416896, 3.0768854163894144, 3.076966831096461, 3.076424629416749, 3.0761192398102324, 3.073397758980475, 3.0726187452275675, 3.072424836340244, 3.070526961551071, 11.173707079602528, 4.648942263983742, 143.99844234129162, 73.89796077994335, 11.920785998125595, 18.10109734976106, 19.44004159493567, 8.193504499304627, 16.100894070620424, 13.508866003271589, 60.283638070159384, 145.5578427490539, 151.2104151862806, 185.28611178898998, 55.595161702766504, 372.9835582905348, 34.0103837653581, 122.80805751404108, 655.4351514723542, 242.1028697537048, 364.0702896758316, 490.55101124397765, 266.10350919650796, 216.1943722544148, 368.02338246560583, 112.68188948476808, 124.30896365062237, 516.5320239107195, 311.7540772602975, 405.5203831531908, 214.3416464808744, 340.2828932552639, 187.06831148136519, 196.23572911019986, 159.0694896895388, 137.4887682990276, 260.4612064982615, 114.31059441526949, 483.1990888823172, 287.55522104492456, 314.51358855503634, 224.01915663973065, 259.61923924540554, 222.495213857079, 180.74419540709636, 343.0808025635372, 250.57185864987227, 208.11688742867628, 205.97719271727397, 222.89326893995218, 222.49426255494188, 211.06319987033945, 218.0688482540901, 208.7291368359221, 203.88726840404524, 96.88556581905178, 38.58661780594475, 21.860847951068312, 24.73677041054621, 17.948686021094495, 21.798237037995506, 131.40686354926453, 24.583746493350745, 13.012541366256578, 12.028175362745747, 11.043025800000136, 11.004640625709667, 10.056743683756718, 9.051119231627801, 8.073525898033852, 7.096606224038968, 7.0966448147507455, 7.095857899801899, 7.07843838807712, 8.000952708822934, 10.782361481587598, 7.047794007212029, 6.109747763904445, 6.10940086696271, 6.109277963934985, 6.106287183772259, 6.096452005304457, 126.34380243267688, 6.094363073297392, 18.940539461618602, 25.86473496936521, 104.60731221138178, 22.265818880457275, 137.8209754180265, 60.66580697067683, 58.249746533448246, 267.9559427985427, 50.84655136612495, 90.52887692941414, 30.02467443680356, 234.52822530295552, 240.206657265255, 515.9687963563523, 175.62411452633023, 66.25472861593782, 798.3705513015525, 290.5814824820447, 265.7834266654824, 367.04234026595697, 378.19874725501523, 435.59759208377676, 581.3771400587383, 654.8134793306893, 565.3701154992823, 286.28469196135956, 442.72569252326844, 141.5005561616908, 167.534977846454, 260.4666332968173, 380.47894154107587, 258.05704267631097, 278.22101843982813, 568.6496414346667, 312.91198778472557, 303.0180004278888, 318.949803300806, 266.1013604391007, 338.5098042235848, 340.7803877445559, 300.2341268831415, 249.05991688403046, 256.02294303711, 252.60849055049664, 305.726088526134, 256.90487838549365, 252.1855631951321, 2.0090113177704695e-05, 2.0090209830941863e-05, 2.0089458386055693e-05, 2.009005872517671e-05, 2.0089281415339745e-05, 2.008986541870237e-05, 2.0089436605044497e-05, 2.0089907619411557e-05, 2.0089098999371e-05, 2.0088687882784725e-05, 2.0089154813212184e-05, 2.008886893744027e-05, 2.0089454302116092e-05, 2.008946655393489e-05, 2.0088416981458007e-05, 2.0088399284386412e-05, 2.0088347554484827e-05, 2.0089342674433727e-05, 2.0088818568851883e-05, 2.0088060317399714e-05, 2.0089197013921372e-05, 2.0088263153066454e-05, 2.0090277896601844e-05, 2.008932906130173e-05, 2.0088189642153673e-05, 2.0090087312753902e-05, 2.008847415661239e-05, 2.008896559067744e-05, 2.0089378068576917e-05, 2.008985861213637e-05, 2.008962718889244e-05, 2.0089781017283995e-05, 2.008956184585886e-05, 2.0089280054026546e-05, 2.0090038305478715e-05, 2.008916978765738e-05, 2.008926644089455e-05, 2.0089598601315248e-05, 2.00897578749596e-05, 2.0089275970086945e-05, 2.0090203024375868e-05, 3.06979802052894e-05, 2.0090732575210508e-05, 2.8765843877475548e-05, 2.8814175941313746e-05, 2.812857505197848e-05, 2.623422605595881e-05, 2.6347503649922986e-05, 2.6361073219896486e-05, 2.5836118178618287e-05, 2.5869018396025947e-05, 2.5606178766075756e-05, 2.548847690421292e-05, 2.5107949025531885e-05, 2.512911472315909e-05, 2.51194820709588e-05, 2.518445210472237e-05, 2.47792300046008e-05, 2.4706200996695664e-05, 2.4377209713124657e-05, 2.4260055099168055e-05, 2.478753401511829e-05, 2.4138304691849637e-05, 2.3940184614034293e-05, 2.388187412444311e-05, 2.3664796399010296e-05, 2.3810070298417604e-05, 2.349595272286531e-05, 2.3353809843817052e-05, 2.330827663991721e-05, 2.339896460264741e-05, 2.3352113647570365e-05, 7.2838308529314535e-06, 7.283664938384881e-06, 7.28367732006746e-06, 7.28369267335386e-06, 7.283138469241575e-06, 7.283311317530393e-06, 7.2832350463657e-06, 7.283376692814416e-06, 7.283237522702216e-06, 7.283303393253542e-06, 7.283323699212974e-06, 7.28333558562825e-06, 7.283155308329884e-06, 7.2831142011437186e-06, 7.28348862322494e-06, 7.283176604823922e-06, 7.283256342859738e-06, 7.283021090890716e-06, 7.283001280198588e-06, 7.283108257936079e-06, 7.283046844790482e-06, 7.283374711745203e-06, 7.283095380986197e-06, 7.283348957845437e-06, 7.282856166878749e-06, 7.282989889050614e-06, 7.283483670551908e-06, 7.283492585363366e-06, 7.283102809995745e-06, 7.283106276866867e-06, 7.284153271945839e-06, 7.2833390524993725e-06, 7.28327219141344e-06, 7.2833563868549845e-06, 7.283804108497081e-06, 7.28356439912233e-06, 7.283443553900349e-06, 7.283447020771471e-06, 7.2836619667810615e-06, 1.2344797052416832e-05, 1.226465091634321e-05, 1.1409554087739265e-05, 1.1520103693021949e-05, 1.1251992719501888e-05, 7.284434088506756e-06, 1.035566488790624e-05, 1.0347765374420144e-05, 1.0371965125389278e-05, 1.0429374530107428e-05, 1.008532620205637e-05, 9.925726313599007e-06, 9.857678567208044e-06, 9.921724553789122e-06, 9.874102621516883e-06, 9.767706327838864e-06, 9.494161281468054e-06, 9.46447991198706e-06, 9.522845182600393e-06, 9.430536272094698e-06, 9.278265349190142e-06, 9.366681458692657e-06, 9.278891367061391e-06, 9.134552645284945e-06, 9.122042193206021e-06, 9.10252271825216e-06, 8.965484236524935e-06, 9.002021096016872e-06, 8.966598587957144e-06, 9.04919431611241e-06, 8.987327505665427e-06, 65.95696102242371, 37.05456499620542, 34.06628135962159, 33.073194118359346, 34.03423950017925, 30.085100603568097, 30.081090301223334, 30.076405700254234, 35.95083701149218, 22.107189663785523, 22.074889238705275, 20.120916317928895, 18.12326861896168, 17.127011413677867, 16.131381610309557, 16.13067435724117, 16.130645205232973, 14.137227082411295, 14.137555359373144, 13.143701293547505, 13.142636611509072, 14.102470283770947, 72.95701220905086, 12.147422541127199, 12.145712712472621, 12.145342608716405, 12.14531725914406, 12.14479505795378, 12.14409414227848, 71.85965457186757, 41.73833703429213, 33.982404694651, 31.791529880494487, 57.05522547789339, 27.089305888698853, 77.76874128345649, 224.55971387712813, 118.86095067315361, 42.923984696991035, 62.12074940068895, 75.04873217098528, 138.29087060343926, 45.26762363896195, 40.215012788318234, 63.58398755533675, 79.54380452750326, 119.83821724631619, 88.20453661784825, 58.77468696996163, 210.5693254599959, 619.9740446556222, 1163.4631162801572, 322.3375976091788, 811.3381690742442, 296.1892501011747, 85.08426789790008, 586.7624139877371, 812.0183487993685, 235.18274622276437, 641.6104522016708, 206.99276443786246, 181.19231446070236, 304.0873250978183, 134.47272815687106, 873.5008365277606, 564.2837111315123, 240.6304504380414, 351.78453286882495, 572.4169084815575, 303.0772967373588, 387.58551081349333, 409.86595973433305, 502.7451704287539, 655.4622697165438, 748.5744936799473, 413.8674607075772, 405.5007228174447, 456.8515340308516, 376.4254934069875, 481.39932982073685, 360.09716463174726, 299.54790619944237, 378.3943237121145, 320.1183338089546, 290.01571665089705, 332.37911076525216, 317.7475404050892, 328.0862316676614, 308.0769219118898], \"Total\": [2202.0, 1075.0, 1727.0, 2044.0, 1020.0, 427.0, 260.0, 313.0, 2215.0, 1292.0, 1167.0, 1522.0, 918.0, 1031.0, 1124.0, 665.0, 1251.0, 1720.0, 974.0, 667.0, 1185.0, 826.0, 376.0, 1296.0, 639.0, 712.0, 321.0, 416.0, 136.0, 226.0, 9.27003433182989, 9.270066272275576, 7.338200202457643, 6.372945630940438, 6.3736102380345026, 6.373139375896945, 6.373054429776957, 6.3731281569122675, 5.4088250735901875, 5.408772940443445, 5.407464940857554, 22.817095188679225, 4.443498932983259, 4.442470968997391, 4.442374690182642, 4.44263326764281, 4.441602889810881, 4.442879592881602, 4.442135780204269, 7.344719812578447, 6.3715438409423815, 3.478129899676673, 3.4777816675023367, 3.4781775930061736, 3.4780090326604522, 3.4781983027296905, 3.476510628972254, 3.4764227433480785, 3.47658119673161, 3.4765197540024873, 13.170982791435685, 5.40780549989806, 226.33980198472753, 109.66321165112663, 15.141026116178804, 23.879062354875558, 26.8154899036115, 10.278092121449214, 21.93166646230734, 18.041074577911072, 103.08232914674264, 296.1635585582882, 313.6474576482449, 416.5331174248324, 100.23296573130847, 1020.0196284618019, 57.0671492432643, 276.66241960610625, 2202.380238671938, 667.2899043357922, 1167.0496228239695, 1727.390460557389, 826.7889550409917, 639.6723205013175, 1292.1484396011383, 281.60395129104, 321.1474289354647, 2044.8463808798106, 1075.9118711022047, 1522.5846775440168, 665.6154883581717, 1251.2096415168235, 566.8806241411597, 605.6433955171367, 457.20945466644224, 376.6014267434669, 918.5472936973682, 298.93761027698133, 2215.311887675968, 1124.885733206743, 1296.9044647704914, 804.2876639041816, 1031.3859172090442, 812.5109047733922, 587.6806192746217, 1720.4693029017149, 1089.5198708694566, 774.9243757547929, 763.8353308522944, 931.412025116354, 949.2737439598377, 843.511669946903, 974.6619539261762, 875.500008731568, 799.3656072628219, 97.32571160107378, 39.07971302483906, 22.297727699337276, 25.256947235049367, 18.351864685537972, 22.295787218911446, 134.76858119244883, 25.252435349391224, 13.41517481061839, 12.429182468162267, 11.441848728855932, 11.43759772790775, 10.454682106859227, 9.464672647751012, 8.478194286497287, 7.492930193180235, 7.493040424141325, 7.493117870805066, 7.489355523334243, 8.473760926359907, 11.430901270201932, 7.487503576012402, 6.505859584436449, 6.505731320326735, 6.505804701489495, 6.504457340078597, 6.502960563763956, 134.80626826342797, 6.502919420402392, 20.296194302074994, 28.174238664754622, 126.68991681202988, 26.221396463414482, 196.77437758901823, 81.07339250642876, 78.12401490671193, 427.8596806821497, 67.62003550701401, 130.31404754298862, 38.035724312296935, 404.8399374732528, 419.1072524657683, 1075.9118711022047, 315.35106895820707, 101.24103287278768, 2202.380238671938, 665.6154883581717, 604.7426460489314, 918.5472936973682, 974.6619539261762, 1185.535539812954, 1727.390460557389, 2044.8463808798106, 1720.4693029017149, 712.4288862748855, 1292.1484396011383, 281.60395129104, 356.799266830535, 657.7115765284489, 1124.885733206743, 672.1205167279525, 760.8536899971209, 2215.311887675968, 949.2737439598377, 931.412025116354, 1020.0196284618019, 763.8353308522944, 1251.2096415168235, 1296.9044647704914, 1167.0496228239695, 774.9243757547929, 843.511669946903, 826.7889550409917, 1522.5846775440168, 875.500008731568, 1089.5198708694566, 1.5396675094851309, 1.539716318276293, 1.5396663897751535, 1.539718352382415, 1.5396718820022615, 1.539732023857013, 1.5397027659527505, 1.5397755899436352, 1.5397216444968926, 1.539694807399765, 1.5397321092088028, 1.5397250112246943, 1.5397776581538212, 1.5397818056534551, 1.5397035360747824, 1.539719963187208, 1.539716433105703, 1.5397976389298327, 1.539757540617749, 1.5397251860993637, 1.5398243661882238, 1.5397641740314727, 1.539943159590401, 1.5398768880200633, 1.5397905243225134, 1.539939086630932, 1.539815718192839, 1.5398683031242408, 1.5399126526670543, 1.5399958031357348, 1.5399784493216377, 1.540002132126562, 1.539995444545688, 1.5399707958502442, 1.5401984605930874, 1.5399581009097991, 1.5399942242172295, 1.5402299473997358, 1.5404267321432557, 1.5400912328411689, 1.5411499713864094, 2202.380238671938, 1.5420591243090707, 2044.8463808798106, 2215.311887675968, 1727.390460557389, 1124.885733206743, 1296.9044647704914, 1522.5846775440168, 1020.0196284618019, 1185.535539812954, 1089.5198708694566, 1167.0496228239695, 875.500008731568, 1031.3859172090442, 1075.9118711022047, 1251.2096415168235, 974.6619539261762, 1292.1484396011383, 918.5472936973682, 826.7889550409917, 1720.4693029017149, 843.511669946903, 804.2876639041816, 931.412025116354, 639.6723205013175, 949.2737439598377, 672.1205167279525, 587.6806192746217, 569.5737415228184, 712.4288862748855, 799.3656072628219, 1.5396718820022615, 1.5396675094851309, 1.539732023857013, 1.5397818056534551, 1.5396663897751535, 1.5397035360747824, 1.539694807399765, 1.5397250112246943, 1.5397027659527505, 1.539718352382415, 1.5397251860993637, 1.539757540617749, 1.539719963187208, 1.539716433105703, 1.5397976389298327, 1.5397321092088028, 1.5397641740314727, 1.539716318276293, 1.5397216444968926, 1.5397755899436352, 1.5397905243225134, 1.5398683031242408, 1.539815718192839, 1.5398768880200633, 1.5397776581538212, 1.5398243661882238, 1.539943159590401, 1.5399707958502442, 1.5399126526670543, 1.539939086630932, 1.5405200741411749, 1.540080228076771, 1.5400711835870649, 1.5401984605930874, 1.5408425884451107, 1.5406038642815814, 1.5404267321432557, 1.5404585743207535, 1.5410904994348757, 2044.8463808798106, 2215.311887675968, 1727.390460557389, 2202.380238671938, 1720.4693029017149, 1.543960434763137, 1124.885733206743, 1167.0496228239695, 1251.2096415168235, 1522.5846775440168, 1292.1484396011383, 974.6619539261762, 1031.3859172090442, 1296.9044647704914, 1185.535539812954, 918.5472936973682, 843.511669946903, 799.3656072628219, 1075.9118711022047, 1089.5198708694566, 673.6889228610701, 1020.0196284618019, 804.2876639041816, 522.3684211922862, 826.7889550409917, 949.2737439598377, 639.6723205013175, 760.8536899971209, 667.2899043357922, 931.412025116354, 812.5109047733922, 66.37882308615876, 37.467727551676845, 34.475970097398, 33.4780222018816, 34.474465740493386, 30.489097490325495, 30.488200380393312, 30.488393958234703, 36.46434165238742, 22.512357410387438, 22.510234653026618, 20.51845227052712, 18.524170950057442, 17.52760792822212, 16.530510959424, 16.53038374197292, 16.530511963595867, 14.536496622654248, 14.536848444602892, 13.540102683159262, 13.53972769720939, 14.533351774158529, 75.28707031295177, 12.542536033767263, 12.542689980228806, 12.5426277352372, 12.542747756929623, 12.542576660709903, 12.54249623857535, 74.28039869528297, 43.40137567140571, 35.44908170236449, 33.434239959245375, 61.26190299485723, 28.47463454735296, 85.08996004509109, 260.6076741916534, 136.58752248743005, 47.35455593069073, 70.18839999786007, 86.10581957305607, 166.3625138974985, 50.31883203666014, 44.31891825203355, 73.19817687531308, 93.8729144387246, 148.48555077407715, 105.86197736102616, 68.07306662708399, 292.03490498936117, 1031.3859172090442, 2215.311887675968, 495.1035931290403, 1522.5846775440168, 462.55373545125167, 105.82621749460652, 1089.5198708694566, 1720.4693029017149, 374.7295098776923, 1296.9044647704914, 321.2244990022302, 272.859899652943, 522.3684211922862, 190.776514468884, 2044.8463808798106, 1185.535539812954, 399.7756913840125, 661.2732371145951, 1251.2096415168235, 569.5737415228184, 799.3656072628219, 875.500008731568, 1167.0496228239695, 1727.390460557389, 2202.380238671938, 949.2737439598377, 931.412025116354, 1124.885733206743, 843.511669946903, 1292.1484396011383, 812.5109047733922, 618.6209756003454, 974.6619539261762, 715.3989331426792, 587.6806192746217, 804.2876639041816, 774.9243757547929, 1020.0196284618019, 826.7889550409917], \"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\"], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -8.5642, -8.5725, -8.8128, -8.96, -8.96, -8.961, -8.9612, -8.9615, -9.1352, -9.1355, -9.1373, -7.7002, -9.3492, -9.3496, -9.3501, -9.3502, -9.3524, -9.3543, -9.3602, -8.8622, -9.0044, -9.6216, -9.6218, -9.6217, -9.6219, -9.622, -9.6229, -9.6232, -9.6232, -9.6238, -8.3321, -9.2091, -5.7759, -6.443, -8.2674, -7.8497, -7.7784, -8.6424, -7.9668, -8.1423, -6.6466, -5.7651, -5.727, -5.5238, -6.7276, -4.8242, -7.219, -5.9351, -4.2604, -5.2563, -4.8483, -4.5502, -5.1618, -5.3695, -4.8375, -6.0211, -5.9229, -4.4986, -5.0035, -4.7405, -5.3781, -4.9159, -5.5142, -5.4664, -5.6764, -5.8222, -5.1832, -6.0068, -4.5653, -5.0843, -4.9947, -5.334, -5.1865, -5.3408, -5.5486, -4.9077, -5.2219, -5.4076, -5.4179, -5.339, -5.3408, -5.3935, -5.3609, -5.4047, -5.4281, -6.3886, -7.3093, -7.8775, -7.7539, -8.0746, -7.8803, -6.0839, -7.7601, -8.3962, -8.4749, -8.5604, -8.5638, -8.6539, -8.7593, -8.8736, -9.0025, -9.0025, -9.0026, -9.0051, -8.8826, -8.5842, -9.0094, -9.1523, -9.1523, -9.1523, -9.1528, -9.1545, -6.1232, -9.1548, -8.0209, -7.7093, -6.3119, -7.8591, -6.0362, -6.8568, -6.8974, -5.3713, -7.0333, -6.4565, -7.5601, -5.5046, -5.4807, -4.7161, -5.7938, -6.7687, -4.2796, -5.2903, -5.3795, -5.0567, -5.0267, -4.8854, -4.5968, -4.4778, -4.6247, -5.3052, -4.8692, -6.0099, -5.841, -5.3997, -5.0207, -5.409, -5.3337, -4.6189, -5.2162, -5.2484, -5.1971, -5.3783, -5.1376, -5.1309, -5.2576, -5.4445, -5.4169, -5.4303, -5.2395, -5.4135, -5.432, -8.446, -8.446, -8.446, -8.446, -8.4461, -8.446, -8.446, -8.446, -8.4461, -8.4461, -8.4461, -8.4461, -8.446, -8.446, -8.4461, -8.4461, -8.4461, -8.446, -8.4461, -8.4461, -8.4461, -8.4461, -8.446, -8.446, -8.4461, -8.446, -8.4461, -8.4461, -8.446, -8.446, -8.446, -8.446, -8.446, -8.4461, -8.446, -8.4461, -8.4461, -8.446, -8.446, -8.4461, -8.446, -8.022, -8.446, -8.087, -8.0854, -8.1095, -8.1792, -8.1749, -8.1743, -8.1945, -8.1932, -8.2034, -8.208, -8.2231, -8.2222, -8.2226, -8.22, -8.2362, -8.2392, -8.2526, -8.2574, -8.2359, -8.2624, -8.2707, -8.2731, -8.2822, -8.2761, -8.2894, -8.2955, -8.2974, -8.2935, -8.2956, -8.4495, -8.4495, -8.4495, -8.4495, -8.4496, -8.4495, -8.4496, -8.4495, -8.4496, -8.4495, -8.4495, -8.4495, -8.4496, -8.4496, -8.4495, -8.4496, -8.4496, -8.4496, -8.4496, -8.4496, -8.4496, -8.4495, -8.4496, -8.4495, -8.4496, -8.4496, -8.4495, -8.4495, -8.4496, -8.4496, -8.4494, -8.4495, -8.4496, -8.4495, -8.4495, -8.4495, -8.4495, -8.4495, -8.4495, -7.9219, -7.9284, -8.0007, -7.991, -8.0146, -8.4494, -8.0976, -8.0984, -8.096, -8.0905, -8.124, -8.14, -8.1469, -8.1404, -8.1452, -8.156, -8.1845, -8.1876, -8.1814, -8.1912, -8.2075, -8.198, -8.2074, -8.2231, -8.2244, -8.2266, -8.2417, -8.2377, -8.2416, -8.2325, -8.2393, -7.1858, -7.7624, -7.8465, -7.8761, -7.8475, -7.9708, -7.9709, -7.9711, -7.7927, -8.2789, -8.2804, -8.3731, -8.4776, -8.5342, -8.5941, -8.5941, -8.5941, -8.726, -8.726, -8.7989, -8.799, -8.7285, -7.0849, -8.8777, -8.8778, -8.8779, -8.8779, -8.8779, -8.878, -7.1001, -7.6434, -7.849, -7.9156, -7.3308, -8.0757, -7.0211, -5.9607, -6.5969, -7.6154, -7.2457, -7.0567, -6.4455, -7.5622, -7.6806, -7.2225, -6.9985, -6.5887, -6.8952, -7.3011, -6.025, -4.9451, -4.3157, -5.5992, -4.6761, -5.6838, -6.9312, -5.0002, -4.6753, -5.9145, -4.9108, -6.0421, -6.1753, -5.6575, -6.4735, -4.6023, -5.0393, -5.8916, -5.5118, -5.0249, -5.6608, -5.4149, -5.359, -5.1547, -4.8895, -4.7566, -5.3493, -5.3697, -5.2505, -5.4441, -5.1981, -5.4884, -5.6725, -5.4389, -5.6061, -5.7049, -5.5685, -5.6136, -5.5815, -5.6445], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 1.37, 1.3617, 1.3551, 1.3489, 1.3488, 1.3479, 1.3477, 1.3474, 1.3377, 1.3374, 1.3358, 1.3332, 1.3203, 1.3202, 1.3197, 1.3196, 1.3176, 1.3154, 1.3096, 1.3048, 1.3048, 1.2929, 1.2928, 1.2927, 1.2926, 1.2924, 1.292, 1.2918, 1.2917, 1.2911, 1.2508, 1.2641, 0.963, 1.0206, 1.1762, 1.1383, 1.0936, 1.1886, 1.1062, 1.126, 0.8788, 0.7049, 0.6857, 0.6052, 0.8259, 0.4092, 0.8977, 0.6031, 0.2033, 0.4014, 0.2504, 0.1564, 0.2816, 0.3305, 0.1594, 0.4993, 0.4662, 0.0393, 0.1766, 0.0923, 0.2821, 0.1132, 0.3066, 0.2883, 0.3595, 0.4076, 0.1549, 0.454, -0.1074, 0.0513, -0.0014, 0.1371, 0.0358, 0.1201, 0.2362, -0.1971, -0.0545, 0.1006, 0.1047, -0.0147, -0.0355, 0.0299, -0.082, -0.0185, 0.049, 1.1943, 1.1861, 1.179, 1.178, 1.1766, 1.1762, 1.1736, 1.172, 1.1683, 1.166, 1.1633, 1.1602, 1.16, 1.1541, 1.1499, 1.1445, 1.1445, 1.1443, 1.1424, 1.1414, 1.1404, 1.1383, 1.136, 1.136, 1.1359, 1.1356, 1.1343, 1.134, 1.1339, 1.1297, 1.1133, 1.0073, 1.0353, 0.8427, 0.9088, 0.9053, 0.7308, 0.9137, 0.8345, 0.9623, 0.6529, 0.6422, 0.4639, 0.6135, 0.7748, 0.1841, 0.37, 0.3767, 0.2815, 0.2521, 0.1976, 0.1099, 0.0601, 0.0859, 0.2871, 0.1277, 0.5106, 0.4428, 0.2725, 0.1148, 0.2416, 0.1928, -0.1611, 0.089, 0.0759, 0.0363, 0.1443, -0.1085, -0.1377, -0.1589, 0.0637, 0.0065, 0.0131, -0.4067, -0.0273, -0.2645, 3.2834, 3.2834, 3.2834, 3.2834, 3.2834, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2833, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2832, 3.2831, 3.2832, 3.2831, 3.283, 3.2829, 3.2831, 3.2824, -3.5584, 3.2819, -3.5492, -3.6275, -3.4028, -3.0436, -3.1816, -3.3415, -2.9611, -3.1102, -3.0359, -3.1093, -2.8369, -2.9999, -3.0425, -3.1909, -2.9573, -3.2423, -2.9144, -2.814, -3.5253, -2.839, -2.7997, -2.9488, -2.5822, -2.9709, -2.6389, -2.5107, -2.4813, -2.7013, -2.8184, 3.2799, 3.2799, 3.2799, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2798, 3.2797, 3.2797, 3.2797, 3.2797, 3.2797, 3.2797, 3.2797, 3.2797, 3.2797, 3.2797, 3.2794, 3.2796, 3.2796, 3.2795, 3.2792, 3.2793, 3.2794, 3.2794, 3.279, -3.384, -3.4706, -3.2941, -3.5274, -3.304, 3.2772, -2.9621, -2.9996, -3.0669, -3.2577, -3.1271, -2.8611, -2.9246, -3.1472, -3.0622, -2.8179, -2.7611, -2.7104, -3.0014, -3.0237, -2.5592, -2.9646, -2.7364, -2.3205, -2.781, -2.9213, -2.5417, -2.7111, -2.5839, -2.9082, -2.7785, 0.7798, 0.7751, 0.7742, 0.774, 0.7733, 0.7728, 0.7727, 0.7726, 0.772, 0.768, 0.7666, 0.7666, 0.7643, 0.763, 0.7617, 0.7617, 0.7617, 0.7583, 0.7583, 0.7564, 0.7564, 0.7561, 0.7547, 0.7541, 0.754, 0.754, 0.754, 0.7539, 0.7539, 0.753, 0.7471, 0.7439, 0.7358, 0.715, 0.7363, 0.6962, 0.6373, 0.6471, 0.6879, 0.6641, 0.6487, 0.6013, 0.6804, 0.689, 0.6453, 0.6205, 0.5718, 0.6037, 0.6393, 0.4591, 0.2772, 0.1422, 0.357, 0.1567, 0.3404, 0.568, 0.1673, 0.0353, 0.3203, 0.0824, 0.3467, 0.3768, 0.2451, 0.4364, -0.0644, 0.0438, 0.2785, 0.155, 0.0042, 0.1553, 0.0623, 0.0272, -0.056, -0.1829, -0.293, -0.044, -0.0454, -0.1149, -0.0207, -0.2012, -0.0276, 0.0609, -0.16, -0.018, 0.0799, -0.0975, -0.1053, -0.3481, -0.201]}, \"token.table\": {\"Topic\": [1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 5, 1, 2, 5, 1, 1, 2, 1, 5, 1, 2, 5, 2, 1, 2, 5, 5, 1, 2, 5, 1, 2, 5, 5, 1, 1, 2, 5, 5, 1, 2, 5, 1, 5, 1, 1, 2, 1, 2, 5, 1, 2, 5, 1, 5, 1, 2, 5, 5, 2, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 1, 2, 1, 2, 5, 1, 2, 5, 1, 1, 2, 5, 1, 2, 5, 2, 5, 1, 1, 1, 2, 5, 1, 2, 5, 1, 2, 1, 2, 5, 1, 2, 5, 1, 1, 1, 1, 1, 1, 2, 5, 2, 1, 1, 2, 5, 1, 1, 1, 2, 5, 1, 1, 2, 5, 1, 2, 5, 1, 5, 1, 1, 1, 1, 2, 5, 1, 5, 1, 1, 2, 5, 2, 1, 2, 5, 1, 5, 1, 2, 5, 1, 1, 2, 5, 1, 1, 1, 1, 2, 5, 1, 2, 5, 1, 2, 5, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 5, 2, 5, 1, 1, 2, 5, 1, 2, 2, 1, 1, 5, 1, 2, 1, 2, 5, 1, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 1, 5, 1, 2, 5, 2, 2, 1, 2, 5, 1, 2, 5, 1, 1, 5, 1, 2, 5, 1, 2, 5, 5, 1, 1, 5, 2, 1, 2, 2, 1, 5, 1, 1, 2, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 2, 5, 1, 2, 5, 1, 2, 5, 1, 1, 2, 5, 5, 1, 2, 5, 1, 2, 5, 1, 1, 5, 1, 1, 2, 5, 1, 2, 5, 1, 1, 2, 5, 1, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 1, 5, 2, 1, 1, 1, 5, 1, 2, 5, 1, 5, 1, 2, 5, 1, 5, 1, 2, 1, 2, 5, 2, 1, 2, 1, 1, 2, 1, 5, 1, 5, 1, 2, 1, 2, 5, 1, 5, 1, 1, 2, 1, 2, 5, 2, 5, 1, 2, 5, 1, 1, 2, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 1, 5, 1, 2, 1, 1, 1, 2, 5, 1, 2, 5, 1, 1, 2, 1, 5, 1, 2, 5, 1, 2, 5, 1, 5, 1, 1, 5, 1, 1, 2, 5, 1, 1, 1, 1, 1, 5, 1, 5, 1, 1, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 5, 1, 5, 2, 5, 1, 2, 5, 2, 2, 2, 1, 2, 5, 5, 1], \"Freq\": [0.2578480634706467, 0.47085298546813753, 0.27186154518100797, 0.7760069911323998, 0.16628721238551422, 0.05542907079517141, 0.6747932956351617, 0.13678242479091116, 0.1914953947072756, 0.03974655052690583, 0.059619825790358745, 0.8942973868553812, 0.1381386795752041, 0.8633667473450256, 0.20335795253717198, 0.347341320391958, 0.4497624789690738, 0.6494694295568371, 0.0492703205890064, 0.9361360911911216, 0.7783545725675007, 0.19458864314187518, 0.22253932363226875, 0.6983130500184985, 0.0767376978042306, 0.9654697749219121, 0.32172660069801234, 0.3060031202127711, 0.37252553765033003, 0.9601108872068582, 0.1547783093435331, 0.21882450631327094, 0.6271190119953496, 0.7085456975910437, 0.149167515282325, 0.11187563646174374, 0.9717034057032486, 0.9244240893554813, 0.2176220362443959, 0.18010099551260353, 0.6028380544241312, 0.9567281613688065, 0.28424378344752793, 0.33634549528108704, 0.3791846805664578, 0.6494247148948952, 0.9861941492566174, 0.9003669128247301, 0.9003998063048118, 0.9898266709488628, 0.27173703647921293, 0.27093780990133287, 0.45715760254738175, 0.02225415804951764, 0.9346746380797409, 0.03709026341586274, 0.6494359873775395, 0.983980987686536, 0.38135047608888367, 0.3244824226370326, 0.2943758061036997, 0.9747323889886261, 0.9613830999406935, 0.2520879873011709, 0.1473745156529922, 0.6011328927950997, 0.16866678853627085, 0.4398565269671377, 0.3919022439519234, 0.25600322799438874, 0.7424093611837274, 0.9567325684455046, 0.10101993036900075, 0.08755060631980065, 0.808159442952006, 0.21322502119583808, 0.25556757859643003, 0.5323064358931561, 0.9679071062793349, 0.6484835660552616, 0.6484835660552616, 0.9839582824489741, 0.2236672921538004, 0.3878267726336539, 0.3878267726336539, 0.046454467535800174, 0.0812953181876503, 0.8710212662962532, 0.05698947404588156, 0.05698947404588156, 0.8833368477111642, 0.23037670694312115, 0.23129454242895034, 0.5387694301817216, 0.4445851380000193, 0.3759093849756261, 0.1807256658536664, 0.5957893543107562, 0.4030339749749233, 0.6494444147208829, 0.9224443618116648, 0.2654912536479443, 0.36537905205014115, 0.36800767832388315, 0.1520103251741186, 0.14676858982328694, 0.7023925370114447, 0.6493530847547785, 0.10516429152650056, 0.7887321864487542, 0.10516429152650056, 0.1278324005571701, 0.021305400092861682, 0.8522160037144673, 0.02820947544977728, 0.9591221652924276, 0.6492537050641245, 0.649402564438626, 0.3637798220380125, 0.07700448787665959, 0.5576187053137418, 0.3215069416846943, 0.4371893459357291, 0.24188139070670925, 0.24669005923754933, 0.7524046806745255, 0.1859243443707169, 0.17511478946544268, 0.6399256503922349, 0.6494702875653721, 0.9222533222717718, 0.9862371836574662, 0.6493763348703572, 0.6493683168452474, 0.6491707649143826, 0.924647696228441, 0.649490876334984, 0.36567923752848475, 0.31273907981658616, 0.32156243943523594, 0.9866476215266489, 0.8625324776624588, 0.26969163598408485, 0.34824259792119694, 0.38228134809394554, 0.6493746173501516, 0.6493206357324632, 0.24288604793703478, 0.2629337852270757, 0.49502489770024233, 0.9001915068120644, 0.28479700065543134, 0.3428398676368372, 0.37224825357408287, 0.33767288825428415, 0.2876472751795754, 0.37362879765173107, 0.6494283622287098, 0.9633015299948309, 0.6494636628359591, 0.9414512450005176, 0.6494452870477092, 0.076273588357146, 0.839009471928606, 0.076273588357146, 0.026564986413821663, 0.9696220041044907, 0.6488661185260289, 0.10865159795259913, 0.6519095877155948, 0.23705803189657992, 0.944090831629891, 0.16302739401633398, 0.580476327179371, 0.25689165117725354, 0.9414798662129173, 0.9773332148291037, 0.12669718368544988, 0.15066692113945393, 0.7225163718278359, 0.6490961259962325, 0.40127277860250465, 0.5042542881553598, 0.09587933648024448, 0.6494665470357947, 0.6494687501031083, 0.8629560388592888, 0.4441423556996884, 0.16325232533826384, 0.39132542691377953, 0.34776183733120447, 0.3827567392010112, 0.27121048949100224, 0.23872072863003282, 0.29354654190391594, 0.4683038217144185, 0.9872658703998015, 0.3118976201879151, 0.2570584781768531, 0.43100138174319036, 0.2684132884546361, 0.3213216770442518, 0.4103626236950686, 0.04098462732357729, 0.09563079708834701, 0.8743387162363155, 0.9698984635905398, 0.9808267611184353, 0.9772410591637537, 0.9004677474798086, 0.23942143110310643, 0.32531252746296524, 0.43589731402628346, 0.6476849908096334, 0.6476849908096334, 0.9979602453889977, 0.6494760041437033, 0.13221087936736498, 0.8667157647416148, 0.0709868338874391, 0.9228288405367081, 0.261078689513206, 0.40144357634826305, 0.3368757284041368, 0.9003169940524192, 0.11420842084477356, 0.05409872566331379, 0.8295137935041449, 0.30508258337829836, 0.05292248895337828, 0.644409130197018, 0.1312313248611518, 0.5726457812122987, 0.29586698695968766, 0.8629167076035354, 0.48143224603894685, 0.5165034692603271, 0.32987544826269255, 0.3228192889415654, 0.3475158465655103, 0.9867334929236965, 0.9342139616316084, 0.20014967630917885, 0.26862193399389794, 0.5319767712428174, 0.021117292314252172, 0.06335187694275651, 0.9080435695128435, 0.6493597364563778, 0.02692500356930645, 0.9693001284950321, 0.15689112114626766, 0.36776628397727257, 0.47573436734674707, 0.28998657639159187, 0.47959318403224804, 0.23050215046511147, 0.9630698189742627, 0.9244151792620604, 0.7925486626812902, 0.19813716567032255, 0.9900035245750145, 0.8629342234707555, 0.996653385875987, 0.9348910393079197, 0.6493121827303662, 0.9567443113333192, 0.6494636268343159, 0.02226038126583833, 0.9720366486082738, 0.7537984420198481, 0.12563307366997467, 0.12563307366997467, 0.3079904187131602, 0.199087729223424, 0.4934653117503671, 0.25014473126765624, 0.3034931336707109, 0.44575554007885665, 0.11050603198967944, 0.8287952399225957, 0.06314630399410254, 0.9342002183048644, 0.9942930129136659, 0.218710776328674, 0.38385972988297884, 0.39725018557657116, 0.3861154996975488, 0.42348151579731164, 0.18683008049881394, 0.8626188435096708, 0.14586917416188083, 0.5581081446193702, 0.2980804863308, 0.9601374777041763, 0.2785073177831136, 0.3083473875455901, 0.4127876317142577, 0.20292191430343168, 0.21440806039607876, 0.5819647353607852, 0.94138169356435, 0.8625155148990785, 0.9857213129557356, 0.90057578294, 0.12704906150034864, 0.7013108194819244, 0.17278672364047415, 0.15759003083521148, 0.17957933746338053, 0.6633440832830996, 0.649466620799127, 0.3388961534511083, 0.6263735801717036, 0.03505822277080431, 0.6494890318445987, 0.729538725545469, 0.22798085173295904, 0.04559617034659181, 0.3626609640391341, 0.34467777573967295, 0.29222680986624444, 0.1993642080224866, 0.328398768316924, 0.4719642475634377, 0.6493497503273696, 0.9414529022913851, 0.9875165220246748, 0.9222637247949957, 0.6492669779808298, 0.970870190749705, 0.6494913486719911, 0.9679146140675366, 0.5820590250205457, 0.19401967500684858, 0.22312262625787585, 0.13178363346956903, 0.871236243493262, 0.10351961437929018, 0.7542143333348285, 0.1330966470590874, 0.09025491049336391, 0.9025491049336392, 0.6494680409112208, 0.9226625169574572, 0.27322710217891216, 0.28307312387905315, 0.443070976506344, 0.9346598620122144, 0.9416869992238132, 0.9690518523627608, 0.9539123772686965, 0.6362115665795118, 0.3622871420799998, 0.8351692636902276, 0.15184895703458684, 0.9203625538810575, 0.08765357656010071, 0.9530656279102594, 0.13615223255860848, 0.29740550178336733, 0.36233525255439253, 0.3400865966957895, 0.6494756792916988, 0.9567373163988002, 0.6494426654012958, 0.6493629636969076, 0.9617404162729022, 0.09446262245694242, 0.07557009796555393, 0.8312710776210933, 0.035118975744430105, 0.9482123450996127, 0.3236227810800162, 0.2724375452969524, 0.4028773397118569, 0.6494793612305538, 0.6494061849127608, 0.9623038236429173, 0.2488122245556937, 0.3033272625201434, 0.4473028756057415, 0.19765502788649325, 0.3953100557729865, 0.4059530188130284, 0.21802799086078303, 0.25684870973040486, 0.5249825121554672, 0.20529533431476663, 0.3103677495152377, 0.4849496086175589, 0.8629319584754627, 0.06529343367501642, 0.9304314298689839, 0.9708668455711825, 0.9341905626860124, 0.6494702391289924, 0.6494528999668358, 0.2338629941179459, 0.32972575296809487, 0.43612288092265583, 0.19793837362529093, 0.15148344920302878, 0.6503689419116702, 0.6493874819900001, 0.6489955609346937, 0.9509045198872855, 0.08226587480227446, 0.9166768906539154, 0.49297084594310625, 0.2431089103281072, 0.26336798618878277, 0.25520237316505817, 0.2602063412663338, 0.4853849058237381, 0.6493525701921856, 0.9567412123212653, 0.6494501020774887, 0.02304074432043484, 0.9677112614582634, 0.6491314308627172, 0.26665183617563554, 0.20097404401414892, 0.5326468944296562, 0.8625206504786643, 0.6488911588039146, 0.9004193205133595, 0.8625624522042123, 0.6494389880987131, 0.9567473469191193, 0.9245894661141665, 0.18491789322283328, 0.6493168224416367, 0.9414637935565203, 0.09449454243708233, 0.10394399668079056, 0.8032036107151997, 0.5586984241304157, 0.20951190904890588, 0.22946542419642074, 0.25602600468492953, 0.3378120895148376, 0.4062634866007389, 0.029909458124932668, 0.9571026599978454, 0.6493524189895862, 0.9679071650763731, 0.9565092365112743, 0.963093127829841, 0.2830556486138444, 0.3995439347741573, 0.3168045913331874, 0.9226566793951401, 0.9222455422114267, 0.9435971540238376, 0.25283072842741217, 0.3203174605801837, 0.42741597030088635, 0.9839872352483202, 0.649157346175919], \"Term\": [\"acquisition\", \"acquisition\", \"acquisition\", \"adopt\", \"adopt\", \"adopt\", \"adoption\", \"adoption\", \"adoption\", \"african\", \"african\", \"african\", \"ai\", \"ai\", \"also\", \"also\", \"also\", \"amend\", \"appealed\", \"appealed\", \"applied\", \"applied\", \"arrangement\", \"arrangement\", \"arrangement\", \"asserts\", \"asset\", \"asset\", \"asset\", \"assistance\", \"audit\", \"audit\", \"audit\", \"august\", \"august\", \"august\", \"automate\", \"beat\", \"benefit\", \"benefit\", \"benefit\", \"bethesda\", \"billion\", \"billion\", \"billion\", \"bitkom\", \"black\", \"boeing\", \"boldly\", \"bundled\", \"business\", \"business\", \"business\", \"c\", \"c\", \"c\", \"caput\", \"carbon\", \"charge\", \"charge\", \"charge\", \"chat\", \"citizenship\", \"cloud\", \"cloud\", \"cloud\", \"commercial\", \"commercial\", \"commercial\", \"commodity\", \"commodity\", \"communicated\", \"community\", \"community\", \"community\", \"company\", \"company\", \"company\", \"computershare\", \"concept\", \"concept\", \"copilot\", \"cost\", \"cost\", \"cost\", \"critical\", \"critical\", \"critical\", \"culture\", \"culture\", \"culture\", \"customer\", \"customer\", \"customer\", \"decreased\", \"decreased\", \"decreased\", \"deferral\", \"deferral\", \"deficiency\", \"denmark\", \"device\", \"device\", \"device\", \"digital\", \"digital\", \"digital\", \"dismiss\", \"display\", \"display\", \"display\", \"distinct\", \"distinct\", \"distinct\", \"diversity\", \"diversity\", \"dna\", \"donate\", \"driven\", \"driven\", \"driven\", \"due\", \"due\", \"due\", \"element\", \"element\", \"employee\", \"employee\", \"employee\", \"engineered\", \"entertain\", \"environmental\", \"equality\", \"esports\", \"essence\", \"establish\", \"evident\", \"expense\", \"expense\", \"expense\", \"expired\", \"extensibility\", \"fair\", \"fair\", \"fair\", \"fastest\", \"feasible\", \"financial\", \"financial\", \"financial\", \"firstline\", \"fiscal\", \"fiscal\", \"fiscal\", \"foreign\", \"foreign\", \"foreign\", \"forewarning\", \"fundamental\", \"ge\", \"geared\", \"geographically\", \"germany\", \"germany\", \"germany\", \"github\", \"github\", \"globalization\", \"group\", \"group\", \"group\", \"guarantee\", \"hardware\", \"hardware\", \"hardware\", \"harmonizing\", \"healthcare\", \"help\", \"help\", \"help\", \"hershey\", \"higher\", \"higher\", \"higher\", \"hoffman\", \"hostage\", \"hr\", \"impact\", \"impact\", \"impact\", \"impairment\", \"impairment\", \"impairment\", \"including\", \"including\", \"including\", \"inclusion\", \"income\", \"income\", \"income\", \"increased\", \"increased\", \"increased\", \"india\", \"india\", \"india\", \"inequity\", \"injunction\", \"injustice\", \"inter\", \"investment\", \"investment\", \"investment\", \"involves\", \"involves\", \"itc\", \"jeff\", \"job\", \"job\", \"joint\", \"joint\", \"june\", \"june\", \"june\", \"lake\", \"learning\", \"learning\", \"learning\", \"lease\", \"lease\", \"lease\", \"licensing\", \"licensing\", \"licensing\", \"lie\", \"linkedin\", \"linkedin\", \"loss\", \"loss\", \"loss\", \"lumia\", \"lync\", \"management\", \"management\", \"management\", \"manager\", \"manager\", \"manager\", \"mathematics\", \"metric\", \"metric\", \"microsoft\", \"microsoft\", \"microsoft\", \"million\", \"million\", \"million\", \"minority\", \"mixer\", \"modified\", \"modified\", \"mojang\", \"monolithic\", \"motorola\", \"mpsa\", \"multiplier\", \"municipal\", \"narrower\", \"nd\", \"nd\", \"negatively\", \"negatively\", \"negatively\", \"net\", \"net\", \"net\", \"new\", \"new\", \"new\", \"nokia\", \"nokia\", \"nokia\", \"novell\", \"nuance\", \"office\", \"office\", \"office\", \"offset\", \"offset\", \"offset\", \"oil\", \"online\", \"online\", \"online\", \"openai\", \"operating\", \"operating\", \"operating\", \"organization\", \"organization\", \"organization\", \"outperforming\", \"pak\", \"pandemic\", \"partes\", \"patent\", \"patent\", \"patent\", \"performance\", \"performance\", \"performance\", \"pga\", \"phone\", \"phone\", \"phone\", \"piloting\", \"previous\", \"previous\", \"previous\", \"primarily\", \"primarily\", \"primarily\", \"product\", \"product\", \"product\", \"profitable\", \"prominent\", \"racial\", \"rand\", \"ratable\", \"realization\", \"realm\", \"reasonableness\", \"reduction\", \"reduction\", \"reduction\", \"refer\", \"refer\", \"reflecting\", \"reflecting\", \"reflecting\", \"regulation\", \"regulation\", \"reid\", \"reinventing\", \"related\", \"related\", \"related\", \"replaced\", \"requiring\", \"resale\", \"restate\", \"restructuring\", \"restructuring\", \"retained\", \"retained\", \"retrospective\", \"retrospective\", \"retrospectively\", \"retrospectively\", \"revenue\", \"revenue\", \"revenue\", \"revolutionizing\", \"reward\", \"roam\", \"roughly\", \"rt\", \"sa\", \"sa\", \"sa\", \"safety\", \"safety\", \"sale\", \"sale\", \"sale\", \"scaling\", \"scorpio\", \"seamless\", \"security\", \"security\", \"security\", \"segment\", \"segment\", \"segment\", \"service\", \"service\", \"service\", \"share\", \"share\", \"share\", \"showcase\", \"skill\", \"skill\", \"smartphone\", \"smartphones\", \"smile\", \"societally\", \"software\", \"software\", \"software\", \"solution\", \"solution\", \"solution\", \"something\", \"spear\", \"specified\", \"ssp\", \"ssp\", \"standard\", \"standard\", \"standard\", \"statement\", \"statement\", \"statement\", \"struck\", \"submit\", \"surround\", \"sustainability\", \"sustainability\", \"tailor\", \"tax\", \"tax\", \"tax\", \"tetra\", \"theorized\", \"thoughtful\", \"timeless\", \"tip\", \"topic\", \"toughest\", \"toughest\", \"tour\", \"towards\", \"uncertain\", \"uncertain\", \"uncertain\", \"unfavorable\", \"unfavorable\", \"unfavorable\", \"value\", \"value\", \"value\", \"variable\", \"variable\", \"vigorous\", \"viva\", \"voucher\", \"waste\", \"window\", \"window\", \"window\", \"wireless\", \"wisconsin\", \"xp\", \"year\", \"year\", \"year\", \"zenimax\", \"zika\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [1, 2, 3, 4, 5]};\n",
              "\n",
              "function LDAvis_load_lib(url, callback){\n",
              "  var s = document.createElement('script');\n",
              "  s.src = url;\n",
              "  s.async = true;\n",
              "  s.onreadystatechange = s.onload = callback;\n",
              "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
              "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
              "}\n",
              "\n",
              "if(typeof(LDAvis) !== \"undefined\"){\n",
              "   // already loaded: just create the visualization\n",
              "   !function(LDAvis){\n",
              "       new LDAvis(\"#\" + \"ldavis_el23421372174127047206590980185\", ldavis_el23421372174127047206590980185_data);\n",
              "   }(LDAvis);\n",
              "}else if(typeof define === \"function\" && define.amd){\n",
              "   // require.js is available: use it to load d3/LDAvis\n",
              "   require.config({paths: {d3: \"https://d3js.org/d3.v5\"}});\n",
              "   require([\"d3\"], function(d3){\n",
              "      window.d3 = d3;\n",
              "      LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
              "        new LDAvis(\"#\" + \"ldavis_el23421372174127047206590980185\", ldavis_el23421372174127047206590980185_data);\n",
              "      });\n",
              "    });\n",
              "}else{\n",
              "    // require.js not available: dynamically load d3 & LDAvis\n",
              "    LDAvis_load_lib(\"https://d3js.org/d3.v5.js\", function(){\n",
              "         LDAvis_load_lib(\"https://cdn.jsdelivr.net/gh/bmabey/pyLDAvis@3.4.0/pyLDAvis/js/ldavis.v3.0.0.js\", function(){\n",
              "                 new LDAvis(\"#\" + \"ldavis_el23421372174127047206590980185\", ldavis_el23421372174127047206590980185_data);\n",
              "            })\n",
              "         });\n",
              "}\n",
              "</script>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Set number of topics for LDA\n",
        "num_topics = 5000\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = LdaModel(\n",
        "    corpus=corpus,\n",
        "    id2word=dictionary,\n",
        "    num_topics=num_topics,\n",
        "    alpha='auto',\n",
        "    eta='auto',\n",
        "    iterations=100,\n",
        "    passes=20,\n",
        "    eval_every=None,\n",
        "    random_state=42,\n",
        "    per_word_topics=True\n",
        ")\n",
        "\n",
        "# Print topics\n",
        "topics = lda_model.print_topics(num_words=5)\n",
        "for topic in topics:\n",
        "    print(topic)\n",
        "\n",
        "# Evaluate model using coherence score\n",
        "coherence_model_lda = CoherenceModel(model=lda_model, texts=documents, dictionary=dictionary, coherence='c_v')\n",
        "coherence_score = coherence_model_lda.get_coherence()\n",
        "print(f'Coherence Score: {coherence_score:.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BhH3sxVxESm-",
        "outputId": "577c1f59-d13e-4f13-be37-7f3fafc47fa8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1301, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(4701, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(1928, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(4983, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(3330, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(997, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(538, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(387, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(478, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(472, '0.000*\"resilient\" + 0.000*\"responded\" + 0.000*\"residency\" + 0.000*\"requested\" + 0.000*\"respective\"')\n",
            "(1101, '0.003*\"revenue\" + 0.003*\"year\" + 0.003*\"service\" + 0.003*\"billion\" + 0.002*\"product\"')\n",
            "(2887, '0.003*\"year\" + 0.003*\"revenue\" + 0.002*\"service\" + 0.002*\"billion\" + 0.002*\"tax\"')\n",
            "(3729, '0.005*\"service\" + 0.004*\"product\" + 0.004*\"year\" + 0.004*\"revenue\" + 0.003*\"tax\"')\n",
            "(3628, '0.006*\"service\" + 0.005*\"year\" + 0.004*\"product\" + 0.004*\"revenue\" + 0.004*\"income\"')\n",
            "(3232, '0.006*\"revenue\" + 0.006*\"product\" + 0.005*\"service\" + 0.004*\"billion\" + 0.004*\"tax\"')\n",
            "(4108, '0.004*\"product\" + 0.003*\"year\" + 0.003*\"service\" + 0.003*\"revenue\" + 0.003*\"billion\"')\n",
            "(577, '0.008*\"revenue\" + 0.006*\"service\" + 0.006*\"year\" + 0.005*\"million\" + 0.005*\"fiscal\"')\n",
            "(1518, '0.146*\"copilot\" + 0.124*\"activision\" + 0.124*\"blizzard\" + 0.067*\"openai\" + 0.046*\"meta\"')\n",
            "(2954, '0.019*\"service\" + 0.015*\"tax\" + 0.013*\"cloud\" + 0.011*\"customer\" + 0.010*\"product\"')\n",
            "(1764, '0.014*\"revenue\" + 0.011*\"year\" + 0.011*\"billion\" + 0.010*\"service\" + 0.009*\"product\"')\n",
            "Coherence Score: 0.5450\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to calculate coherence scores\n",
        "def compute_coherence_scores(model, texts, dictionary):\n",
        "    coherence_types = ['c_v', 'u_mass', 'c_uci', 'c_npmi']\n",
        "    coherence_scores = {}\n",
        "\n",
        "    for coherence_type in coherence_types:\n",
        "        coherence_model = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence=coherence_type)\n",
        "        coherence_score = coherence_model.get_coherence()\n",
        "        coherence_scores[coherence_type] = coherence_score\n",
        "        print(f'Coherence Score ({coherence_type}): {coherence_score:.4f}')\n",
        "\n",
        "    return coherence_scores\n",
        "\n",
        "# Compute and print coherence scores\n",
        "coherence_scores = compute_coherence_scores(lda_model, documents, dictionary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "joLprNQPEUnp",
        "outputId": "1165e4c2-14ba-4f95-811b-15d972a7073c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coherence Score (c_v): 0.5450\n",
            "Coherence Score (u_mass): -0.2011\n",
            "Coherence Score (c_uci): -5.9950\n",
            "Coherence Score (c_npmi): -0.2227\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# coherence scores\n",
        "coherence_scores = {\n",
        "    'C_v': 0.5450,\n",
        "    'u_mass': -0.2011,\n",
        "    'c_uci': -5.9950,\n",
        "    'c_npmi': -0.2227\n",
        "}\n",
        "\n",
        "# Extract keys and values for plotting\n",
        "coherence_types = list(coherence_scores.keys())\n",
        "scores = list(coherence_scores.values())\n",
        "\n",
        "# Plotting the bar chart\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.bar(coherence_types, scores, color=['skyblue', 'salmon', 'limegreen', 'gold'])\n",
        "\n",
        "\n",
        "plt.title('LDA Model Coherence Scores by Coherence Type')\n",
        "plt.xlabel('Coherence Type')\n",
        "plt.ylabel('Coherence Score')\n",
        "\n",
        "# Adding value labels on the bars\n",
        "for i in range(len(scores)):\n",
        "    plt.text(coherence_types[i], scores[i] + 0.01, f'{scores[i]:.4f}', ha='center')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "t9gwNjCTEbLr",
        "outputId": "ed847c0e-34ce-4a16-fedb-de766a5e7d35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:897: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  x = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n",
            "/usr/local/lib/python3.10/dist-packages/matplotlib/text.py:757: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  posx = float(self.convert_xunits(self._x))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAArEAAAIjCAYAAAAUdENlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdvUlEQVR4nO3deZxO5f/H8fdt9mE2DGMZM2asIxNNlox9abSIFkKRirSIQkVlS0hSIqV8i/KVSqRvCypUdkWTbazZsovZLMPMXL8/5jd3brOYmxm3w+v5eNyPOte5zjmfc+5zz7yduc65bcYYIwAAAMBCirm6AAAAAMBZhFgAAABYDiEWAAAAlkOIBQAAgOUQYgEAAGA5hFgAAABYDiEWAAAAlkOIBQAAgOUQYgEAAGA5hFjAYoYPHy6bzXZJy/bo0UPh4eGFW1AB/fzzz7LZbPryyy9dsn1cfXbv3i2bzaY33njD1aVckvDwcN15552uLgO4bhFicVWbPn26bDabfv/99zz7ZP8izH55eHiodOnSatSokV588UXt3bs33208//zzstlsuv/++52qLTw8XDabTa1bt851/tSpU+015Vf/1eyrr77SbbfdptKlS8vT01Ply5dXp06dtHjxYleXds1atmyZbrvtNlWoUEHe3t6qVKmS2rVrp08//dTVpVnezp071bt3b0VERMjb21v+/v6KjY3V22+/rdOnT7u6vGtK8+bNHX4u5/UaPny4q0uFhbm7ugCgsHTp0kW33367MjMzdeLECf3222+aMGGC3n77bX344Yfq3LlzjmWMMZo1a5bCw8P1zTffKCUlRX5+fgXepre3t5YsWaJDhw4pJCTEYd7MmTPl7e2tM2fOXPa+XWnGGD3yyCOaPn266tatq/79+yskJEQHDx7UV199pVatWmn58uVq1KiRq0u9psyePVv333+/6tSpo379+ikoKEi7du3Sr7/+qqlTp6pr166uLtGyvvvuO3Xs2FFeXl7q3r27brjhBp09e1bLli3Tc889p02bNumDDz5wdZnXjJdeekk9e/a0T//222+aOHGiXnzxRdWsWdPeHh0d7YrycI0gxOKacdNNN+nBBx90aNuzZ49uvfVWPfTQQ6pZs6ZuvPFGh/k///yz/v77by1evFhxcXGaO3euHnrooQJvMzY2Vr/99ps+//xz9evXz97+999/a+nSpbr77rs1Z86cy9sxFxg/frymT5+uZ555Rm+++abD8IWXXnpJM2bMkLv71fnj4+TJkypevLiry7gkw4cPV1RUlFatWiVPT0+HeUeOHLlidRhjdObMGfn4+FyxbRalXbt2qXPnzgoLC9PixYtVrlw5+7ynnnpKO3bs0HfffefCCvOWnp6uzMzMHOfD1a5NmzYO097e3po4caLatGmj5s2bu6YoXHMYToBrWlhYmKZPn66zZ8/q9ddfzzF/5syZioqKUosWLdS6dWvNnDnTqfV7e3vrnnvuyfGn3lmzZikoKEhxcXG5Lrd48WI1adJExYsXV2BgoNq3b6+EhIQc/ZYtW6Z69erJ29tbkZGRev/99/Os5b///a9iYmLk4+OjkiVLqnPnztq3b59T+yNJp0+f1pgxY1SjRg298cYbuY6/7datm+rXr2+f/uuvv9SxY0eVLFlSvr6+atiwYZ6hIDMzU6NGjVLFihXl7e2tVq1aaceOHTn6rV69Wm3btlVAQIB8fX3VrFkzLV++3KFP9vjgzZs3q2vXrgoKClLjxo2dOibNmzfXDTfcoM2bN6tFixby9fVVhQoVcj1fzpw5o+HDh6tatWry9vZWuXLldM8992jnzp0O+zdhwgTVqlVL3t7eKlu2rHr37q0TJ07kccT/tXPnTtWrVy/XwFKmTJkcx/Htt99W7dq15e3treDgYLVt29Zh6Ep6erpGjhypyMhIeXl5KTw8XC+++KLS0tIc1pU9tnPhwoW6+eab5ePjYz/XEhMT9cwzzyg0NFReXl6qUqWKxo4dq8zMTId1fPbZZ4qJiZGfn5/8/f1Vu3Ztvf322xfd52xvvfWWwsLC5OPjo2bNmmnjxo32edOmTZPNZtMff/yRY7nRo0fLzc1N+/fvz3Pdr7/+ulJTU/Xhhx86BNhsVapUcfhHaEGPW7Zly5apfv368vb2VkREhD755JMcfQpyHM8fIzxhwgT79jdv3ixJ2rJli+677z6VLFlS3t7euvnmm/W///3PYTvZQ7CWL1+u/v37Kzg4WMWLF9fdd9+to0eP5qhr/vz5atasmf19q1evXo6fZwX5LDrLmfc0+zO6du1aNWrUSD4+PqpcubKmTJmSY9m0tDQNGzZMVapUkZeXl0JDQ/X888/n+d7B4gxwFZs2bZqRZH777bc8++zatctIMuPGjcuzT2RkpAkODnZoO3PmjAkMDDQjR440xhjzySefGDc3N3Pw4MEC1RYWFmbuuOMO88MPPxhJZseOHfZ5derUMb179861/h9//NG4u7ubatWqmddff92MGDHClC5d2gQFBZldu3bZ+61fv974+PiYSpUqmTFjxpiRI0easmXLmujoaHPhR/fVV181NpvN3H///ebdd9+1rzM8PNycOHHC3u+hhx4yYWFh+e5X9v688sorBToOhw4dMmXLljV+fn7mpZdeMm+++aa58cYbTbFixczcuXPt/ZYsWWIkmbp165qYmBjz1ltvmeHDhxtfX19Tv359h3UuWrTIeHp6mltuucWMHz/evPXWWyY6Otp4enqa1atX2/sNGzbMSDJRUVGmffv25t133zWTJ0926pg0a9bMlC9f3oSGhpp+/fqZd99917Rs2dJIMt9//729X3p6umnVqpWRZDp37mzeeecdM2bMGNOyZUszb948e7+ePXsad3d306tXLzNlyhTzwgsvmOLFi5t69eqZs2fP5nssq1WrZkJDQ82+ffsuetx79OhhJJnbbrvNTJgwwbzxxhumffv2ZtKkSfY+Dz30kJFk7rvvPjN58mTTvXt3I8l06NDBYV1hYWGmSpUqJigoyAwaNMhMmTLFLFmyxJw8edJER0ebUqVKmRdffNFMmTLFdO/e3dhsNtOvXz/78tnnTKtWrczkyZPN5MmTTZ8+fUzHjh3z3Yfsz27t2rVNeHi4GTt2rBkxYoQpWbKkCQ4ONocOHTLGGJOcnGx8fHzMgAEDcqwjKirKtGzZMt/tVKhQwURERFzskNo5c9yqV69uypYta1588UXzzjvvmJtuusnYbDazceNGe7+CHsfs4xEVFWUiIiLMa6+9Zt566y2zZ88es3HjRhMQEGCioqLM2LFjzTvvvGOaNm1qbDabw+cs+2dO3bp1TcuWLc2kSZPMgAEDjJubm+nUqZND/dOmTTM2m83ccMMNZtSoUWby5MmmZ8+eplu3bvY+Bf0sXszs2bONJLNkyRJjjHPvafZntEyZMqZPnz5m4sSJpnHjxkaS+fDDD+39MjIyzK233mp8fX3NM888Y95//33Tp08f4+7ubtq3b1/gWmEdhFhc1QorxLZv395IMklJSfa2L7/80kgy27dvN8Zk/VD19vY2b731VoFqyw6x6enpJiQkxB6GN2/ebCSZX375Jdf669SpY8qU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cWCFcdwuVNDjmJcyZcqoefPmev/99+3/kDlfQT4TF7r11lvl5+enMWPG5PhCluxzqDA+ixdT0Pc0PT3d4RGDZ8+e1fvvv6/g4GDFxMRIyjrO+/fv19SpU3Msf/r0aZ08efKy68XVhSuxsISPPvpICxYsyNF+/rMd161bp//+97/KzMxUYmKifvvtN/sNMDNmzLD/Uv30009ljNFdd92V67Zuv/12ubu7a+bMmbmO9cxLWFhYgb5Ccdy4cbrtttt0yy236NFHH9Xp06c1adIkBQQEOCw/YsQILViwQE2aNNGTTz6p9PR0TZo0SbVq1XIYqxkZGalXX31VgwcP1u7du9WhQwf5+flp165d+uqrr/TYY49p4MCBBd4PSfZvMBo/fryWLFmi++67TyEhITp06JDmzZunNWvW2G80GjRokGbNmqXbbrtNffv2VcmSJfXxxx9r165dmjNnjooVc+7fysWKFdN//vMf3XbbbapVq5YefvhhVahQQfv379eSJUvk7++vb775Jt91FMUx6d69uz755BP1799fa9asUZMmTXTy5En99NNPevLJJ9W+fXs1a9ZMvXv31pgxYxQfH69bb71VHh4e2r59u2bPnq23335b9913X57baN++vSpXrqx27dopMjLSvv5vvvlG9erVU7t27SRJLVq0ULdu3TRx4kRt375dbdu2VWZmppYuXaoWLVqoT58+uvHGG/XQQw/pgw8+UGJiopo1a6Y1a9bo448/VocOHdSiRYuL7vNzzz2n//3vf7rzzjvVo0cPxcTE6OTJk9qwYYO+/PJL7d69W6VLl1bPnj11/PhxtWzZUhUrVtSePXs0adIk1alTx+FqZl6qVKmixo0b64knnlBaWpomTJigUqVK5frn9+7du9vfu4L+2TkyMlKffvqp7r//ftWsWdPhG7tWrFih2bNnq0ePHpJUKMftQgU9jvmZPHmyGjdurNq1a6tXr16KiIjQ4cOHtXLlSv3999/6888/narJ399fb731lnr27Kl69erZn7P8559/6tSpU/r4448L5bNYEAV5T8uXL6+xY8dq9+7dqlatmj7//HPFx8frgw8+sP9lpFu3bvriiy/0+OOPa8mSJYqNjVVGRoa2bNmiL774wv4cZFxDrvDTEACnZD8uJq/Xvn377I+lyX65u7ubkiVLmgYNGpjBgwc7PKLKGGNq165tKlWqlO92mzdvbsqUKWPOnTuXZ5/sR2wVpP4LHxH2008/mdjYWOPj42P8/f1Nu3btzObNm3Ms/8svv5iYmBjj6elpIiIizJQpU+yPlbrQnDlzTOPGjU3x4sVN8eLFTY0aNcxTTz1ltm7dau9TkEdsne/LL780t956qylZsqRxd3c35cqVM/fff7/5+eefHfrt3LnT3HfffSYwMNB4e3ub+vXrm2+//dahT/YjtmbPnu3Qnv3+XfiYpD/++MPcc889plSpUsbLy8uEhYWZTp06mUWLFtn7ZB+Lo0eP5lp/QY5Js2bNTK1atXIsm9uxOnXqlHnppZdM5cqVjYeHhwkJCTH33Xef2blzp0O/Dz74wMTExBgfHx/j5+dnateubZ5//nlz4MCBXOvMNmvWLNO5c2cTGRlpfHx8jLe3t4mKijIvvfSSSU5Oduibnp5uxo0bZ2rUqGE8PT1NcHCwue2228zatWvtfc6dO2dGjBhhrzc0NNQMHjzY4TFNxuR/LqekpJjBgwebKlWqGE9PT1O6dGnTqFEj88Ybb9gfbZR9npQpU8Z4enqaSpUqmd69e1/0mcvnPx5v/PjxJjQ01Hh5eZkmTZqYP//8M9dlDh48aNzc3Ey1atXyXXdutm3bZnr16mXCw8ONp6en8fPzM7GxsWbSpEkOx+Ryj1uzZs1Ms2bNHNoKchwv9rjAnTt3mu7du5uQkBDj4eFhKlSoYO68807z5Zdf2vvk9TMn+/N3/iOujDHmf//7n2nUqJH9Z1H9+vXNrFmzHPoU5LN4Mbk9Yivbxd7T7M/o77//bm655Rbj7e1twsLCzDvvvJOj79mzZ83YsWNNrVq1jJeXlwkKCjIxMTFmxIgRDo9YxLXBZoyTdy4AAOAix44dU7ly5TR06NA879SHtVzsPW3evLmOHTvm9M15uPYxJhYAYBnTp09XRkaGunXr5upSUEh4T3GpGBMLALjqLV68WJs3b9aoUaPUoUOHHE8ugPXwnuJyEWIBAFe9V155RStWrFBsbKwmTZrk6nJQCHhPcbkYEwsAAADLYUwsAAAALIcQCwAAAMu5rsbEZmZm6sCBA/Lz8+Mr6QAAAK5CxhilpKSofPny+X5hznUVYg8cOKDQ0FBXlwEAAICL2LdvnypWrJjn/OsqxPr5+UnKOij+/v4urgYAAAAXSk5OVmhoqD235eW6CrHZQwj8/f0JsQAAAFexiw395MYuAAAAWA4hFgAAAJZDiAUAAIDlEGIBAABgOYRYAAAAWA4hFgAAAJZDiAUAAIDlEGIBAABgOYTY69TkyZMVHh4ub29vNWjQQGvWrMmz7/Tp02Wz2Rxe3t7eefZ//PHHZbPZNGHCBIf28PDwHOt57bXXHPqsX79eTZo0kbe3t0JDQ/X6669f1n4CAIBr03X1jV3I8vnnn6t///6aMmWKGjRooAkTJiguLk5bt25VmTJlcl3G399fW7dutU/n9S0aX331lVatWqXy5cvnOv+VV15Rr1697NPnf6VccnKybr31VrVu3VpTpkzRhg0b9MgjjygwMFCPPfbYpewqAAC4RnEl9jr05ptvqlevXnr44YcVFRWlKVOmyNfXVx999FGey9hsNoWEhNhfZcuWzdFn//79evrppzVz5kx5eHjkuh4/Pz+H9RQvXtw+b+bMmTp79qw++ugj1apVS507d1bfvn315ptvXv5OAwCAawoh9jpz9uxZrV27Vq1bt7a3FStWTK1bt9bKlSvzXC41NVVhYWEKDQ1V+/bttWnTJof5mZmZ6tatm5577jnVqlUrz/W89tprKlWqlOrWratx48YpPT3dPm/lypVq2rSpPD097W3ZV4hPnDhxKbsLAACuUQwnuM4cO3ZMGRkZOa6kli1bVlu2bMl1merVq+ujjz5SdHS0kpKS9MYbb6hRo0batGmTKlasKEkaO3as3N3d1bdv3zy33bdvX910000qWbKkVqxYocGDB+vgwYP2K62HDh1S5cqVc9SVPS8oKOiS9xsAAFxbCLG4qFtuuUW33HKLfbpRo0aqWbOm3n//fY0cOVJr167V22+/rXXr1uU5VlaS+vfvb///6OhoeXp6qnfv3hozZoy8vLyKdB8AAMC1heEE15nSpUvLzc1Nhw8fdmg/fPiwQkJCCrQODw8P1a1bVzt27JAkLV26VEeOHFGlSpXk7u4ud3d37dmzRwMGDFB4eHie62nQoIHS09O1e/duSVJISEiudWXPAwAAyEaIvc54enoqJiZGixYtsrdlZmZq0aJFDldb85ORkaENGzaoXLlykqRu3bpp/fr1io+Pt7/Kly+v5557TgsXLsxzPfHx8SpWrJj9iQi33HKLfv31V507d87e58cff1T16tUZSgAAABwwnOA61L9/fz300EO6+eabVb9+fU2Y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k08+KZvNpjVr1ujee+9VtWrVVKtWLfXv31+rVq3Kd9muXbvq/vvvd2g7d+6cSpcurU8++aQoy0YRCw8P14QJExza6tSpo+HDh190WZvNpvfff1933nmnfH19VbNmTa1cuVI7duxQ8+bNVbx4cTVq1Eg7d+60L7Nz5061b99eZcuWVYkSJVSvXj399NNPDut99913VbVqVXl7e6ts2bK677777PO+/PJL1a5dWz4+PipVqpRat26tkydPXtYxwJWVmZmp119/XVWqVJGXl5cqVaqkUaNG5bvMzz//LJvNpsTERHtbfHy8bDabdu/ebW9bvny5mjdvLl9fXwUFBSkuLk4nTpyQxHACK7uUc2b37t2y2WyaO3euWrRoIV9fX914441auXKlvc/06dMVGBioefPm2X/mxMXFad++ffY+w4cPV506dfTRRx+pUqVKKlGihJ588kllZGTo9ddfV0hIiMqUKZOjHoYTFBwhFvk6fvy4FixYoKeeekrFixfPMT8wMDDf5R944AF98803Sk1NtbctXLhQp06d0t13313Y5cJCRo4cqe7duys+Pl41atRQ165d1bt3bw0ePFi///67jDHq06ePvX9qaqpuv/12LVq0SH/88Yfatm2rdu3aae/evZKk33//XX379tUrr7yirVu3asGCBWratKkk6eDBg+rSpYseeeQRJSQk6Oeff9Y999wj/hBlLYMHD9Zrr72mIUOGaPPmzfr0009VtmzZy15vfHy8WrVqpaioKK1cuVLLli1Tu3btlJGRUQhVw5Uu55x56aWXNHDgQMXHx6tatWrq0qWL0tPT7fNPnTqlUaNG6ZNPPtHy5cuVmJiozp07O6xj586dmj9/vhYsWKBZs2bpww8/1B133KG///5bv/zyi8aOHauXX35Zq1evLtT9vm4YIB+rV682kszcuXMvaflz586Z0qVLm08++cTe1qVLF3P//fcXVolwkbCwMPPWW285tN14441m2LBhF11Wknn55Zft0ytXrjSSzIcffmhvmzVrlvH29s53PbVq1TKTJk0yxhgzZ84c4+/vb5KTk3P0W7t2rZFkdu/efdHacHVKTk42Xl5eZurUqU4tt2TJEiPJnDhxwt72xx9/GElm165dxpisn0mxsbF5rqNZs2amX79+l1A1XOlSz5ldu3YZSeY///mPvW3Tpk1GkklISDDGGDNt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P64FCxboqaeeUvHixXPMDwwMlJQVPtu3b6/jx4/rl19+0Y8//qi//vpL999/v0P/nTt3at68efr222/17bff6pdfftFrr71mnz9mzBh98sknmjJlijZt2qRnn31WDz74oH755ReH9QwaNEivvfaaEhISFB0dXeDlXnrpJY0fP16///673N3d9cgjj9jnfffdd7r77rt1++23648//tCiRYtUv359+/w+ffpo5cqV+uyzz7R+/Xp17NhRbdu21fbt2506pk2bNlVERIRmzJhhbzt37pxmzpzpUM+pU6c0atQoffLJJ1q+fLkSExPVuXNn+/ylS5eqe/fu6tevnzZv3qz3339f06dP16hRo5yqB8B1yADANW716tVGkpk7d26+/X744Qfj5uZm9u7da2/btGmTkWTWrFljjDFm2LBhxtfX1yQnJ9v7PPfcc6ZBgwbGGGPOnDljfH19zYoVKxzW/eijj5ouXboYY4xZsmSJkWTmzZtnn+/Mcj/99JN9/nfffWckmdOnTxtjjLnlllvMAw88kOv+7dmzx7i5uZn9+/c7tLdq1coMHjw432NjjDEPPfSQad++vX167NixpmbNmvbpOXPmmBIlSpjU1FRjjDHTpk0zksyqVavsfRISEowks3r1avu2R48e7bCdGTNmmHLlyl20HgDXt6trABYAFAFTwG/XTkhIUGhoqEJDQ+1tUVFRCgwMVEJCgurVqydJCg8Pl5+fn71PuXLldOTIEUnSjh07dOrUKbVp08Zh3WfPnlXdunUd2m6++Wb7/zuzXHR0tMO2JenIkSOqVKmS4uPj1atXr1z3b8OGDcrIyFC1atUc2tPS0lSqVKlcl8lPjx499PLLL2vVqlVq2LChpk+frk6dOjlc7XZ3d7cfN0mqUaOG/XjWr19ff/75p5YvX+5w5TUjI0NnzpzRqVOn5Ovr63RdAK4PhFgA17yqVavKZrMV2s1bHh4eDtM2m02ZmZmSpNTUVElZf9avUKGCQz8vLy+H6fPDnjPLnb99m80mSfbt+/j45Fl3amqq3NzctHbtWrm5uTnMK1GiRJ7L5aVMmTJq166dpk2bpsqVK2v+/PlOP60gNTVVI0aM0D333JNjnre3t9M1Abh+EGIBXPNKliypuLg4TZ48WX379s0xLjYxMVGBgYGqWbOm9u3bp3379tmvxm7evFmJiYmKiooq0LaioqLk5eWlvXv3qlmzZgWu8VKXu1B0dLQWLVqkhx9+OMe8unXrKiMjQ0eOHLHffHW5evbsqS5duqhixYqKjIxUbGysw/z09HT9/vvv9nG5W7duVWJiomrWrClJuummm7R161ZVqVKlUOoBcP0gxAK4LkyePFmxsbGqX7++XnnlFUVHRys9PV0//vij3nvvPSUkJKh169aqXbu2HnjgAU2YMEHp6el68skn1axZM4c//efHz89PAwcO1LPPPqvMzEw1btxYSUlJWr58ufz9/fXQQw8V6nIXGjZsmFq1aqXIyEh17txZ6enp+v777/XCCy+oWrVqeuCBB9S9e3eNHz9edevW1dGjR7Vo0SJFR0frjjvuKPDxzBYXFyd/f3+9+uqreuWVV3LM9/Dw0NNPP62JEyfK3d1dffr0UcOGDe2hdujQobrzzjtVqVIl3XfffSpWrJj+/PNPbdy4Ua+++qrT9QC4fvB0AgDXhYiICK1bt04tWrTQgAEDdMMNN6hNmzZatGiR3nvvPUlZf5r/+uuvFRQUpKZNm6p169aKiIjQ559/7tS2Ro4cqSFDhmjMmDGqWbOm2rZtq++++06VK1cukuXO17x5c82ePVv/+9//VKdOHbVs2VJr1qyxz582bZq6d++uAQMGqHr16urQoYN+++03VapUyal9zFasWDH16NFDGRkZ6t69e475vr6+euGFF9S1a1fFxsaqRIkSDsczLi5O3377rX744QfVq1dPDRs21FtvvaWwsLBLqgfA9cNmCnrHAwAAuXj00Ud19OhR/e9//3Nonz59up555hklJia6pjAA1zSGEwAALklSUpI2bNigTz/9NEeABYCiRogFAFyS9u3ba82aNXr88cdzPBoMAIoawwkAAABgOdzYBQAAAMshxAIAAMByCLEAAACwHEIsAAAALIcQCwAAAMshxAIAAMByCLEAAACwHEIsAAAALOf/AIITDKBiFcdpAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from gensim.models import CoherenceModel\n",
        "\n",
        "# different number of topics\n",
        "num_topics_list = [5, 50, 100, 500, 1000, 2000, 3000, 5000]\n",
        "best_coherence = 0\n",
        "best_model = None\n",
        "\n",
        "for num_topics in num_topics_list:\n",
        "\n",
        "    lda_model = LdaModel(\n",
        "    corpus=corpus,\n",
        "    id2word=dictionary,\n",
        "    num_topics=num_topics,\n",
        "    alpha='auto',\n",
        "    eta='auto',\n",
        "    iterations=100,\n",
        "    passes=20,\n",
        "    eval_every=None,\n",
        "    random_state=42,\n",
        "    per_word_topics=True\n",
        ")\n",
        "\n",
        "\n",
        "    coherence_model_lda = CoherenceModel(model=lda_model, texts=documents, dictionary=dictionary, coherence='c_v')\n",
        "    coherence_score = coherence_model_lda.get_coherence()\n",
        "    print(f'Number of Topics: {num_topics}, Coherence Score: {coherence_score:.4f}')\n",
        "\n",
        "\n",
        "    if coherence_score > best_coherence:\n",
        "        best_coherence = coherence_score\n",
        "        best_model = lda_model\n",
        "\n",
        "print(f'Best Coherence Score: {best_coherence:.4f}')"
      ],
      "metadata": {
        "id": "d4eDYmr9HW-3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "398b5b67-1d8b-4d4d-c40b-cf5120a53823"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of Topics: 5, Coherence Score: 0.3241\n",
            "Number of Topics: 50, Coherence Score: 0.3259\n",
            "Number of Topics: 100, Coherence Score: 0.3202\n",
            "Number of Topics: 500, Coherence Score: 0.3447\n",
            "Number of Topics: 1000, Coherence Score: 0.4006\n",
            "Number of Topics: 2000, Coherence Score: 0.4671\n",
            "Number of Topics: 3000, Coherence Score: 0.5048\n",
            "Number of Topics: 5000, Coherence Score: 0.5451\n",
            "Best Coherence Score: 0.5451\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# coherence_scores\n",
        "coherence_scores_dicts = [{'score': '0.3241'}, {'score': '0.3259'}, {'score': '0.3202'}, {'score': '0.3447'}, {'score': '0.4006'}, {'score': '0.4671'}, {'score': '0.5048'}, {'score': '0.5450'}]\n",
        "\n",
        "# Extracting scores and converting to float\n",
        "coherence_scores = [float(score_dict['score']) for score_dict in coherence_scores_dicts]\n",
        "\n",
        "print(coherence_scores)  # Should be a list of floats"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jscoFnInX6N9",
        "outputId": "29a6c949-c37b-4915-bc41-e7fd4dda5dca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.3241, 0.3259, 0.3202, 0.3447, 0.4006, 0.4671, 0.5048, 0.545]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(num_topics_list, coherence_scores, marker='o', linestyle='-', color='b')\n",
        "plt.title('Coherence Score vs Number of Topics')\n",
        "plt.xlabel('Number of Topics')\n",
        "plt.ylabel('Coherence Score (c_v)')\n",
        "plt.xticks(num_topics_list)\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "grB85yKBX-xN",
        "outputId": "c661faf8-469c-4734-99b7-72f87df50630"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py:283: DeprecationWarning: `should_run_async` will not call `transform_cell` automatically in the future. Please pass the result to `transformed_cell` argument and any exception that happen during thetransform in `preprocessing_exc_tuple` in IPython 7.17 and above.\n",
            "  and should_run_async(code)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Elasticsearch set-up\n"
      ],
      "metadata": {
        "id": "EnQ1VBCjuarl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%capture\n",
        "\n",
        "!pip install elasticsearch==7.17.0\n",
        "!apt install default-jdk > /dev/null"
      ],
      "metadata": {
        "id": "jqLBPdd1ufKQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "  import os\n",
        "  import elasticsearch\n",
        "  from elasticsearch import Elasticsearch\n",
        "  import numpy as np\n",
        "  import pandas as pd\n",
        "  import sys\n",
        "  import json\n",
        "  from ast import literal_eval\n",
        "  from tqdm import tqdm\n",
        "  import datetime\n",
        "  from elasticsearch import helpers\n",
        "\n",
        "except Exception as e:\n",
        "  print(f\"error: {e}\")"
      ],
      "metadata": {
        "id": "ChhIvRXwulka"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Download & extract Elasticsearch 7.0.0\n",
        "\n",
        "!wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.0.0-linux-x86_64.tar.gz -q\n",
        "!tar -xzf elasticsearch-7.0.0-linux-x86_64.tar.gz\n",
        "!chown -R daemon:daemon elasticsearch-7.0.0"
      ],
      "metadata": {
        "id": "n7gMqpAfuoCu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating daemon instance of elasticsearch\n",
        "import os\n",
        "from subprocess import Popen, PIPE, STDOUT\n",
        "es_server = Popen(['elasticsearch-7.0.0/bin/elasticsearch'],\n",
        "                  stdout=PIPE, stderr=STDOUT,\n",
        "                  preexec_fn=lambda: os.setuid(1)  # as daemon\n",
        "                 )"
      ],
      "metadata": {
        "id": "TRDWLZEvuquz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if elasticsearch is running\n",
        "!curl -sX GET \"localhost:9200/\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qhzVal8Ouu10",
        "outputId": "21a3d25b-4d94-4907-a19b-c425163a1e57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\n",
            "  \"name\" : \"44ff700ff19a\",\n",
            "  \"cluster_name\" : \"elasticsearch\",\n",
            "  \"cluster_uuid\" : \"njZs3iZlTeKTydd-pq_6qQ\",\n",
            "  \"version\" : {\n",
            "    \"number\" : \"7.0.0\",\n",
            "    \"build_flavor\" : \"default\",\n",
            "    \"build_type\" : \"tar\",\n",
            "    \"build_hash\" : \"b7e28a7\",\n",
            "    \"build_date\" : \"2019-04-05T22:55:32.697037Z\",\n",
            "    \"build_snapshot\" : false,\n",
            "    \"lucene_version\" : \"8.0.0\",\n",
            "    \"minimum_wire_compatibility_version\" : \"6.7.0\",\n",
            "    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"\n",
            "  },\n",
            "  \"tagline\" : \"You Know, for Search\"\n",
            "}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "es = Elasticsearch(hosts = [{\"host\":\"localhost\", \"port\":9200}])\n",
        "# Check if python is connected to elasticsearch\n",
        "es.ping()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sYsVZ3tGuxMs",
        "outputId": "b98742ac-df30-4547-9155-a5351e0fe16f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install elasticsearch\n",
        "!pip install elasticsearch-dsl"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_nN5uCaEu1Vp",
        "outputId": "3fedd239-45fd-4bab-9b13-86e6b6451259"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: elasticsearch in /usr/local/lib/python3.10/dist-packages (7.17.0)\n",
            "Requirement already satisfied: urllib3<2,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from elasticsearch) (1.26.20)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from elasticsearch) (2024.8.30)\n",
            "Collecting elasticsearch-dsl\n",
            "  Downloading elasticsearch_dsl-8.15.2-py3-none-any.whl.metadata (11 kB)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from elasticsearch-dsl) (2.8.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from elasticsearch-dsl) (4.12.2)\n",
            "Collecting elasticsearch<9.0.0,>=8.0.0 (from elasticsearch-dsl)\n",
            "  Downloading elasticsearch-8.15.1-py3-none-any.whl.metadata (8.7 kB)\n",
            "Collecting elastic-transport<9,>=8.13 (from elasticsearch<9.0.0,>=8.0.0->elasticsearch-dsl)\n",
            "  Downloading elastic_transport-8.15.0-py3-none-any.whl.metadata (3.6 kB)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->elasticsearch-dsl) (1.16.0)\n",
            "Requirement already satisfied: urllib3<3,>=1.26.2 in /usr/local/lib/python3.10/dist-packages (from elastic-transport<9,>=8.13->elasticsearch<9.0.0,>=8.0.0->elasticsearch-dsl) (1.26.20)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from elastic-transport<9,>=8.13->elasticsearch<9.0.0,>=8.0.0->elasticsearch-dsl) (2024.8.30)\n",
            "Downloading elasticsearch_dsl-8.15.2-py3-none-any.whl (104 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m104.4/104.4 kB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading elasticsearch-8.15.1-py3-none-any.whl (524 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m524.6/524.6 kB\u001b[0m \u001b[31m31.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading elastic_transport-8.15.0-py3-none-any.whl (64 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.4/64.4 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: elastic-transport, elasticsearch, elasticsearch-dsl\n",
            "  Attempting uninstall: elasticsearch\n",
            "    Found existing installation: elasticsearch 7.17.0\n",
            "    Uninstalling elasticsearch-7.17.0:\n",
            "      Successfully uninstalled elasticsearch-7.17.0\n",
            "Successfully installed elastic-transport-8.15.0 elasticsearch-8.15.1 elasticsearch-dsl-8.15.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import elasticsearch\n",
        "print(elasticsearch.__version__)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rwfU30YTxPNo",
        "outputId": "2a237faf-54f3-4345-f3f6-cf0795a07850"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(7, 17, 0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install elasticsearch==7.17.0\n",
        "!pip install elasticsearch-dsl==7.4.0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gfJ2Hhx-xTbr",
        "outputId": "ce25975b-fe3c-4881-d564-2e4f7fabf710"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: elasticsearch==7.17.0 in /usr/local/lib/python3.10/dist-packages (7.17.0)\n",
            "Requirement already satisfied: urllib3<2,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from elasticsearch==7.17.0) (1.26.20)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from elasticsearch==7.17.0) (2024.8.30)\n",
            "Collecting elasticsearch-dsl==7.4.0\n",
            "  Downloading elasticsearch_dsl-7.4.0-py2.py3-none-any.whl.metadata (11 kB)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from elasticsearch-dsl==7.4.0) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from elasticsearch-dsl==7.4.0) (2.8.2)\n",
            "Requirement already satisfied: elasticsearch<8.0.0,>=7.0.0 in /usr/local/lib/python3.10/dist-packages (from elasticsearch-dsl==7.4.0) (7.17.0)\n",
            "Requirement already satisfied: urllib3<2,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from elasticsearch<8.0.0,>=7.0.0->elasticsearch-dsl==7.4.0) (1.26.20)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from elasticsearch<8.0.0,>=7.0.0->elasticsearch-dsl==7.4.0) (2024.8.30)\n",
            "Downloading elasticsearch_dsl-7.4.0-py2.py3-none-any.whl (63 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.7/63.7 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: elasticsearch-dsl\n",
            "Successfully installed elasticsearch-dsl-7.4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part 4: BM25"
      ],
      "metadata": {
        "id": "JomMtdL9wa_f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "from elasticsearch_dsl import Search\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "\n",
        "es = Elasticsearch()\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def read_files_from_folder(folder_path):\n",
        "    \"\"\"Read all .docx files from the folder path and return them as a list of documents.\"\"\"\n",
        "    # Find all .docx files in the specified folder\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "\n",
        "    documents = []\n",
        "\n",
        "    # Read .docx files\n",
        "    for file_path in file_paths_docx:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents.append({\n",
        "                '_index': 'financial_reports',\n",
        "                '_source': {'content': text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "    print(f\"Loaded {len(documents)} documents from the folder.\")\n",
        "    return documents\n",
        "\n",
        "\n",
        "documents = read_files_from_folder(folder_path)\n",
        "\n",
        "\n",
        "try:\n",
        "    if not es.ping():\n",
        "        print(\"Elasticsearch is not running or not reachable. Please check your Elasticsearch server.\")\n",
        "    else:\n",
        "        print(\"Elasticsearch is running and reachable.\")\n",
        "except ElasticsearchException as e:\n",
        "    print(f\"Error connecting to Elasticsearch: {e}\")\n",
        "\n",
        "# Create the index in Elasticsearch\n",
        "try:\n",
        "    if not es.indices.exists(index='financial_reports'):\n",
        "        es.indices.create(index='financial_reports')\n",
        "    else:\n",
        "        print(\"Index 'financial_reports' already exists.\")\n",
        "except ElasticsearchException as e:\n",
        "    print(f\"Error during index creation: {e}\")\n",
        "\n",
        "# Bulk index the documents\n",
        "if documents:\n",
        "    try:\n",
        "        bulk(es, documents)\n",
        "        print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during bulk indexing: {e}\")\n",
        "else:\n",
        "    print(\"No documents to index.\")\n",
        "\n",
        "# Search function\n",
        "def search_documents(query, index='financial_reports'):\n",
        "    \"\"\"Search for documents in Elasticsearch that match the query.\"\"\"\n",
        "    try:\n",
        "        s = Search(using=es, index=index).query(\"match\", content=query)\n",
        "        response = s.execute()\n",
        "\n",
        "\n",
        "        for hit in response:\n",
        "            print(f\"Document: {hit.filename}, Score: {hit.meta.score}\")\n",
        "            print(hit.content[:500])\n",
        "            print('-' * 80)\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during search: {e}\")\n",
        "\n",
        "# query (can be changed)\n",
        "search_query = \"revenue in annual report 2023\"\n",
        "search_documents(search_query)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aPiGpHZayKJU",
        "outputId": "1fd309a5-41b1-4ef5-d890-cd3059916304"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 10 documents from the folder.\n",
            "Elasticsearch is running and reachable.\n",
            "Index 'financial_reports' already exists.\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Document: 2023_Annual_Report.docx, Score: 1.9123254\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform productivity for every individual, organization, and industry on earth, and help us address some of our most pressing challenges. \n",
            "This next generation of AI will reshape every software category and \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 1.7583863\n",
            " \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 2019. As I write this, inflation is at a 40-year high, supply chains are stretched, and the war in Ukraine is ongoing. At the same time, we are entering a technological era with the potential to power awesome advancements across every sector of our economy and society. As the world’s largest software \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2020_Annual_Report (1).docx, Score: 1.3787047\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "While the start of a new decade typically brings hope, we quickly saw the world come to a near standstill in 2020, confronted by compounding crises: a public health and economic crisis, persistent issues of systemic racial injustice and inequity, and the devastating effects of climate change. It is easy to fall prey to pessimism, or the sense that we individually or as a company can’t make a difference. But helplessness is corrosive to\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2014_Annual_Report.docx, Score: 1.1203158\n",
            "\n",
            " \n",
            "TO OUR SHAREHOLDERS, CUSTOMERS, PARTNERS AND EMPLOYEES: \n",
            "It is a humbling experience to write this letter to you as only the third CEO in Microsoft’s history. As I said when I took this role, I originally joined Microsoft to have an opportunity to change the world through technology and empower people to do amazing things. Many companies aspire to change the world, but very few have the talent, resources and perseverance of Microsoft. \n",
            "I believe this is a landmark moment for the company and f\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2015_Annual_Report.docx, Score: 1.0875136\n",
            "\n",
            "\n",
            "Dear shareholders, customers, partners and colleagues: \n",
            "It’s been a remarkable year for all of us at Microsoft, a year of change and opportunity for our company, our industry and the world. \n",
            "We as a company stand for deeply understanding the needs of customers, translating that understanding into products that people love and ultimately into the success our customers have with our products. It’s that last part that is our key motivation. The entire Microsoft team is inspired to bring their bes\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2021_Annual_Report.docx, Score: 0.40049386\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Annual Report 2021\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "As I write this, people and organizations everywhere continue to struggle with the uncertainty of a pandemic that continues to cause so much suffering. And yet, as I reflect on what has been a very challenging year for so many—one that will be forever remembered as a heartbreaking chapter in our history—I find reasons to be hopeful. \n",
            "Our mission to empower every person and every organization on the planet \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2019_Annual_Report (1).docx, Score: 0.39845482\n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners:  \n",
            "Thank you for your continued commitment and investment in Microsoft. Our tremendous progress and impact over the past year would not have been possible without your trust and belief in our mission. \n",
            "Fiscal 2019 was a record-breaking year for our company. We delivered more than $125 billion in revenue, $43 billion in operating income, and more than $50 billion in operating cash flow – and returned more than $30 billion to shareholders. O\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2016_Annual_Report.docx, Score: 0.3971482\n",
            "\n",
            "Dear shareholders, customers, partners, and employees: \n",
            "I’m proud of the progress we’ve made as a company this past year and excited about the opportunity for even more progress in the year ahead. We’ve advanced our mission to empower every person and every organization on the planet to achieve more. We’ve continued to cultivate a Microsoft culture in which people connect their individual energies and passions for technology to this mission. We’re leading profound digital transformation both fo\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2018_Annual_Report.docx, Score: 0.397093\n",
            "\n",
            " \n",
            "Dear shareholders, customers, partners and employees: \n",
            "As I reflect on our progress this past year, I first want to say thank you for your commitment and investment in Microsoft. I’m proud of what we’ve accomplished together as we innovate and help customers navigate their digital transformation, and I am even more optimistic about the opportunity ahead. \n",
            "We are living at a crucial time in history where the impact of technology on every part of our daily life and work and every aspect of our \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2017_Annual_Report.docx, Score: 0.39551166\n",
            "\n",
            "\n",
            " \n",
            "Dear shareholders, customers, partners and employees: \n",
            "Thank you for your support and investment in Microsoft. We’re proud of our progress this year, and we are eager to make even more progress in the year ahead. \n",
            "We continue to be guided by our mission to empower every person and every organization on the planet to achieve more. The breadth and depth of our mission unlocks unprecedented opportunity as technology transforms every industry and has the power to make a difference in the lives o\n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from elasticsearch_dsl import Search\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "\n",
        "\n",
        "es = Elasticsearch()\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "# Retrieve the list of document filenames dynamically from the folder\n",
        "def get_document_filenames(folder_path):\n",
        "    \"\"\"Get the list of .docx filenames from the specified folder.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    filenames = [os.path.basename(file_path) for file_path in file_paths_docx]\n",
        "    return filenames\n",
        "\n",
        "# Ground truth queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "# Number of top documents to retrieve for evaluation\n",
        "TOP_N = 5\n",
        "\n",
        "def evaluate_precision_recall(queries, folder_path, index='financial_reports'):\n",
        "    \"\"\"Evaluate precision and recall for a set of queries against the Elasticsearch index.\"\"\"\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "    # Retrieve the list of all document filenames in the folder\n",
        "    all_docs = set(get_document_filenames(folder_path))\n",
        "\n",
        "    for query in queries:\n",
        "        try:\n",
        "            # Run the query in Elasticsearch\n",
        "            s = Search(using=es, index=index).query(\"match\", content=query)\n",
        "            response = s.execute()\n",
        "\n",
        "            # Get the top N retrieved documents\n",
        "            retrieved_docs = [hit.filename for hit in response[:TOP_N]]\n",
        "\n",
        "            # Calculate the number of relevant documents retrieved\n",
        "\n",
        "            relevant_retrieved = len(set(retrieved_docs) & all_docs)\n",
        "\n",
        "            # Precision: Relevant documents retrieved / Total documents retrieved\n",
        "            precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "            precisions.append(precision)\n",
        "\n",
        "            # Recall: Relevant documents retrieved / Total relevant documents in the folder\n",
        "            recall = relevant_retrieved / len(all_docs) if all_docs else 0\n",
        "            recalls.append(recall)\n",
        "\n",
        "            # Print results for each query\n",
        "            print(f\"Query: {query}\")\n",
        "            print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "            print(f\"Precision: {precision:.2f}\")\n",
        "            print(f\"Recall: {recall:.2f}\")\n",
        "            print(\"-\" * 80)\n",
        "\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during search for query '{query}': {e}\")\n",
        "\n",
        "    # Calculate average precision and recall\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision: {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall: {avg_recall:.2f}\")\n",
        "\n",
        "\n",
        "evaluate_precision_recall(queries, folder_path)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LO8cGsaE0xyM",
        "outputId": "6a80bbe5-b8f2-417f-80b4-9e62ce472927"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: tree\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: ['2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2022_Annual_Report (1).docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: ['2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2021_Annual_Report.docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2020_Annual_Report (1).docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: ['2014_Annual_Report.docx', '2014_Annual_Report.docx', '2014_Annual_Report.docx', '2014_Annual_Report.docx', '2023_Annual_Report.docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: ['2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2023_Annual_Report.docx']\n",
            "Precision: 0.40\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision: 0.35\n",
            "Average Recall: 0.17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch_dsl import Search\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "import spacy  # Using spaCy for NLP preprocessing\n",
        "\n",
        "# Load spaCy model for lemmatization and stop-word removal\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "\n",
        "es = Elasticsearch()\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "# Function to preprocess text by tokenizing, lemmatizing, and removing stop words\n",
        "def preprocess_text(text):\n",
        "    \"\"\"Preprocess text by tokenizing, lemmatizing, and removing stop words.\"\"\"\n",
        "    doc = nlp(text.lower())\n",
        "    tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]\n",
        "    return ' '.join(tokens)\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file and preprocess it.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        preprocessed_text = preprocess_text('\\n'.join(text))\n",
        "        print(f\"Preprocessed text for {file_path}: {preprocessed_text[:200]}...\")\n",
        "        return preprocessed_text\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "\n",
        "def get_document_filenames(folder_path):\n",
        "    \"\"\"Get the list of .docx filenames from the specified folder.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    filenames = [os.path.basename(file_path) for file_path in file_paths_docx]\n",
        "    return filenames\n",
        "\n",
        "\n",
        "def create_index(index_name):\n",
        "    \"\"\"Create an Elasticsearch index if it does not exist.\"\"\"\n",
        "    try:\n",
        "        if not es.indices.exists(index=index_name):\n",
        "            # Define settings with BM25 similarity (default in Elasticsearch)\n",
        "            index_settings = {\n",
        "                \"settings\": {\n",
        "                    \"similarity\": {\n",
        "                        \"default\": {\n",
        "                            \"type\": \"BM25\"\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "\n",
        "            es.indices.create(index=index_name, body=index_settings)\n",
        "            print(f\"Index '{index_name}' created with BM25 similarity.\")\n",
        "        else:\n",
        "            print(f\"Index '{index_name}' already exists.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during index creation: {e}\")\n",
        "\n",
        "\n",
        "def preprocess_and_index_documents(folder_path, index_name='financial_reports'):\n",
        "    \"\"\"Preprocess documents and index them into Elasticsearch.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = []\n",
        "\n",
        "    for file_path in file_paths_docx:\n",
        "        preprocessed_text = read_docx(file_path)\n",
        "        if preprocessed_text.strip():\n",
        "            documents.append({\n",
        "                '_index': index_name,\n",
        "                '_source': {'content': preprocessed_text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "\n",
        "    if documents:\n",
        "        try:\n",
        "            bulk(es, documents)\n",
        "            print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during bulk indexing: {e}\")\n",
        "    else:\n",
        "        print(\"No documents to index.\")\n",
        "\n",
        "# Ground truth queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "# Number of top documents to retrieve for evaluation\n",
        "TOP_N = 5\n",
        "\n",
        "\n",
        "def evaluate_precision_recall(queries, folder_path, index='financial_reports'):\n",
        "    \"\"\"Evaluate precision and recall for a set of queries against the Elasticsearch index.\"\"\"\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "\n",
        "    all_docs = set(get_document_filenames(folder_path))\n",
        "\n",
        "    for query in queries:\n",
        "        try:\n",
        "            # Preprocess the query using the same preprocessing steps as the documents\n",
        "            preprocessed_query = preprocess_text(query)\n",
        "\n",
        "\n",
        "            s = Search(using=es, index=index).query(\"match_phrase\", content=preprocessed_query)\n",
        "            response = s.execute()\n",
        "\n",
        "\n",
        "            retrieved_docs = [hit.filename for hit in response[:TOP_N]]\n",
        "\n",
        "\n",
        "            relevant_retrieved = len(set(retrieved_docs) & all_docs)\n",
        "\n",
        "\n",
        "            precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "            precisions.append(precision)\n",
        "\n",
        "\n",
        "            recall = relevant_retrieved / len(all_docs) if all_docs else 0\n",
        "            recalls.append(recall)\n",
        "\n",
        "\n",
        "            print(f\"Query: {query}\")\n",
        "            print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "            print(f\"Precision: {precision:.2f}\")\n",
        "            print(f\"Recall: {recall:.2f}\")\n",
        "            print(\"-\" * 80)\n",
        "\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during search for query '{query}': {e}\")\n",
        "\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision: {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall: {avg_recall:.2f}\")\n",
        "\n",
        "\n",
        "create_index('financial_reports')\n",
        "\n",
        "\n",
        "preprocess_and_index_documents(folder_path)\n",
        "\n",
        "\n",
        "evaluate_precision_recall(queries, folder_path)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JeSjKfUK01F_",
        "outputId": "65f7ee3e-3721-45b1-e090-0e555130e28d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index 'financial_reports' already exists.\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2023_Annual_Report.docx: dear shareholder colleague customer partner live time historic challenge opportunity write world face ongoing economic social geopolitical volatility time enter new age ai fundamentally transform prod...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2022_Annual_Report (1).docx: dear shareholder colleague customer partner live period historic economic societal geopolitical change world look like world write inflation year high supply chain stretch war ukraine ongoing time ent...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2021_Annual_Report.docx: annual report dear shareholder colleague customer partner write people organization continue struggle uncertainty pandemic continue cause suffering reflect challenging year forever remember heartbreak...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2020_Annual_Report (1).docx: dear shareholder colleague customer partner start new decade typically bring hope quickly see world come near standstill confront compound crisis public health economic crisis persistent issue systemi...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2018_Annual_Report.docx: dear shareholder customer partner employee reflect progress past year want thank commitment investment microsoft proud accomplish innovate help customer navigate digital transformation optimistic oppo...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2017_Annual_Report.docx: dear shareholder customer partner employee thank support investment microsoft proud progress year eager progress year ahead continue guide mission empower person organization planet achieve breadth de...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2016_Annual_Report.docx: dear shareholder customer partner employee proud progress company past year excite opportunity progress year ahead advance mission empower person organization planet achieve continue cultivate microso...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2015_Annual_Report.docx: dear shareholder customer partner colleague remarkable year microsoft year change opportunity company industry world company stand deeply understand need customer translate understanding product peopl...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2014_Annual_Report.docx: shareholder customer partner employee humbling experience write letter ceo microsoft history say take role originally join microsoft opportunity change world technology empower people amazing thing co...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2019_Annual_Report (1).docx: dear shareholder colleague customer partner thank continue commitment investment microsoft tremendous progress impact past year possible trust belief mission fiscal record break year company deliver b...\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Query: tree\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: ['2019_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2023_Annual_Report.docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2020_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2023_Annual_Report.docx', '2020_Annual_Report (1).docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2016_Annual_Report.docx', '2018_Annual_Report.docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2017_Annual_Report.docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: ['2015_Annual_Report.docx', '2014_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2017_Annual_Report.docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2023_Annual_Report.docx', '2019_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2020_Annual_Report (1).docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: ['2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2020_Annual_Report (1).docx']\n",
            "Precision: 0.60\n",
            "Recall: 0.30\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision: 0.53\n",
            "Average Recall: 0.26\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###BM 25 question-answering"
      ],
      "metadata": {
        "id": "UF4nJwNKFecU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "from elasticsearch_dsl import Search\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "es = Elasticsearch()\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def read_files_from_folder(folder_path):\n",
        "    \"\"\"Read all .docx files from the folder path and return them as a list of documents.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "\n",
        "    documents = []\n",
        "\n",
        "\n",
        "    for file_path in file_paths_docx:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents.append({\n",
        "                '_index': 'financial_reports',\n",
        "                '_source': {'content': text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "    print(f\"Loaded {len(documents)} documents from the folder.\")\n",
        "    return documents\n",
        "\n",
        "\n",
        "documents = read_files_from_folder(folder_path)\n",
        "\n",
        "\n",
        "try:\n",
        "    if not es.ping():\n",
        "        print(\"Elasticsearch is not running or not reachable. Please check your Elasticsearch server.\")\n",
        "    else:\n",
        "        print(\"Elasticsearch is running and reachable.\")\n",
        "except ElasticsearchException as e:\n",
        "    print(f\"Error connecting to Elasticsearch: {e}\")\n",
        "\n",
        "\n",
        "try:\n",
        "    if not es.indices.exists(index='financial_reports'):\n",
        "        es.indices.create(index='financial_reports')\n",
        "    else:\n",
        "        print(\"Index 'financial_reports' already exists.\")\n",
        "except ElasticsearchException as e:\n",
        "    print(f\"Error during index creation: {e}\")\n",
        "\n",
        "\n",
        "if documents:\n",
        "    try:\n",
        "        bulk(es, documents)\n",
        "        print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during bulk indexing: {e}\")\n",
        "else:\n",
        "    print(\"No documents to index.\")\n",
        "\n",
        "def search_documents(query, index='financial_reports'):\n",
        "    \"\"\"Search for documents in Elasticsearch that match the query and highlight relevant passages.\"\"\"\n",
        "    try:\n",
        "        s = Search(using=es, index=index).query(\"match\", content=query)\n",
        "        s = s.highlight('content', fragment_size=200, number_of_fragments=5)  # Highlight relevant parts of the text\n",
        "\n",
        "        response = s.execute()\n",
        "\n",
        "\n",
        "        for hit in response:\n",
        "            print(f\"Document: {hit.filename}, Score: {hit.meta.score}\")\n",
        "            if \"highlight\" in hit.meta:\n",
        "                for fragment in hit.meta.highlight.content:\n",
        "                    print(f\"Highlighted Snippet: {fragment}\")\n",
        "            else:\n",
        "                print(hit.content[:500])\n",
        "            print('-' * 80)\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during search: {e}\")\n",
        "\n",
        "# search for the answer\n",
        "search_query = \"Please give how much we generated in revenue in annual report 2023\"\n",
        "search_documents(search_query)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-hFH9xAMFFn_",
        "outputId": "58467cc5-87a3-4b4c-b206-2c0200268ca2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 10 documents from the folder.\n",
            "Elasticsearch is running and reachable.\n",
            "Index 'financial_reports' already exists.\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Document: 2023_Annual_Report.docx, Score: 2.4703214\n",
            "Highlighted Snippet: And <em>we</em> are also transforming <em>how</em> Windows is experienced and managed with Azure Virtual Desktop and Windows 365, which together surpassed $1 billion <em>in</em> <em>annual</em> <em>revenue</em> for the first time.\n",
            "Highlighted Snippet: And <em>we</em> published our third <em>annual</em> Microsoft Digital Defense <em>Report</em>, sharing our learnings and security recommendations.\n",
            "Highlighted Snippet: To address this, <em>in</em> June <em>2023</em> <em>we</em> launched a new AI Skills Initiative to help everyone learn <em>how</em> to harness the power of AI.\n",
            "Highlighted Snippet: Since 2016, <em>we</em> have reported on pay equity as part of our <em>annual</em> Diversity and Inclusion <em>report</em>.\n",
            "Highlighted Snippet: <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2022.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2023_Annual_Report.docx, Score: 2.4703214\n",
            "Highlighted Snippet: And <em>we</em> are also transforming <em>how</em> Windows is experienced and managed with Azure Virtual Desktop and Windows 365, which together surpassed $1 billion <em>in</em> <em>annual</em> <em>revenue</em> for the first time.\n",
            "Highlighted Snippet: And <em>we</em> published our third <em>annual</em> Microsoft Digital Defense <em>Report</em>, sharing our learnings and security recommendations.\n",
            "Highlighted Snippet: To address this, <em>in</em> June <em>2023</em> <em>we</em> launched a new AI Skills Initiative to help everyone learn <em>how</em> to harness the power of AI.\n",
            "Highlighted Snippet: Since 2016, <em>we</em> have reported on pay equity as part of our <em>annual</em> Diversity and Inclusion <em>report</em>.\n",
            "Highlighted Snippet: <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2022.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2023_Annual_Report.docx, Score: 2.4703214\n",
            "Highlighted Snippet: And <em>we</em> are also transforming <em>how</em> Windows is experienced and managed with Azure Virtual Desktop and Windows 365, which together surpassed $1 billion <em>in</em> <em>annual</em> <em>revenue</em> for the first time.\n",
            "Highlighted Snippet: And <em>we</em> published our third <em>annual</em> Microsoft Digital Defense <em>Report</em>, sharing our learnings and security recommendations.\n",
            "Highlighted Snippet: To address this, <em>in</em> June <em>2023</em> <em>we</em> launched a new AI Skills Initiative to help everyone learn <em>how</em> to harness the power of AI.\n",
            "Highlighted Snippet: Since 2016, <em>we</em> have reported on pay equity as part of our <em>annual</em> Diversity and Inclusion <em>report</em>.\n",
            "Highlighted Snippet: <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2022.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2023_Annual_Report.docx, Score: 2.4703214\n",
            "Highlighted Snippet: And <em>we</em> are also transforming <em>how</em> Windows is experienced and managed with Azure Virtual Desktop and Windows 365, which together surpassed $1 billion <em>in</em> <em>annual</em> <em>revenue</em> for the first time.\n",
            "Highlighted Snippet: And <em>we</em> published our third <em>annual</em> Microsoft Digital Defense <em>Report</em>, sharing our learnings and security recommendations.\n",
            "Highlighted Snippet: To address this, <em>in</em> June <em>2023</em> <em>we</em> launched a new AI Skills Initiative to help everyone learn <em>how</em> to harness the power of AI.\n",
            "Highlighted Snippet: Since 2016, <em>we</em> have reported on pay equity as part of our <em>annual</em> Diversity and Inclusion <em>report</em>.\n",
            "Highlighted Snippet: <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2022.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 2.309233\n",
            "Highlighted Snippet: <em>In</em> March, <em>we</em> released our second <em>annual</em> sustainability <em>report</em>, sharing our progress, challenges, and learnings as <em>we</em> pursue our commitments to become carbon negative, water positive, and zero waste.\n",
            "Highlighted Snippet: <em>In</em> response to the Great Reshuffle, <em>in</em> fiscal year 2022 <em>we</em> announced a sizable investment <em>in</em> <em>annual</em> merit and <em>annual</em> stock award opportunity for all employees below senior executive levels.\n",
            "Highlighted Snippet: While <em>we</em> employ <em>much</em> of our internally-developed intellectual property exclusively <em>in</em> our products and services, <em>we</em> also engage <em>in</em> outbound licensing of specific patented technologies that are incorporated\n",
            "Highlighted Snippet: and Results of Operations” <em>in</em> our <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2021.\n",
            "Highlighted Snippet: The federal capital loss carryforwards are subject to an <em>annual</em> limitation and will expire <em>in</em> various years from fiscal <em>2023</em> through 2025.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 2.309233\n",
            "Highlighted Snippet: <em>In</em> March, <em>we</em> released our second <em>annual</em> sustainability <em>report</em>, sharing our progress, challenges, and learnings as <em>we</em> pursue our commitments to become carbon negative, water positive, and zero waste.\n",
            "Highlighted Snippet: <em>In</em> response to the Great Reshuffle, <em>in</em> fiscal year 2022 <em>we</em> announced a sizable investment <em>in</em> <em>annual</em> merit and <em>annual</em> stock award opportunity for all employees below senior executive levels.\n",
            "Highlighted Snippet: While <em>we</em> employ <em>much</em> of our internally-developed intellectual property exclusively <em>in</em> our products and services, <em>we</em> also engage <em>in</em> outbound licensing of specific patented technologies that are incorporated\n",
            "Highlighted Snippet: and Results of Operations” <em>in</em> our <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2021.\n",
            "Highlighted Snippet: The federal capital loss carryforwards are subject to an <em>annual</em> limitation and will expire <em>in</em> various years from fiscal <em>2023</em> through 2025.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 2.309233\n",
            "Highlighted Snippet: <em>In</em> March, <em>we</em> released our second <em>annual</em> sustainability <em>report</em>, sharing our progress, challenges, and learnings as <em>we</em> pursue our commitments to become carbon negative, water positive, and zero waste.\n",
            "Highlighted Snippet: <em>In</em> response to the Great Reshuffle, <em>in</em> fiscal year 2022 <em>we</em> announced a sizable investment <em>in</em> <em>annual</em> merit and <em>annual</em> stock award opportunity for all employees below senior executive levels.\n",
            "Highlighted Snippet: While <em>we</em> employ <em>much</em> of our internally-developed intellectual property exclusively <em>in</em> our products and services, <em>we</em> also engage <em>in</em> outbound licensing of specific patented technologies that are incorporated\n",
            "Highlighted Snippet: and Results of Operations” <em>in</em> our <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2021.\n",
            "Highlighted Snippet: The federal capital loss carryforwards are subject to an <em>annual</em> limitation and will expire <em>in</em> various years from fiscal <em>2023</em> through 2025.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 2.309233\n",
            "Highlighted Snippet: <em>In</em> March, <em>we</em> released our second <em>annual</em> sustainability <em>report</em>, sharing our progress, challenges, and learnings as <em>we</em> pursue our commitments to become carbon negative, water positive, and zero waste.\n",
            "Highlighted Snippet: <em>In</em> response to the Great Reshuffle, <em>in</em> fiscal year 2022 <em>we</em> announced a sizable investment <em>in</em> <em>annual</em> merit and <em>annual</em> stock award opportunity for all employees below senior executive levels.\n",
            "Highlighted Snippet: While <em>we</em> employ <em>much</em> of our internally-developed intellectual property exclusively <em>in</em> our products and services, <em>we</em> also engage <em>in</em> outbound licensing of specific patented technologies that are incorporated\n",
            "Highlighted Snippet: and Results of Operations” <em>in</em> our <em>Annual</em> <em>Report</em> on Form 10-K for the year ended June 30, 2021.\n",
            "Highlighted Snippet: The federal capital loss carryforwards are subject to an <em>annual</em> limitation and will expire <em>in</em> various years from fiscal <em>2023</em> through 2025.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2020_Annual_Report (1).docx, Score: 2.2014332\n",
            "Highlighted Snippet: As <em>much</em> as 73 percent of the data <em>in</em> the world is still not being analyzed.\n",
            "Highlighted Snippet: Recent events are shining a bright light on <em>how</em> <em>much</em> work there is still to do. Seeing injustice <em>in</em> the world calls us all to take action.\n",
            "Highlighted Snippet: Finally, transparency is foundational to trust, so <em>we</em> provide clear information on <em>how</em> <em>we</em> run our business and <em>how</em> <em>we</em> work with customers and partners. \n",
            "Highlighted Snippet: <em>report</em>.\n",
            "Highlighted Snippet: Box 505000 \n",
            "Louisville, KY 40233-5000 \n",
            "Shareholders can sign up for electronic alerts to access the <em>annual</em> <em>report</em> and proxy statement online.\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2020_Annual_Report (1).docx, Score: 2.2014332\n",
            "Highlighted Snippet: As <em>much</em> as 73 percent of the data <em>in</em> the world is still not being analyzed.\n",
            "Highlighted Snippet: Recent events are shining a bright light on <em>how</em> <em>much</em> work there is still to do. Seeing injustice <em>in</em> the world calls us all to take action.\n",
            "Highlighted Snippet: Finally, transparency is foundational to trust, so <em>we</em> provide clear information on <em>how</em> <em>we</em> run our business and <em>how</em> <em>we</em> work with customers and partners. \n",
            "Highlighted Snippet: <em>report</em>.\n",
            "Highlighted Snippet: Box 505000 \n",
            "Louisville, KY 40233-5000 \n",
            "Shareholders can sign up for electronic alerts to access the <em>annual</em> <em>report</em> and proxy statement online.\n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part 5: TF-IDF"
      ],
      "metadata": {
        "id": "0_apY_N0wiTM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "from elasticsearch_dsl import Search\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "es = Elasticsearch()\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def read_files_from_folder(folder_path):\n",
        "    \"\"\"Read all .docx files from the folder path and return them as a list of documents.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "\n",
        "    documents = []\n",
        "\n",
        "    for file_path in file_paths_docx:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents.append({\n",
        "                '_index': 'financial_reports',\n",
        "                '_source': {'content': text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "    print(f\"Loaded {len(documents)} documents from the folder.\")\n",
        "    return documents\n",
        "\n",
        "\n",
        "documents = read_files_from_folder(folder_path)\n",
        "\n",
        "\n",
        "try:\n",
        "    if not es.ping():\n",
        "        print(\"Elasticsearch is not running or not reachable. Please check your Elasticsearch server.\")\n",
        "    else:\n",
        "        print(\"Elasticsearch is running and reachable.\")\n",
        "except ElasticsearchException as e:\n",
        "    print(f\"Error connecting to Elasticsearch: {e}\")\n",
        "\n",
        "\n",
        "def create_tfidf_index(index_name):\n",
        "    \"\"\"Create an Elasticsearch index with TF-IDF (classic) similarity settings.\"\"\"\n",
        "    try:\n",
        "        if es.indices.exists(index=index_name):\n",
        "            print(f\"Index '{index_name}' already exists.\")\n",
        "        else:\n",
        "            # Define settings with TF-IDF similarity (classic)\n",
        "            index_settings = {\n",
        "                \"settings\": {\n",
        "                    \"similarity\": {\n",
        "                        \"default\": {\n",
        "                            \"type\": \"classic\"  # Set to TF-IDF similarity\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "\n",
        "            es.indices.create(index=index_name, body=index_settings)\n",
        "            print(f\"Index '{index_name}' created with TF-IDF similarity.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during index creation: {e}\")\n",
        "\n",
        "\n",
        "create_tfidf_index('financial_reports')\n",
        "\n",
        "\n",
        "if documents:\n",
        "    try:\n",
        "        bulk(es, documents)\n",
        "        print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during bulk indexing: {e}\")\n",
        "else:\n",
        "    print(\"No documents to index.\")\n",
        "\n",
        "\n",
        "def search_documents(query, index='financial_reports'):\n",
        "    \"\"\"Search for documents in Elasticsearch that match the query.\"\"\"\n",
        "    try:\n",
        "        s = Search(using=es, index=index).query(\"match\", content=query)\n",
        "        response = s.execute()\n",
        "\n",
        "        for hit in response:\n",
        "            print(f\"Document: {hit.filename}, Score: {hit.meta.score}\")\n",
        "            print(hit.content[:500])\n",
        "            print('-' * 80)\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during search: {e}\")\n",
        "\n",
        "# Example query (can be changed)\n",
        "search_query = \"revenue in annual report 2023\"\n",
        "search_documents(search_query)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tfXS50UZKOtc",
        "outputId": "8329ae13-0775-4906-acd8-7b4d8f035a5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 10 documents from the folder.\n",
            "Elasticsearch is running and reachable.\n",
            "Index 'financial_reports' already exists.\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Document: 2023_Annual_Report.docx, Score: 1.6171621\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform productivity for every individual, organization, and industry on earth, and help us address some of our most pressing challenges. \n",
            "This next generation of AI will reshape every software category and \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2023_Annual_Report.docx, Score: 1.6171621\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform productivity for every individual, organization, and industry on earth, and help us address some of our most pressing challenges. \n",
            "This next generation of AI will reshape every software category and \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2023_Annual_Report.docx, Score: 1.6171621\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform productivity for every individual, organization, and industry on earth, and help us address some of our most pressing challenges. \n",
            "This next generation of AI will reshape every software category and \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2023_Annual_Report.docx, Score: 1.6171621\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform productivity for every individual, organization, and industry on earth, and help us address some of our most pressing challenges. \n",
            "This next generation of AI will reshape every software category and \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 1.4634405\n",
            " \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 2019. As I write this, inflation is at a 40-year high, supply chains are stretched, and the war in Ukraine is ongoing. At the same time, we are entering a technological era with the potential to power awesome advancements across every sector of our economy and society. As the world’s largest software \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 1.4634405\n",
            " \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 2019. As I write this, inflation is at a 40-year high, supply chains are stretched, and the war in Ukraine is ongoing. At the same time, we are entering a technological era with the potential to power awesome advancements across every sector of our economy and society. As the world’s largest software \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 1.4634405\n",
            " \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 2019. As I write this, inflation is at a 40-year high, supply chains are stretched, and the war in Ukraine is ongoing. At the same time, we are entering a technological era with the potential to power awesome advancements across every sector of our economy and society. As the world’s largest software \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2022_Annual_Report (1).docx, Score: 1.4634405\n",
            " \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 2019. As I write this, inflation is at a 40-year high, supply chains are stretched, and the war in Ukraine is ongoing. At the same time, we are entering a technological era with the potential to power awesome advancements across every sector of our economy and society. As the world’s largest software \n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2020_Annual_Report (1).docx, Score: 1.0861256\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "While the start of a new decade typically brings hope, we quickly saw the world come to a near standstill in 2020, confronted by compounding crises: a public health and economic crisis, persistent issues of systemic racial injustice and inequity, and the devastating effects of climate change. It is easy to fall prey to pessimism, or the sense that we individually or as a company can’t make a difference. But helplessness is corrosive to\n",
            "--------------------------------------------------------------------------------\n",
            "Document: 2020_Annual_Report (1).docx, Score: 1.0861256\n",
            " \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "While the start of a new decade typically brings hope, we quickly saw the world come to a near standstill in 2020, confronted by compounding crises: a public health and economic crisis, persistent issues of systemic racial injustice and inequity, and the devastating effects of climate change. It is easy to fall prey to pessimism, or the sense that we individually or as a company can’t make a difference. But helplessness is corrosive to\n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "from elasticsearch_dsl import Search\n",
        "\n",
        "# Initialize Elasticsearch client\n",
        "es = Elasticsearch()\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file using python-docx.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"Load all .docx files from the folder and return their contents.\"\"\"\n",
        "    file_paths = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "\n",
        "    documents = {}\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents[os.path.basename(file_path)] = text.lower()\n",
        "\n",
        "    return documents\n",
        "\n",
        "\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "# Set of queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "def find_relevant_docs_for_query(documents, query):\n",
        "    \"\"\"Determine relevant documents based on more sophisticated matching criteria.\"\"\"\n",
        "    relevant_docs = []\n",
        "    query_terms = set(query.lower().split())\n",
        "\n",
        "    for doc_name, doc_content in documents.items():\n",
        "        terms_matched = sum(1 for term in query_terms if term in doc_content.split())\n",
        "        if terms_matched >= len(query_terms) * 0.9:  # threshold can be adjusted\n",
        "            relevant_docs.append(doc_name)\n",
        "\n",
        "    return relevant_docs\n",
        "\n",
        "def evaluate_precision_recall(queries, documents, index='financial_reports_tfidf', top_n=10):\n",
        "    \"\"\"Evaluate precision and recall for each query using TF-IDF similarity.\"\"\"\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "    for query in queries:\n",
        "        # Retrieve relevant documents programmatically\n",
        "        relevant_docs = find_relevant_docs_for_query(documents, query)\n",
        "\n",
        "        # Run the query in Elasticsearch using a stricter match_phrase query\n",
        "        s = Search(using=es, index=index).query(\n",
        "            \"match_phrase\",\n",
        "            content=query  # Use match_phrase for stricter matching\n",
        "        )\n",
        "        response = s.execute()\n",
        "\n",
        "\n",
        "        retrieved_docs = [hit.filename for hit in response[:top_n]]\n",
        "\n",
        "        # the number of relevant documents retrieved\n",
        "        relevant_retrieved = len(set(retrieved_docs) & set(relevant_docs))\n",
        "\n",
        "\n",
        "        precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "        precisions.append(precision)\n",
        "\n",
        "\n",
        "        recall = relevant_retrieved / len(relevant_docs) if relevant_docs else 0\n",
        "        recalls.append(recall)\n",
        "\n",
        "\n",
        "        print(f\"Query: {query}\")\n",
        "        print(f\"Relevant Documents (Programmatic): {relevant_docs}\")\n",
        "        print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "        print(f\"Precision: {precision:.2f}\")\n",
        "        print(f\"Recall: {recall:.2f}\")\n",
        "        print(\"-\" * 80)\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision (TF-IDF): {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall (TF-IDF): {avg_recall:.2f}\")\n",
        "\n",
        "evaluate_precision_recall(queries, documents)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zd14KX86N9cZ",
        "outputId": "054b0e83-85d5-4342-c696-ee93a0668d76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: tree\n",
            "Relevant Documents (Programmatic): []\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Relevant Documents (Programmatic): ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx']\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Relevant Documents (Programmatic): ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2020_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx']\n",
            "Precision: 1.00\n",
            "Recall: 0.90\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Relevant Documents (Programmatic): ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2018_Annual_Report.docx', '2014_Annual_Report.docx', '2023_Annual_Report.docx', '2019_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2021_Annual_Report.docx', '2022_Annual_Report (1).docx']\n",
            "Precision: 1.00\n",
            "Recall: 1.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Relevant Documents (Programmatic): ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2020_Annual_Report (1).docx', '2015_Annual_Report.docx', '2018_Annual_Report.docx', '2019_Annual_Report (1).docx', '2016_Annual_Report.docx', '2014_Annual_Report.docx', '2023_Annual_Report.docx', '2021_Annual_Report.docx', '2022_Annual_Report (1).docx']\n",
            "Precision: 1.00\n",
            "Recall: 1.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Relevant Documents (Programmatic): ['2014_Annual_Report.docx']\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Relevant Documents (Programmatic): ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2019_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx']\n",
            "Precision: 1.00\n",
            "Recall: 1.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Relevant Documents (Programmatic): ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Retrieved Documents: ['2022_Annual_Report (1).docx', '2023_Annual_Report.docx', '2020_Annual_Report (1).docx', '2021_Annual_Report.docx', '2019_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx']\n",
            "Precision: 1.00\n",
            "Recall: 1.00\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision (TF-IDF): 0.62\n",
            "Average Recall (TF-IDF): 0.61\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from elasticsearch_dsl import Search\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "\n",
        "\n",
        "es = Elasticsearch()\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def get_document_filenames(folder_path):\n",
        "    \"\"\"Get the list of .docx filenames from the specified folder.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    filenames = [os.path.basename(file_path) for file_path in file_paths_docx]\n",
        "    return filenames\n",
        "\n",
        "# queries list\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "TOP_N = 10\n",
        "\n",
        "\n",
        "def create_tfidf_index(index_name):\n",
        "    \"\"\"Create an Elasticsearch index with TF-IDF (classic) similarity settings.\"\"\"\n",
        "    try:\n",
        "        if es.indices.exists(index=index_name):\n",
        "            print(f\"Index '{index_name}' already exists.\")\n",
        "        else:\n",
        "\n",
        "            index_settings = {\n",
        "                \"settings\": {\n",
        "                    \"similarity\": {\n",
        "                        \"default\": {\n",
        "                            \"type\": \"classic\"  # Set TF-IDF similarity\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "            es.indices.create(index=index_name, body=index_settings)\n",
        "            print(f\"Index '{index_name}' created with TF-IDF similarity.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during index creation: {e}\")\n",
        "\n",
        "\n",
        "def evaluate_precision_recall(queries, folder_path, index='financial_reports'):\n",
        "    \"\"\"Evaluate precision and recall for a set of queries against the Elasticsearch index.\"\"\"\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "\n",
        "    all_docs = set(get_document_filenames(folder_path))\n",
        "\n",
        "    for query in queries:\n",
        "        try:\n",
        "\n",
        "            s = Search(using=es, index=index).query(\"match\", content=query)\n",
        "            response = s.execute()\n",
        "\n",
        "\n",
        "            retrieved_docs = [hit.filename for hit in response[:TOP_N]]\n",
        "\n",
        "            relevant_retrieved = len(set(retrieved_docs) & all_docs)\n",
        "\n",
        "\n",
        "            precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "            precisions.append(precision)\n",
        "\n",
        "\n",
        "            recall = relevant_retrieved / len(all_docs) if all_docs else 0\n",
        "            recalls.append(recall)\n",
        "\n",
        "\n",
        "            print(f\"Query: {query}\")\n",
        "            print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "            print(f\"Precision: {precision:.2f}\")\n",
        "            print(f\"Recall: {recall:.2f}\")\n",
        "            print(\"-\" * 80)\n",
        "\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during search for query '{query}': {e}\")\n",
        "\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision: {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall: {avg_recall:.2f}\")\n",
        "\n",
        "\n",
        "create_tfidf_index('financial_reports')\n",
        "\n",
        "evaluate_precision_recall(queries, folder_path)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IiENbaFPKaz_",
        "outputId": "a41e16c2-4f5f-46a4-d1b3-f88f3893a097"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index 'financial_reports' already exists.\n",
            "Query: tree\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: ['2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: ['2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx', '2021_Annual_Report.docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2016_Annual_Report.docx', '2016_Annual_Report.docx', '2016_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2017_Annual_Report.docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx', '2020_Annual_Report (1).docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: ['2014_Annual_Report.docx', '2014_Annual_Report.docx', '2014_Annual_Report.docx', '2014_Annual_Report.docx', '2014_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2019_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2019_Annual_Report (1).docx', '2019_Annual_Report (1).docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: ['2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2022_Annual_Report (1).docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx', '2023_Annual_Report.docx']\n",
            "Precision: 0.20\n",
            "Recall: 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision: 0.17\n",
            "Average Recall: 0.17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch_dsl import Search\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "import spacy\n",
        "\n",
        "# Load spaCy model for lemmatization and stop-word removal\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "\n",
        "es = Elasticsearch()\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "\n",
        "def preprocess_text(text):\n",
        "    \"\"\"Preprocess text by tokenizing, lemmatizing, and removing stop words.\"\"\"\n",
        "    doc = nlp(text.lower())\n",
        "    tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]\n",
        "    return ' '.join(tokens)\n",
        "\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file and preprocess it.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        preprocessed_text = preprocess_text('\\n'.join(text))\n",
        "        print(f\"Preprocessed text for {file_path}: {preprocessed_text[:200]}...\")\n",
        "        return preprocessed_text\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "\n",
        "def get_document_filenames(folder_path):\n",
        "    \"\"\"Get the list of .docx filenames from the specified folder.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    filenames = [os.path.basename(file_path) for file_path in file_paths_docx]\n",
        "    return filenames\n",
        "\n",
        "\n",
        "def create_index(index_name):\n",
        "    \"\"\"Create an Elasticsearch index if it does not exist.\"\"\"\n",
        "    try:\n",
        "        if not es.indices.exists(index=index_name):\n",
        "\n",
        "            index_settings = {\n",
        "                \"settings\": {\n",
        "                    \"similarity\": {\n",
        "                        \"default\": {\n",
        "                            \"type\": \"classic\"  # Set to TF-IDF similarity\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "\n",
        "            es.indices.create(index=index_name, body=index_settings)\n",
        "            print(f\"Index '{index_name}' created with TF-IDF similarity.\")\n",
        "        else:\n",
        "            print(f\"Index '{index_name}' already exists.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during index creation: {e}\")\n",
        "\n",
        "\n",
        "def preprocess_and_index_documents(folder_path, index_name='financial_reports'):\n",
        "    \"\"\"Preprocess documents and index them into Elasticsearch.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = []\n",
        "\n",
        "    for file_path in file_paths_docx:\n",
        "        preprocessed_text = read_docx(file_path)\n",
        "        if preprocessed_text.strip():\n",
        "            documents.append({\n",
        "                '_index': index_name,\n",
        "                '_source': {'content': preprocessed_text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "\n",
        "    if documents:\n",
        "        try:\n",
        "            bulk(es, documents)\n",
        "            print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during bulk indexing: {e}\")\n",
        "    else:\n",
        "        print(\"No documents to index.\")\n",
        "\n",
        "# Ground truth queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "# Number of top documents to retrieve for evaluation\n",
        "TOP_N = 5\n",
        "\n",
        "\n",
        "def evaluate_precision_recall(queries, folder_path, index='financial_reports'):\n",
        "    \"\"\"Evaluate precision and recall for a set of queries against the Elasticsearch index.\"\"\"\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "\n",
        "    all_docs = set(get_document_filenames(folder_path))\n",
        "\n",
        "    for query in queries:\n",
        "        try:\n",
        "\n",
        "            preprocessed_query = preprocess_text(query)\n",
        "\n",
        "\n",
        "            s = Search(using=es, index=index).query(\"match_phrase\", content=preprocessed_query)\n",
        "            response = s.execute()\n",
        "\n",
        "\n",
        "            retrieved_docs = [hit.filename for hit in response[:TOP_N]]\n",
        "\n",
        "            # Calculate the number of relevant documents retrieved\n",
        "            relevant_retrieved = len(set(retrieved_docs) & all_docs)\n",
        "\n",
        "\n",
        "            precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "            precisions.append(precision)\n",
        "\n",
        "\n",
        "            recall = relevant_retrieved / len(all_docs) if all_docs else 0\n",
        "            recalls.append(recall)\n",
        "\n",
        "\n",
        "            print(f\"Query: {query}\")\n",
        "            print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "            print(f\"Precision: {precision:.2f}\")\n",
        "            print(f\"Recall: {recall:.2f}\")\n",
        "            print(\"-\" * 80)\n",
        "\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during search for query '{query}': {e}\")\n",
        "\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision: {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall: {avg_recall:.2f}\")\n",
        "\n",
        "create_index('financial_reports')\n",
        "\n",
        "preprocess_and_index_documents(folder_path)\n",
        "\n",
        "evaluate_precision_recall(queries, folder_path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UV6Lv6LGrGo8",
        "outputId": "0281cbb3-6e08-41e2-8a5f-2d5fe24fd36c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-1e9579c14092>:62: DeprecationWarning: The 'body' parameter is deprecated for the 'create' API and will be removed in a future version. Instead use API parameters directly. See https://github.com/elastic/elasticsearch-py/issues/1698 for more information\n",
            "  es.indices.create(index=index_name, body=index_settings)\n",
            "WARNING:elasticsearch:PUT http://localhost:9200/financial_reports [status:400 request:0.016s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Error during index creation: RequestError(400, 'illegal_argument_exception', 'The [classic] similarity may not be used anymore. Please use the [BM25] similarity or build a custom [scripted] similarity instead.')\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2023_Annual_Report.docx: dear shareholder colleague customer partner live time historic challenge opportunity write world face ongoing economic social geopolitical volatility time enter new age ai fundamentally transform prod...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2022_Annual_Report (1).docx: dear shareholder colleague customer partner live period historic economic societal geopolitical change world look like world write inflation year high supply chain stretch war ukraine ongoing time ent...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2021_Annual_Report.docx: annual report dear shareholder colleague customer partner write people organization continue struggle uncertainty pandemic continue cause suffering reflect challenging year forever remember heartbreak...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2020_Annual_Report (1).docx: dear shareholder colleague customer partner start new decade typically bring hope quickly see world come near standstill confront compound crisis public health economic crisis persistent issue systemi...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2018_Annual_Report.docx: dear shareholder customer partner employee reflect progress past year want thank commitment investment microsoft proud accomplish innovate help customer navigate digital transformation optimistic oppo...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2017_Annual_Report.docx: dear shareholder customer partner employee thank support investment microsoft proud progress year eager progress year ahead continue guide mission empower person organization planet achieve breadth de...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2016_Annual_Report.docx: dear shareholder customer partner employee proud progress company past year excite opportunity progress year ahead advance mission empower person organization planet achieve continue cultivate microso...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2015_Annual_Report.docx: dear shareholder customer partner colleague remarkable year microsoft year change opportunity company industry world company stand deeply understand need customer translate understanding product peopl...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2014_Annual_Report.docx: shareholder customer partner employee humbling experience write letter ceo microsoft history say take role originally join microsoft opportunity change world technology empower people amazing thing co...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2019_Annual_Report (1).docx: dear shareholder colleague customer partner thank continue commitment investment microsoft tremendous progress impact past year possible trust belief mission fiscal record break year company deliver b...\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Query: tree\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: []\n",
            "Precision: 0.00\n",
            "Recall: 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision: 0.00\n",
            "Average Recall: 0.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###TF-IDF question-answering"
      ],
      "metadata": {
        "id": "c40vwUc9vGpy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch_dsl import Search\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "import spacy\n",
        "import re  # For regex-based extraction\n",
        "\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "es = Elasticsearch()\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "# tokenizing, lemmatizing, and removing stop words\n",
        "def preprocess_text(text):\n",
        "    \"\"\"Preprocess text by tokenizing, lemmatizing, and removing stop words.\"\"\"\n",
        "    doc = nlp(text.lower())\n",
        "    tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]\n",
        "    return ' '.join(tokens)\n",
        "\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file and preprocess it.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        preprocessed_text = preprocess_text('\\n'.join(text))\n",
        "        print(f\"Preprocessed text for {file_path}: {preprocessed_text[:200]}...\")\n",
        "        return preprocessed_text\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def get_document_filenames(folder_path):\n",
        "    \"\"\"Get the list of .docx filenames from the specified folder.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    filenames = [os.path.basename(file_path) for file_path in file_paths_docx]\n",
        "    return filenames\n",
        "\n",
        "\n",
        "def create_index(index_name):\n",
        "    \"\"\"Create an Elasticsearch index if it does not exist.\"\"\"\n",
        "    try:\n",
        "        if not es.indices.exists(index=index_name):\n",
        "            index_settings = {\n",
        "                \"settings\": {\n",
        "                    \"similarity\": {\n",
        "                        \"default\": {\n",
        "                            \"type\": \"classic\"\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "\n",
        "            es.indices.create(index=index_name, body=index_settings)\n",
        "            print(f\"Index '{index_name}' created with TF-IDF similarity.\")\n",
        "        else:\n",
        "            print(f\"Index '{index_name}' already exists.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during index creation: {e}\")\n",
        "\n",
        "\n",
        "def preprocess_and_index_documents(folder_path, index_name='financial_reports'):\n",
        "    \"\"\"Preprocess documents and index them into Elasticsearch.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = []\n",
        "\n",
        "    for file_path in file_paths_docx:\n",
        "        preprocessed_text = read_docx(file_path)\n",
        "        if preprocessed_text.strip():\n",
        "            documents.append({\n",
        "                '_index': index_name,\n",
        "                '_source': {'content': preprocessed_text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "    if documents:\n",
        "        try:\n",
        "            bulk(es, documents)\n",
        "            print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during bulk indexing: {e}\")\n",
        "    else:\n",
        "        print(\"No documents to index.\")\n",
        "\n",
        "def answer_question(question, index='financial_reports'):\n",
        "    \"\"\"Answer a question by retrieving relevant documents and extracting answers.\"\"\"\n",
        "    try:\n",
        "        preprocessed_query = preprocess_text(question)\n",
        "\n",
        "        s = Search(using=es, index=index).query(\"multi_match\", query=preprocessed_query, fields=[\"content\"])\n",
        "        response = s.execute()\n",
        "\n",
        "        for hit in response:\n",
        "            content = hit.content\n",
        "            filename = hit.filename\n",
        "            print(f\"Checking document: {filename}\")\n",
        "\n",
        "            revenue_match = re.search(r'(total\\s+revenue|generated\\s+revenue|revenue[s]?.*?(\\$?\\d+[\\d,\\.]*))', content, re.IGNORECASE)\n",
        "\n",
        "            if revenue_match:\n",
        "                answer = revenue_match.group(0)\n",
        "                print(f\"Answer found in {filename}: {answer}\")\n",
        "                return answer\n",
        "\n",
        "        print(\"No relevant answer found in the retrieved documents.\")\n",
        "        return \"No relevant answer found.\"\n",
        "\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during search for question '{question}': {e}\")\n",
        "\n",
        "\n",
        "create_index('financial_reports')\n",
        "preprocess_and_index_documents(folder_path)\n",
        "\n",
        "question = \"Please give the number how much Microsoft generated in revenue in annual report 2023.\"\n",
        "answer = answer_question(question)\n",
        "print(f\"Answer: {answer}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fKqzeH_mvsGd",
        "outputId": "8728550f-ac59-43df-e2fc-d22cf9cbc826"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index 'financial_reports' already exists.\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2023_Annual_Report.docx: dear shareholder colleague customer partner live time historic challenge opportunity write world face ongoing economic social geopolitical volatility time enter new age ai fundamentally transform prod...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2022_Annual_Report (1).docx: dear shareholder colleague customer partner live period historic economic societal geopolitical change world look like world write inflation year high supply chain stretch war ukraine ongoing time ent...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2021_Annual_Report.docx: annual report dear shareholder colleague customer partner write people organization continue struggle uncertainty pandemic continue cause suffering reflect challenging year forever remember heartbreak...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2020_Annual_Report (1).docx: dear shareholder colleague customer partner start new decade typically bring hope quickly see world come near standstill confront compound crisis public health economic crisis persistent issue systemi...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2018_Annual_Report.docx: dear shareholder customer partner employee reflect progress past year want thank commitment investment microsoft proud accomplish innovate help customer navigate digital transformation optimistic oppo...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2017_Annual_Report.docx: dear shareholder customer partner employee thank support investment microsoft proud progress year eager progress year ahead continue guide mission empower person organization planet achieve breadth de...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2016_Annual_Report.docx: dear shareholder customer partner employee proud progress company past year excite opportunity progress year ahead advance mission empower person organization planet achieve continue cultivate microso...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2015_Annual_Report.docx: dear shareholder customer partner colleague remarkable year microsoft year change opportunity company industry world company stand deeply understand need customer translate understanding product peopl...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2014_Annual_Report.docx: shareholder customer partner employee humbling experience write letter ceo microsoft history say take role originally join microsoft opportunity change world technology empower people amazing thing co...\n",
            "Preprocessed text for /content/drive/MyDrive/Thesis/2019_Annual_Report (1).docx: dear shareholder colleague customer partner thank continue commitment investment microsoft tremendous progress impact past year possible trust belief mission fiscal record break year company deliver b...\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Checking document: 2023_Annual_Report.docx\n",
            "Answer found in 2023_Annual_Report.docx: total revenue\n",
            "Answer: total revenue\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from elasticsearch_dsl import Search\n",
        "from elasticsearch import Elasticsearch\n",
        "from elasticsearch.exceptions import ElasticsearchException\n",
        "from elasticsearch.helpers import bulk\n",
        "import re\n",
        "\n",
        "\n",
        "es = Elasticsearch()\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        combined_text = '\\n'.join(text)\n",
        "        print(f\"Read text for {file_path}: {combined_text[:200]}...\")\n",
        "        return combined_text\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "\n",
        "def get_document_filenames(folder_path):\n",
        "    \"\"\"Get the list of .docx filenames from the specified folder.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    filenames = [os.path.basename(file_path) for file_path in file_paths_docx]\n",
        "    return filenames\n",
        "\n",
        "\n",
        "def create_index(index_name):\n",
        "    \"\"\"Create an Elasticsearch index if it does not exist.\"\"\"\n",
        "    try:\n",
        "        if not es.indices.exists(index=index_name):\n",
        "            # Define settings with TF-IDF similarity\n",
        "            index_settings = {\n",
        "                \"settings\": {\n",
        "                    \"similarity\": {\n",
        "                        \"default\": {\n",
        "                            \"type\": \"classic\"  # TF-IDF similarity\n",
        "                        }\n",
        "                    }\n",
        "                }\n",
        "            }\n",
        "\n",
        "            es.indices.create(index=index_name, body=index_settings)\n",
        "            print(f\"Index '{index_name}' created with TF-IDF similarity.\")\n",
        "        else:\n",
        "            print(f\"Index '{index_name}' already exists.\")\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during index creation: {e}\")\n",
        "\n",
        "# index documents into Elasticsearch\n",
        "def index_documents(folder_path, index_name='financial_reports'):\n",
        "    \"\"\"Index documents into Elasticsearch.\"\"\"\n",
        "    file_paths_docx = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = []\n",
        "\n",
        "    for file_path in file_paths_docx:\n",
        "        combined_text = read_docx(file_path)\n",
        "        if combined_text.strip():\n",
        "            documents.append({\n",
        "                '_index': index_name,\n",
        "                '_source': {'content': combined_text, 'filename': os.path.basename(file_path)}\n",
        "            })\n",
        "\n",
        "\n",
        "    if documents:\n",
        "        try:\n",
        "            bulk(es, documents)\n",
        "            print(f\"Indexed {len(documents)} documents into Elasticsearch.\")\n",
        "        except ElasticsearchException as e:\n",
        "            print(f\"Error during bulk indexing: {e}\")\n",
        "    else:\n",
        "        print(\"No documents to index.\")\n",
        "\n",
        "# Function to answer a specific question using Elasticsearch and regex extraction\n",
        "def answer_question(question, index='financial_reports'):\n",
        "    \"\"\"Answer a question by retrieving relevant documents and extracting answers.\"\"\"\n",
        "    try:\n",
        "        s = Search(using=es, index=index).query(\"dis_max\", queries=[\n",
        "            {\"match\": {\"content\": question}},\n",
        "            {\"match_phrase\": {\"content\": question}},\n",
        "            {\"query_string\": {\"query\": f\"*{question}*\", \"fields\": [\"content\"]}}\n",
        "        ])\n",
        "        response = s.execute()\n",
        "\n",
        "        print(\"Retrieved Documents and Content Snippets:\")\n",
        "        for hit in response:\n",
        "            content = hit.content[:2000]\n",
        "            filename = hit.filename\n",
        "            print(f\"Document: {filename}\")\n",
        "            print(f\"Content Snippet: {content[:300]}...\\n\")\n",
        "\n",
        "            # Simplified and expanded regex to capture revenue-related phrases and values\n",
        "            revenue_match = re.search(\n",
        "                r'(revenue|total income|generated|turnover|sales)\\s*[:,\\-–]?\\s*(\\$?\\d{1,3}(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(million|billion|thousand|M|B|K))?)',\n",
        "                content, re.IGNORECASE)\n",
        "\n",
        "            if revenue_match:\n",
        "                answer = revenue_match.group(0)\n",
        "                print(f\"Answer found in {filename}: {answer}\")\n",
        "                return answer\n",
        "\n",
        "\n",
        "        print(\"No relevant answer found in the retrieved documents.\")\n",
        "        return \"No relevant answer found.\"\n",
        "\n",
        "    except ElasticsearchException as e:\n",
        "        print(f\"Error during search for question '{question}': {e}\")\n",
        "\n",
        "\n",
        "create_index('financial_reports')\n",
        "\n",
        "index_documents(folder_path)\n",
        "\n",
        "question = \"Please give how much we delivered in revenue in fiscal year 2023 annual report 2023.\"\n",
        "\n",
        "# Answer the question\n",
        "answer = answer_question(question)\n",
        "print(f\"Answer: {answer}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Aujw-zSd1bIb",
        "outputId": "cc50a917-76d1-4f14-b505-6026102afa4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index 'financial_reports' already exists.\n",
            "Read text for /content/drive/MyDrive/Thesis/2023_Annual_Report.docx:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolit...\n",
            "Read text for /content/drive/MyDrive/Thesis/2022_Annual_Report (1).docx:  \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "We are living through a period of historic economic, societal, and geopolitical change. The world in 2022 looks nothing like the world in 20...\n",
            "Read text for /content/drive/MyDrive/Thesis/2021_Annual_Report.docx:  \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Annual Report 2021\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "As I write this, people and organizations everywhere continue to struggle with the uncertainty of a pandemic ...\n",
            "Read text for /content/drive/MyDrive/Thesis/2020_Annual_Report (1).docx:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners: \n",
            "While the start of a new decade typically brings hope, we quickly saw the world come to a near standstill in 2020, confronted by compoundin...\n",
            "Read text for /content/drive/MyDrive/Thesis/2018_Annual_Report.docx: \n",
            " \n",
            "Dear shareholders, customers, partners and employees: \n",
            "As I reflect on our progress this past year, I first want to say thank you for your commitment and investment in Microsoft. I’m proud of what ...\n",
            "Read text for /content/drive/MyDrive/Thesis/2017_Annual_Report.docx: \n",
            "\n",
            " \n",
            "Dear shareholders, customers, partners and employees: \n",
            "Thank you for your support and investment in Microsoft. We’re proud of our progress this year, and we are eager to make even more progress in...\n",
            "Read text for /content/drive/MyDrive/Thesis/2016_Annual_Report.docx: \n",
            "Dear shareholders, customers, partners, and employees: \n",
            "I’m proud of the progress we’ve made as a company this past year and excited about the opportunity for even more progress in the year ahead. We...\n",
            "Read text for /content/drive/MyDrive/Thesis/2015_Annual_Report.docx: \n",
            "\n",
            "Dear shareholders, customers, partners and colleagues: \n",
            "It’s been a remarkable year for all of us at Microsoft, a year of change and opportunity for our company, our industry and the world. \n",
            "We as a...\n",
            "Read text for /content/drive/MyDrive/Thesis/2014_Annual_Report.docx: \n",
            " \n",
            "TO OUR SHAREHOLDERS, CUSTOMERS, PARTNERS AND EMPLOYEES: \n",
            "It is a humbling experience to write this letter to you as only the third CEO in Microsoft’s history. As I said when I took this role, I ori...\n",
            "Read text for /content/drive/MyDrive/Thesis/2019_Annual_Report (1).docx: \n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners:  \n",
            "Thank you for your continued commitment and investment in Microsoft. Our tremendous progress and impact over the past year would not have be...\n",
            "Indexed 10 documents into Elasticsearch.\n",
            "Retrieved Documents and Content Snippets:\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "Document: 2023_Annual_Report.docx\n",
            "Content Snippet:  \n",
            "\n",
            "\n",
            "Dear shareholders, colleagues, customers, and partners, \n",
            "We are living through a time of historic challenge and opportunity. As I write this, the world faces ongoing economic, social, and geopolitical volatility. At the same time, we have entered a new age of AI that will fundamentally transform...\n",
            "\n",
            "No relevant answer found in the retrieved documents.\n",
            "Answer: No relevant answer found.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Part 6: Information retrivial by using LDA"
      ],
      "metadata": {
        "id": "uzfPsffAsBeW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install gensim\n",
        "!pip install python-docx"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kUTniNxosA7K",
        "outputId": "9a9731d4-7c5b-4ec6-a34b-9c70c6c8ae08"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gensim in /usr/local/lib/python3.10/dist-packages (4.3.3)\n",
            "Requirement already satisfied: numpy<2.0,>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from gensim) (1.26.4)\n",
            "Requirement already satisfied: scipy<1.14.0,>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from gensim) (1.13.1)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from gensim) (7.0.4)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.10/dist-packages (from smart-open>=1.8.1->gensim) (1.16.0)\n",
            "Requirement already satisfied: python-docx in /usr/local/lib/python3.10/dist-packages (1.1.2)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.9.4)\n",
            "Requirement already satisfied: typing-extensions>=4.9.0 in /usr/local/lib/python3.10/dist-packages (from python-docx) (4.12.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from gensim import corpora, models\n",
        "from gensim.utils import simple_preprocess\n",
        "from gensim.parsing.preprocessing import STOPWORDS\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file using python-docx.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"Load all .docx files from the folder and return their contents as a dictionary.\"\"\"\n",
        "    file_paths = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = {}\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents[os.path.basename(file_path)] = text.lower()\n",
        "    return documents\n",
        "\n",
        "\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "\n",
        "def preprocess(text):\n",
        "    \"\"\"Preprocess text by tokenizing and removing stopwords.\"\"\"\n",
        "    return [token for token in simple_preprocess(text) if token not in STOPWORDS]\n",
        "\n",
        "processed_docs = [preprocess(doc) for doc in documents.values()]\n",
        "\n",
        "dictionary = corpora.Dictionary(processed_docs)\n",
        "corpus = [dictionary.doc2bow(doc) for doc in processed_docs]\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = models.LdaModel(corpus, num_topics=50, id2word=dictionary, passes=10)\n",
        "\n",
        "\n",
        "def get_document_topics(document):\n",
        "    bow = dictionary.doc2bow(preprocess(document))\n",
        "    return lda_model.get_document_topics(bow)\n",
        "\n",
        "# Set of our queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "\n",
        "query_topics = [get_document_topics(query) for query in queries]\n",
        "\n",
        "\n",
        "document_topics = [get_document_topics(doc) for doc in documents.values()]\n",
        "\n",
        "def vectorize_topics(topic_distribution, num_topics):\n",
        "    \"\"\"Convert a sparse topic distribution into a dense vector.\"\"\"\n",
        "    vec = np.zeros(num_topics)\n",
        "    for topic_num, weight in topic_distribution:\n",
        "        vec[topic_num] = weight\n",
        "    return vec\n",
        "\n",
        "num_topics = lda_model.num_topics\n",
        "\n",
        "def rank_documents_by_query(query_topics, document_topics):\n",
        "    \"\"\"Rank documents by cosine similarity to the query topics.\"\"\"\n",
        "    ranked_docs = []\n",
        "    query_vec = vectorize_topics(query_topics, num_topics)\n",
        "\n",
        "    for doc_id, doc_topics in enumerate(document_topics):\n",
        "        doc_vec = vectorize_topics(doc_topics, num_topics)\n",
        "        sim = cosine_similarity([query_vec], [doc_vec])[0][0]\n",
        "        ranked_docs.append((sim, doc_id))\n",
        "\n",
        "    ranked_docs = sorted(ranked_docs, key=lambda x: x[0], reverse=True)\n",
        "    return ranked_docs\n",
        "\n",
        "\n",
        "def find_relevant_docs_for_query(documents, query):\n",
        "    \"\"\"Find relevant documents for a query based on term matching.\"\"\"\n",
        "    relevant_docs = []\n",
        "    query_terms = set(preprocess(query))\n",
        "\n",
        "    for doc_name, doc_content in documents.items():\n",
        "        doc_terms = set(preprocess(doc_content))\n",
        "        if query_terms & doc_terms:\n",
        "            relevant_docs.append(doc_name)\n",
        "\n",
        "    return relevant_docs\n",
        "\n",
        "\n",
        "def evaluate_precision_recall_lda(queries, documents, document_topics, num_topics, top_n=2):\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "    for query in queries:\n",
        "        query_topics = get_document_topics(query)\n",
        "        ranked_docs = rank_documents_by_query(query_topics, document_topics)\n",
        "\n",
        "        retrieved_docs = [list(documents.keys())[doc_id] for _, doc_id in ranked_docs[:top_n]]\n",
        "\n",
        "        relevant_docs = find_relevant_docs_for_query(documents, query)\n",
        "\n",
        "        relevant_retrieved = len(set(retrieved_docs) & set(relevant_docs))\n",
        "        precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "        recall = relevant_retrieved / len(relevant_docs) if relevant_docs else 0\n",
        "        precisions.append(precision)\n",
        "        recalls.append(recall)\n",
        "\n",
        "        print(f\"Query: {query}\")\n",
        "        print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "        print(f\"Relevant Documents: {relevant_docs}\")\n",
        "        print(f\"Precision (LDA): {precision:.2f}\")\n",
        "        print(f\"Recall (LDA): {recall:.2f}\")\n",
        "        print(\"-\" * 80)\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision (LDA): {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall (LDA): {avg_recall:.2f}\")\n",
        "\n",
        "\n",
        "evaluate_precision_recall_lda(queries, documents, document_topics, num_topics)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pw1AJhw_2d-L",
        "outputId": "d43730a7-d005-4ad2-b842-39dc9f25b5a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: tree\n",
            "Retrieved Documents: ['2016_Annual_Report.docx', '2015_Annual_Report.docx']\n",
            "Relevant Documents: []\n",
            "Precision (LDA): 0.00\n",
            "Recall (LDA): 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: ['2018_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: ['2020_Annual_Report (1).docx', '2023_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.29\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: ['2020_Annual_Report (1).docx', '2023_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision (LDA): 0.88\n",
            "Average Recall (LDA): 0.19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from gensim import corpora, models\n",
        "from gensim.utils import simple_preprocess\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import numpy as np\n",
        "import spacy\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "import nltk\n",
        "\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "stop_words = set(stopwords.words('english'))\n",
        "stemmer = PorterStemmer()\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file using python-docx.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"Load all .docx files from the folder and return their contents as a dictionary.\"\"\"\n",
        "    file_paths = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = {}\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents[os.path.basename(file_path)] = text.lower()\n",
        "\n",
        "    return documents\n",
        "\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "# Preprocessing function\n",
        "def preprocess(text):\n",
        "    \"\"\"Preprocess text by removing stopwords, lemmatizing, and stemming.\"\"\"\n",
        "    doc = nlp(text)\n",
        "    tokens = []\n",
        "    for token in doc:\n",
        "        if token.is_alpha and token.text not in stop_words:  # Remove stop words and non-alphabetic tokens\n",
        "            lemma = token.lemma_  # Lemmatize\n",
        "            stemmed = stemmer.stem(lemma)  # stemming\n",
        "            tokens.append(stemmed)\n",
        "    return tokens\n",
        "\n",
        "\n",
        "processed_docs = [preprocess(doc) for doc in documents.values()]\n",
        "dictionary = corpora.Dictionary(processed_docs)\n",
        "corpus = [dictionary.doc2bow(doc) for doc in processed_docs]\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = models.LdaModel(corpus, num_topics=5, id2word=dictionary, passes=10)\n",
        "\n",
        "\n",
        "def get_document_topics(document):\n",
        "    bow = dictionary.doc2bow(preprocess(document))\n",
        "    return lda_model.get_document_topics(bow)\n",
        "\n",
        "\n",
        "# Set of our queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "\n",
        "query_topics = [get_document_topics(query) for query in queries]\n",
        "document_topics = [get_document_topics(doc) for doc in documents.values()]\n",
        "\n",
        "def vectorize_topics(topic_distribution, num_topics):\n",
        "    \"\"\"Convert a sparse topic distribution into a dense vector.\"\"\"\n",
        "    vec = np.zeros(num_topics)\n",
        "    for topic_num, weight in topic_distribution:\n",
        "        vec[topic_num] = weight\n",
        "    return vec\n",
        "\n",
        "num_topics = lda_model.num_topics\n",
        "\n",
        "def rank_documents_by_query(query_topics, document_topics):\n",
        "    \"\"\"Rank documents by cosine similarity to the query topics.\"\"\"\n",
        "    ranked_docs = []\n",
        "    query_vec = vectorize_topics(query_topics, num_topics)\n",
        "\n",
        "    for doc_id, doc_topics in enumerate(document_topics):\n",
        "        doc_vec = vectorize_topics(doc_topics, num_topics)\n",
        "        sim = cosine_similarity([query_vec], [doc_vec])[0][0]\n",
        "        ranked_docs.append((sim, doc_id))\n",
        "\n",
        "    ranked_docs = sorted(ranked_docs, key=lambda x: x[0], reverse=True)\n",
        "    return ranked_docs\n",
        "\n",
        "# Implement the missing function to find relevant documents for a query\n",
        "def find_relevant_docs_for_query(documents, query):\n",
        "    \"\"\"Find relevant documents for a query based on term matching.\"\"\"\n",
        "    relevant_docs = []# Preprocess the query terms\n",
        "\n",
        "    for doc_name, doc_content in documents.items():\n",
        "        doc_terms = set(preprocess(doc_content))\n",
        "        if query_terms & doc_terms:\n",
        "            relevant_docs.append(doc_name)\n",
        "\n",
        "    return relevant_docs\n",
        "\n",
        "\n",
        "def evaluate_precision_recall_lda(queries, documents, document_topics, num_topics, top_n=2):\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "    for query in queries:\n",
        "        query_topics = get_document_topics(query)\n",
        "        ranked_docs = rank_documents_by_query(query_topics, document_topics)\n",
        "\n",
        "        retrieved_docs = [list(documents.keys())[doc_id] for _, doc_id in ranked_docs[:top_n]]\n",
        "\n",
        "        relevant_docs = find_relevant_docs_for_query(documents, query)  # Use the defined function\n",
        "\n",
        "        relevant_retrieved = len(set(retrieved_docs) & set(relevant_docs))\n",
        "        precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "        recall = relevant_retrieved / len(relevant_docs) if relevant_docs else 0\n",
        "        precisions.append(precision)\n",
        "        recalls.append(recall)\n",
        "\n",
        "        print(f\"Query: {query}\")\n",
        "        print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "        print(f\"Relevant Documents: {relevant_docs}\")\n",
        "        print(f\"Precision (LDA): {precision:.2f}\")\n",
        "        print(f\"Recall (LDA): {recall:.2f}\")\n",
        "        print(\"-\" * 80)\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision (LDA): {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall (LDA): {avg_recall:.2f}\")\n",
        "\n",
        "# Evaluate using LDA\n",
        "evaluate_precision_recall_lda(queries, documents, document_topics, num_topics)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MHK2Mcah4H0i",
        "outputId": "3bc4c1f8-5257-44d6-98d6-7340635f9829"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "/usr/local/lib/python3.10/dist-packages/spacy/util.py:1740: UserWarning: [W111] Jupyter notebook detected: if using `prefer_gpu()` or `require_gpu()`, include it in the same cell right before `spacy.load()` to ensure that the model is loaded on the correct device. More information: http://spacy.io/usage/v3#jupyter-notebook-gpu\n",
            "  warnings.warn(Warnings.W111)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: tree\n",
            "Retrieved Documents: ['2018_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Relevant Documents: []\n",
            "Precision (LDA): 0.00\n",
            "Recall (LDA): 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: ['2018_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: ['2016_Annual_Report.docx', '2015_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: ['2016_Annual_Report.docx', '2015_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: ['2018_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: ['2016_Annual_Report.docx', '2015_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: ['2019_Annual_Report (1).docx', '2020_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.29\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: ['2019_Annual_Report (1).docx', '2020_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (LDA): 1.00\n",
            "Recall (LDA): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision (LDA): 0.88\n",
            "Average Recall (LDA): 0.19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from gensim import corpora, models\n",
        "from gensim.utils import simple_preprocess\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "import numpy as np\n",
        "import spacy  # For lemmatization\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "import nltk\n",
        "\n",
        "\n",
        "nltk.download('stopwords')\n",
        "\n",
        "\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Initialize NLTK components\n",
        "stop_words = set(stopwords.words('english'))  # Load stop words\n",
        "stemmer = PorterStemmer()  # Initialize stemmer\n",
        "\n",
        "# Load documents and preprocess\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file using python-docx.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"Load all .docx files from the folder and return their contents as a dictionary.\"\"\"\n",
        "    file_paths = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = {}\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents[os.path.basename(file_path)] = text.lower()\n",
        "\n",
        "    return documents\n",
        "\n",
        "\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "# Preprocessing function\n",
        "def preprocess(text):\n",
        "    \"\"\"Preprocess text by removing stopwords, lemmatizing, and stemming.\"\"\"\n",
        "    doc = nlp(text)\n",
        "    tokens = []\n",
        "    for token in doc:\n",
        "        if token.is_alpha and token.text not in stop_words:  # Remove stop words and non-alphabetic tokens\n",
        "            lemma = token.lemma_  # Lemmatize the token\n",
        "            stemmed = stemmer.stem(lemma)  # Apply stemming\n",
        "            tokens.append(stemmed)\n",
        "    return tokens\n",
        "\n",
        "\n",
        "processed_docs = [preprocess(doc) for doc in documents.values()]\n",
        "\n",
        "\n",
        "dictionary = corpora.Dictionary(processed_docs)\n",
        "corpus = [dictionary.doc2bow(doc) for doc in processed_docs]\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = models.LdaModel(\n",
        "    corpus=corpus,\n",
        "    id2word=dictionary,\n",
        "    num_topics=5,\n",
        "    alpha='auto',\n",
        "    eta='auto',\n",
        "    iterations=100,\n",
        "    passes=20,\n",
        "    eval_every=None,\n",
        "    random_state=42,\n",
        "    per_word_topics=True\n",
        ")\n",
        "\n",
        "\n",
        "def get_document_topics(document):\n",
        "    bow = dictionary.doc2bow(preprocess(document))\n",
        "    return lda_model.get_document_topics(bow)\n",
        "\n",
        "# queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "query_topics = [get_document_topics(query) for query in queries]\n",
        "\n",
        "\n",
        "document_topics = [get_document_topics(doc) for doc in documents.values()]\n",
        "\n",
        "def vectorize_topics(topic_distribution, num_topics):\n",
        "    \"\"\"Convert a sparse topic distribution into a dense vector.\"\"\"\n",
        "    vec = np.zeros(num_topics)\n",
        "    for topic_num, weight in topic_distribution:\n",
        "        vec[topic_num] = weight\n",
        "    return vec\n",
        "\n",
        "num_topics = lda_model.num_topics\n",
        "\n",
        "def rank_documents_by_query(query_topics, document_topics):\n",
        "    \"\"\"Rank documents by cosine similarity to the query topics using LDA.\"\"\"\n",
        "    ranked_docs = []\n",
        "    query_vec = vectorize_topics(query_topics, num_topics)\n",
        "\n",
        "    for doc_id, doc_topics in enumerate(document_topics):\n",
        "        doc_vec = vectorize_topics(doc_topics, num_topics)\n",
        "        sim = cosine_similarity([query_vec], [doc_vec])[0][0]\n",
        "        ranked_docs.append((sim, doc_id))\n",
        "\n",
        "    ranked_docs = sorted(ranked_docs, key=lambda x: x[0], reverse=True)\n",
        "    return ranked_docs\n",
        "\n",
        "\n",
        "def find_relevant_docs_for_query(documents, query):\n",
        "    \"\"\"Find relevant documents for a query based on term matching.\"\"\"\n",
        "    relevant_docs = []\n",
        "    query_terms = set(preprocess(query))\n",
        "\n",
        "    for doc_name, doc_content in documents.items():\n",
        "        doc_terms = set(preprocess(doc_content))  # Preprocess document content\n",
        "        if query_terms & doc_terms:\n",
        "            relevant_docs.append(doc_name)\n",
        "\n",
        "    return relevant_docs\n",
        "\n",
        "# TF-IDF Vectorizer\n",
        "tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
        "\n",
        "# Fit TF-IDF on documents\n",
        "doc_names = list(documents.keys())\n",
        "tfidf_matrix = tfidf_vectorizer.fit_transform(documents.values())\n",
        "\n",
        "def get_tfidf_similarity(query, tfidf_matrix):\n",
        "    \"\"\"Compute TF-IDF cosine similarity between the query and all documents.\"\"\"\n",
        "    query_vec = tfidf_vectorizer.transform([query])\n",
        "    cosine_similarities = cosine_similarity(query_vec, tfidf_matrix).flatten()\n",
        "    return cosine_similarities\n",
        "\n",
        "# Combine LDA and TF-IDF ranking\n",
        "def hybrid_rank_documents(query, document_topics, tfidf_matrix, lda_weight=0.5):\n",
        "    \"\"\"Rank documents using a hybrid of LDA and TF-IDF similarities.\"\"\"\n",
        "    query_topics = get_document_topics(query)\n",
        "    lda_ranks = rank_documents_by_query(query_topics, document_topics)\n",
        "    tfidf_similarities = get_tfidf_similarity(query, tfidf_matrix)\n",
        "\n",
        "    # Create a hybrid ranking using weighted average\n",
        "    hybrid_scores = []\n",
        "    for lda_score, doc_id in lda_ranks:\n",
        "        hybrid_score = lda_weight * lda_score + (1 - lda_weight) * tfidf_similarities[doc_id]\n",
        "        hybrid_scores.append((hybrid_score, doc_id))\n",
        "\n",
        "    hybrid_scores = sorted(hybrid_scores, key=lambda x: x[0], reverse=True)\n",
        "    return hybrid_scores\n",
        "\n",
        "# Evaluate Precision and Recall for Hybrid Approach\n",
        "def evaluate_precision_recall_hybrid(queries, documents, document_topics, tfidf_matrix, num_topics, top_n=2):\n",
        "    precisions = []\n",
        "    recalls = []\n",
        "\n",
        "    for query in queries:\n",
        "        hybrid_ranks = hybrid_rank_documents(query, document_topics, tfidf_matrix)\n",
        "\n",
        "        retrieved_docs = [doc_names[doc_id] for _, doc_id in hybrid_ranks[:top_n]]\n",
        "\n",
        "        relevant_docs = find_relevant_docs_for_query(documents, query)\n",
        "\n",
        "        relevant_retrieved = len(set(retrieved_docs) & set(relevant_docs))\n",
        "        precision = relevant_retrieved / len(retrieved_docs) if retrieved_docs else 0\n",
        "        recall = relevant_retrieved / len(relevant_docs) if relevant_docs else 0\n",
        "        precisions.append(precision)\n",
        "        recalls.append(recall)\n",
        "\n",
        "        print(f\"Query: {query}\")\n",
        "        print(f\"Retrieved Documents: {retrieved_docs}\")\n",
        "        print(f\"Relevant Documents: {relevant_docs}\")\n",
        "        print(f\"Precision (Hybrid): {precision:.2f}\")\n",
        "        print(f\"Recall (Hybrid): {recall:.2f}\")\n",
        "        print(\"-\" * 80)\n",
        "\n",
        "    avg_precision = sum(precisions) / len(precisions) if precisions else 0\n",
        "    avg_recall = sum(recalls) / len(recalls) if recalls else 0\n",
        "\n",
        "    print(f\"Average Precision (Hybrid): {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall (Hybrid): {avg_recall:.2f}\")\n",
        "\n",
        "# Evaluate using Hybrid Approach\n",
        "evaluate_precision_recall_hybrid(queries, documents, document_topics, tfidf_matrix, num_topics)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yySkNF3XgzBT",
        "outputId": "648d38a9-6107-48c0-8764-f0e168d838e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n",
            "WARNING:gensim.models.ldamodel:updated prior is not positive\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Query: tree\n",
            "Retrieved Documents: ['2018_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Relevant Documents: []\n",
            "Precision (Hybrid): 0.00\n",
            "Recall (Hybrid): 0.00\n",
            "--------------------------------------------------------------------------------\n",
            "Query: net income 2021\n",
            "Retrieved Documents: ['2021_Annual_Report.docx', '2018_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: profit margin\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: operating expenses\n",
            "Retrieved Documents: ['2017_Annual_Report.docx', '2016_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: margin\n",
            "Retrieved Documents: ['2018_Annual_Report.docx', '2017_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: fiscal year 2023 revenues\n",
            "Retrieved Documents: ['2016_Annual_Report.docx', '2017_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Query: AI\n",
            "Retrieved Documents: ['2023_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.29\n",
            "--------------------------------------------------------------------------------\n",
            "Query: cloud\n",
            "Retrieved Documents: ['2019_Annual_Report (1).docx', '2018_Annual_Report.docx']\n",
            "Relevant Documents: ['2023_Annual_Report.docx', '2022_Annual_Report (1).docx', '2021_Annual_Report.docx', '2020_Annual_Report (1).docx', '2018_Annual_Report.docx', '2017_Annual_Report.docx', '2016_Annual_Report.docx', '2015_Annual_Report.docx', '2014_Annual_Report.docx', '2019_Annual_Report (1).docx']\n",
            "Precision (Hybrid): 1.00\n",
            "Recall (Hybrid): 0.20\n",
            "--------------------------------------------------------------------------------\n",
            "Average Precision (Hybrid): 0.88\n",
            "Average Recall (Hybrid): 0.19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###LDA with question-answering testing"
      ],
      "metadata": {
        "id": "ZCEKSUcnvIvW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from gensim import corpora, models\n",
        "from gensim.utils import simple_preprocess\n",
        "from gensim.parsing.preprocessing import STOPWORDS\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import numpy as np\n",
        "\n",
        "# Load documents and preprocess\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file using python-docx.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"Load all .docx files from the folder and return their contents as a dictionary.\"\"\"\n",
        "    file_paths = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = {}\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents[os.path.basename(file_path)] = text.lower()\n",
        "    return documents\n",
        "\n",
        "# Load documents\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "# Preprocessing function\n",
        "def preprocess(text):\n",
        "    \"\"\"Preprocess text by tokenizing and removing stopwords.\"\"\"\n",
        "    return [token for token in simple_preprocess(text) if token not in STOPWORDS]\n",
        "\n",
        "processed_docs = [preprocess(doc) for doc in documents.values()]\n",
        "\n",
        "# Create dictionary and corpus for LDA\n",
        "dictionary = corpora.Dictionary(processed_docs)\n",
        "corpus = [dictionary.doc2bow(doc) for doc in processed_docs]\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = models.LdaModel(corpus, num_topics=5, id2word=dictionary, passes=10)\n",
        "\n",
        "def get_document_topics(document):\n",
        "    \"\"\"Get topic distribution for a document using LDA.\"\"\"\n",
        "    bow = dictionary.doc2bow(preprocess(document))\n",
        "    return lda_model.get_document_topics(bow)\n",
        "\n",
        "def vectorize_topics(topic_distribution, num_topics):\n",
        "    \"\"\"Convert a sparse topic distribution into a dense vector.\"\"\"\n",
        "    vec = np.zeros(num_topics)\n",
        "    for topic_num, weight in topic_distribution:\n",
        "        vec[topic_num] = weight\n",
        "    return vec\n",
        "\n",
        "num_topics = lda_model.num_topics\n",
        "\n",
        "def rank_documents_by_query(query_topics, document_topics):\n",
        "    \"\"\"Rank documents by cosine similarity to the query topics.\"\"\"\n",
        "    ranked_docs = []\n",
        "    query_vec = vectorize_topics(query_topics, num_topics)\n",
        "\n",
        "    for doc_id, doc_topics in enumerate(document_topics):\n",
        "        doc_vec = vectorize_topics(doc_topics, num_topics)\n",
        "        sim = cosine_similarity([query_vec], [doc_vec])[0][0]\n",
        "        ranked_docs.append((sim, doc_id))\n",
        "\n",
        "    ranked_docs = sorted(ranked_docs, key=lambda x: x[0], reverse=True)\n",
        "    return ranked_docs\n",
        "\n",
        "def find_answer_in_document(document, keywords):\n",
        "    \"\"\"Find relevant sentences containing specific keywords in a document.\"\"\"\n",
        "    sentences = document.split('.')\n",
        "    for sentence in sentences:\n",
        "        if any(keyword in sentence for keyword in keywords):\n",
        "            return sentence.strip()\n",
        "    return None\n",
        "\n",
        "def answer_question_with_lda(question, documents, lda_model, top_n=3):\n",
        "    \"\"\"Answer a question using LDA topic modeling.\"\"\"\n",
        "    # Step 1: Preprocess the question\n",
        "    preprocessed_question = ' '.join(preprocess(question))\n",
        "\n",
        "    # Step 2: Convert question to topic space using LDA\n",
        "    question_topics = get_document_topics(preprocessed_question)\n",
        "\n",
        "    # Step 3: Rank documents by LDA similarity to the question\n",
        "    document_topics = [get_document_topics(doc) for doc in documents.values()]\n",
        "    ranked_docs = rank_documents_by_query(question_topics, document_topics)\n",
        "\n",
        "    # Step 4: Retrieve top-n ranked documents\n",
        "    top_docs = [list(documents.keys())[doc_id] for _, doc_id in ranked_docs[:top_n]]\n",
        "\n",
        "    # Step 5: Search for relevant information in top-ranked documents\n",
        "    keywords = ['revenue', 'generated']  # Keywords to search in the documents\n",
        "    for doc in top_docs:\n",
        "        answer = find_answer_in_document(documents[doc], keywords)\n",
        "        if answer:\n",
        "            print(f\"Answer found in {doc}: {answer}\")\n",
        "            return\n",
        "\n",
        "    print(\"No relevant answer found in the retrieved documents.\")\n",
        "\n",
        "# Question to answer\n",
        "question = \"Please give the number how much Microsoft generated in revenue in fiscal year 2023?\"\n",
        "\n",
        "# Answer the question using LDA\n",
        "answer_question_with_lda(question, documents, lda_model, top_n=3)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8mI4B3a0vMcL",
        "outputId": "4756c58b-e51b-4417-dd9b-126641549fb1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Answer found in 2016_Annual_Report.docx: we generated $85\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import glob\n",
        "from docx import Document\n",
        "from gensim import corpora, models\n",
        "from gensim.utils import simple_preprocess\n",
        "from gensim.parsing.preprocessing import STOPWORDS\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import numpy as np\n",
        "\n",
        "# Load documents and preprocess\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "def read_docx(file_path):\n",
        "    \"\"\"Read text from a .docx file using python-docx.\"\"\"\n",
        "    try:\n",
        "        doc = Document(file_path)\n",
        "        text = []\n",
        "        for paragraph in doc.paragraphs:\n",
        "            text.append(paragraph.text)\n",
        "        return '\\n'.join(text)\n",
        "    except Exception as e:\n",
        "        print(f\"Error reading .docx file {file_path}: {e}\")\n",
        "        return \"\"\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"Load all .docx files from the folder and return their contents as a dictionary.\"\"\"\n",
        "    file_paths = glob.glob(os.path.join(folder_path, '*.docx'))\n",
        "    documents = {}\n",
        "\n",
        "    for file_path in file_paths:\n",
        "        text = read_docx(file_path)\n",
        "        if text.strip():\n",
        "            documents[os.path.basename(file_path)] = text.lower()\n",
        "    return documents\n",
        "\n",
        "# Load documents\n",
        "documents = load_documents_from_folder(folder_path)\n",
        "\n",
        "# Preprocessing function\n",
        "def preprocess(text):\n",
        "    \"\"\"Preprocess text by tokenizing and removing stopwords.\"\"\"\n",
        "    return [token for token in simple_preprocess(text) if token not in STOPWORDS]\n",
        "\n",
        "processed_docs = [preprocess(doc) for doc in documents.values()]\n",
        "\n",
        "# Create dictionary and corpus for LDA\n",
        "dictionary = corpora.Dictionary(processed_docs)\n",
        "corpus = [dictionary.doc2bow(doc) for doc in processed_docs]\n",
        "\n",
        "# Train LDA model\n",
        "lda_model = models.LdaModel(corpus, num_topics=50, id2word=dictionary, passes=10)\n",
        "\n",
        "def get_document_topics(document):\n",
        "    \"\"\"Get topic distribution for a document using LDA.\"\"\"\n",
        "    bow = dictionary.doc2bow(preprocess(document))\n",
        "    return lda_model.get_document_topics(bow)\n",
        "\n",
        "def vectorize_topics(topic_distribution, num_topics):\n",
        "    \"\"\"Convert a sparse topic distribution into a dense vector.\"\"\"\n",
        "    vec = np.zeros(num_topics)\n",
        "    for topic_num, weight in topic_distribution:\n",
        "        vec[topic_num] = weight\n",
        "    return vec\n",
        "\n",
        "num_topics = lda_model.num_topics\n",
        "\n",
        "def rank_documents_by_query(query_topics, document_topics):\n",
        "    \"\"\"Rank documents by cosine similarity to the query topics.\"\"\"\n",
        "    ranked_docs = []\n",
        "    query_vec = vectorize_topics(query_topics, num_topics)\n",
        "\n",
        "    for doc_id, doc_topics in enumerate(document_topics):\n",
        "        doc_vec = vectorize_topics(doc_topics, num_topics)\n",
        "        sim = cosine_similarity([query_vec], [doc_vec])[0][0]\n",
        "        ranked_docs.append((sim, doc_id))\n",
        "\n",
        "    ranked_docs = sorted(ranked_docs, key=lambda x: x[0], reverse=True)\n",
        "    return ranked_docs\n",
        "\n",
        "def find_relevant_sentences_in_document(document, keywords):\n",
        "    \"\"\"Find all relevant sentences containing specific keywords in a document.\"\"\"\n",
        "    sentences = document.split('.')\n",
        "    relevant_sentences = []\n",
        "    for sentence in sentences:\n",
        "        if any(keyword in sentence for keyword in keywords):\n",
        "            relevant_sentences.append(sentence.strip())\n",
        "    return relevant_sentences\n",
        "\n",
        "def answer_question_with_lda(question, documents, lda_model, top_n=3):\n",
        "    \"\"\"Answer a question using LDA topic modeling.\"\"\"\n",
        "    # Step 1: Preprocess the question\n",
        "    preprocessed_question = ' '.join(preprocess(question))\n",
        "\n",
        "    # Step 2: Convert question to topic space using LDA\n",
        "    question_topics = get_document_topics(preprocessed_question)\n",
        "\n",
        "    # Step 3: Rank documents by LDA similarity to the question\n",
        "    document_topics = [get_document_topics(doc) for doc in documents.values()]\n",
        "    ranked_docs = rank_documents_by_query(question_topics, document_topics)\n",
        "\n",
        "    # Step 4: Retrieve top-n ranked documents\n",
        "    top_docs = [list(documents.keys())[doc_id] for _, doc_id in ranked_docs[:top_n]]\n",
        "\n",
        "    # Step 5: Search for relevant information in top-ranked documents\n",
        "    keywords = ['revenue', 'generated', 'total revenue', 'microsoft revenue', 'annual revenue 2023']  # Expanded keywords\n",
        "    all_answers = []\n",
        "\n",
        "    for doc in top_docs:\n",
        "        relevant_sentences = find_relevant_sentences_in_document(documents[doc], keywords)\n",
        "        if relevant_sentences:\n",
        "            for sentence in relevant_sentences:\n",
        "                all_answers.append((doc, sentence))\n",
        "\n",
        "    # Step 6: Print all relevant answers\n",
        "    if all_answers:\n",
        "        print(f\"Answers found in the retrieved documents:\")\n",
        "        for doc, answer in all_answers:\n",
        "            print(f\"Answer found in {doc}: {answer}\")\n",
        "    else:\n",
        "        print(\"No relevant answer found in the retrieved documents.\")\n",
        "\n",
        "# Question to answer\n",
        "question = \"Please give the number how much Microsoft generated in revenue in annual report 2023.\"\n",
        "\n",
        "# Answer the question using LDA\n",
        "answer_question_with_lda(question, documents, lda_model, top_n=3)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TCyE522lwV1v",
        "outputId": "751f39e2-80af-4e20-dc05-6fe2ed1cd1eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Answers found in the retrieved documents:\n",
            "Answer found in 2022_Annual_Report (1).docx: amid this dynamic environment, we delivered record results in fiscal year 2022: we reported $198 billion in revenue and $83 billion in operating income\n",
            "Answer found in 2022_Annual_Report (1).docx: and the microsoft cloud surpassed $100 billion in annualized revenue for the first time\n",
            "Answer found in 2022_Annual_Report (1).docx: linkedin now has more than 850 million members, and our sales, talent, marketing, and premium subscriptions lines of business have all surpassed $1 billion in annual revenue over the past 12 months\n",
            "Answer found in 2022_Annual_Report (1).docx: office commercial revenue is mainly affected by a combination of continued installed base growth and average revenue per user expansion, as well as the continued shift from office licensed on-premises to office 365\n",
            "Answer found in 2022_Annual_Report (1).docx: office consumer revenue is mainly affected by the percentage of customers that buy office with their new devices and the continued shift from office licensed on-premises to microsoft 365 consumer subscriptions\n",
            "Answer found in 2022_Annual_Report (1).docx: office consumer services revenue is mainly affected by the demand for communication and storage through skype, outlook\n",
            "Answer found in 2022_Annual_Report (1).docx: linkedin revenue is mainly affected by demand from enterprises and professional organizations for subscriptions to talent solutions, sales solutions, and premium subscriptions offerings, as well as member engagement and the quality of the sponsored content delivered to those members to drive marketing solutions\n",
            "Answer found in 2022_Annual_Report (1).docx: dynamics revenue is driven by the number of users licensed and applications consumed, expansion of average revenue per user, and the continued shift to dynamics 365, a unified set of cloud-based intelligent business applications, including power apps and power automate\n",
            "Answer found in 2022_Annual_Report (1).docx: marketing solutions competes with online and offline outlets that generate revenue from advertisers and marketers, and sales solutions competes with online and offline outlets for companies with lead generation and customer intelligence and insights\n",
            "Answer found in 2022_Annual_Report (1).docx: azure revenue is mainly affected by infrastructure-as-a-service and platform-as-a-service consumption-based services, and per user-based services such as enterprise mobility + security\n",
            "Answer found in 2022_Annual_Report (1).docx: server products revenue is mainly affected by purchases through volume licensing programs, licenses sold to original equipment manufacturers (“oem”), and retail packaged products\n",
            "Answer found in 2022_Annual_Report (1).docx: cals provide access rights to certain server products, including sql server and windows server, and revenue is reported along with the associated server product\n",
            "Answer found in 2022_Annual_Report (1).docx: windows oem revenue is impacted significantly by the number of windows operating system licenses purchased by oems, which they pre-install on the devices they sell\n",
            "Answer found in 2022_Annual_Report (1).docx: in addition to computing device market volume, windows oem revenue is impacted by: \n",
            "•\tthe mix of computing devices based on form factor and screen size\n",
            "Answer found in 2022_Annual_Report (1).docx: windows commercial revenue, which includes volume licensing of the windows operating system and windows cloud services such as microsoft defender for endpoint, is affected mainly by the demand from commercial customers for volume licensing and software assurance (“sa”), as well as advanced security offerings\n",
            "Answer found in 2022_Annual_Report (1).docx: windows commercial revenue often reflects the number of information workers in a licensed enterprise and is relatively independent of the number of pcs sold in a given year\n",
            "Answer found in 2022_Annual_Report (1).docx: xbox revenue is mainly affected by subscriptions and sales of first- and third-party content, as well as advertising\n",
            "Answer found in 2022_Annual_Report (1).docx: we generate revenue by offering a wide range of cloud-based and other services to people and businesses; licensing and supporting an array of software products; designing, manufacturing, and selling devices; and delivering relevant online advertising to a global audience\n",
            "Answer found in 2022_Annual_Report (1).docx: highlights from fiscal year 2022 compared with fiscal year 2021 included: \n",
            "•\tmicrosoft cloud (formerly commercial cloud) revenue increased 32% to $91\n",
            "Answer found in 2022_Annual_Report (1).docx: •\toffice commercial products and cloud services revenue increased 13% driven by office 365 commercial growth of 18%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\toffice consumer products and cloud services revenue increased 11% and microsoft 365 consumer subscribers grew to 59\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tlinkedin revenue increased 34%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tdynamics products and cloud services revenue increased 25% driven by dynamics 365 growth of 39%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tserver products and cloud services revenue increased 28% driven by azure and other cloud services growth of 45%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\twindows original equipment manufacturer licensing (“windows oem”) revenue increased 11%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\twindows commercial products and cloud services revenue increased 11%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\txbox content and services revenue increased 3%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tsearch and news advertising revenue excluding traffic acquisition costs increased 27%\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tsurface revenue increased 3%\n",
            "Answer found in 2022_Annual_Report (1).docx: our international operations provide a significant portion of our total revenue and expenses\n",
            "Answer found in 2022_Annual_Report (1).docx: many of these revenue and expenses are denominated in currencies other than the u\n",
            "Answer found in 2022_Annual_Report (1).docx: as a result, changes in foreign exchange rates may significantly affect revenue and expenses\n",
            "Answer found in 2022_Annual_Report (1).docx: dollar relative to certain foreign currencies did not have a material impact on reported revenue or expenses from our international operations in fiscal year 2022\n",
            "Answer found in 2022_Annual_Report (1).docx: seasonality \n",
            "our revenue fluctuates quarterly and is generally higher in the second and fourth quarters of our fiscal year\n",
            "Answer found in 2022_Annual_Report (1).docx: second quarter revenue is driven by corporate year-end spending trends in our major markets and holiday season spending by consumers, and fourth quarter revenue is driven by the volume of multi-year on-premises contracts executed during the period\n",
            "Answer found in 2022_Annual_Report (1).docx: in the first quarter of fiscal year 2022, we made updates to the presentation and method of calculation for certain metrics, most notably changes to incorporate all current and anticipated revenue streams within our office consumer and server products and cloud services metrics and changes to align with how we manage our windows oem and search and news advertising businesses\n",
            "Answer found in 2022_Annual_Report (1).docx: nuance is included in all commercial metrics and our server products and cloud services revenue growth metric\n",
            "Answer found in 2022_Annual_Report (1).docx: azure and other cloud services revenue includes nuance cloud services, and server products revenue includes nuance on-premises offerings\n",
            "Answer found in 2022_Annual_Report (1).docx: fiscal year 2022 compared with fiscal year 2021 \n",
            "revenue increased $30\n",
            "Answer found in 2022_Annual_Report (1).docx: intelligent cloud revenue increased driven by azure and other cloud services\n",
            "Answer found in 2022_Annual_Report (1).docx: productivity and business processes revenue increased driven by office 365 commercial and linkedin\n",
            "Answer found in 2022_Annual_Report (1).docx: more personal computing revenue increased driven by search and news advertising and windows\n",
            "Answer found in 2022_Annual_Report (1).docx: cost of revenue increased $10\n",
            "Answer found in 2022_Annual_Report (1).docx: segment results of operations \n",
            " \n",
            " \n",
            "reportable segments \n",
            "fiscal year 2022 compared with fiscal year 2021 \n",
            "productivity and business processes \n",
            "revenue increased $9\n",
            "Answer found in 2022_Annual_Report (1).docx: •\toffice commercial products and cloud services revenue increased $4\n",
            "Answer found in 2022_Annual_Report (1).docx: office 365 commercial revenue grew 18% driven by seat growth of 14%, with continued momentum in small and medium business and frontline worker offerings, as well as growth in revenue per user\n",
            "Answer found in 2022_Annual_Report (1).docx: office commercial products revenue declined 22% driven by continued customer shift to cloud offerings\n",
            "Answer found in 2022_Annual_Report (1).docx: •\toffice consumer products and cloud services revenue increased $641 million or 11% driven by microsoft 365 consumer subscription revenue\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tlinkedin revenue increased $3\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tdynamics products and cloud services revenue increased 25% driven by dynamics 365 growth of 39%\n",
            "Answer found in 2022_Annual_Report (1).docx: intelligent cloud \n",
            "revenue increased $15\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tserver products and cloud services revenue increased $14\n",
            "Answer found in 2022_Annual_Report (1).docx: azure and other cloud services revenue grew 45% driven by growth in our consumption-based services\n",
            "Answer found in 2022_Annual_Report (1).docx: server products revenue increased 5% driven by hybrid solutions, including windows server and sql server running in multi-cloud environments\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tenterprise services revenue increased $464 million or 7% driven by growth in enterprise support services\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue and operating income included an unfavorable foreign currency impact of 2% and 3%, respectively\n",
            "Answer found in 2022_Annual_Report (1).docx: more personal computing \n",
            "revenue increased $5\n",
            "Answer found in 2022_Annual_Report (1).docx: •\twindows revenue increased $2\n",
            "Answer found in 2022_Annual_Report (1).docx: windows oem revenue increased 11% driven by continued strength in the commercial pc market, which has higher revenue per license\n",
            "Answer found in 2022_Annual_Report (1).docx: windows commercial products and cloud services revenue increased 11% driven by demand for microsoft 365\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tsearch and news advertising revenue increased $2\n",
            "Answer found in 2022_Annual_Report (1).docx: search and news advertising revenue excluding traffic acquisition costs increased 27% driven by higher revenue per search and search volume\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tgaming revenue increased $860 million or 6% on a strong prior year comparable that benefited from xbox series x|s launches and stay-at-home scenarios, driven by growth in xbox hardware and xbox content and services\n",
            "Answer found in 2022_Annual_Report (1).docx: xbox hardware revenue increased 16% due to continued demand for xbox series x|s\n",
            "Answer found in 2022_Annual_Report (1).docx: xbox content and services revenue increased 3% driven by growth in xbox game pass subscriptions and first-party content, offset in part by a decline in third-party content\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tsurface revenue increased $226 million or 3%\n",
            "Answer found in 2022_Annual_Report (1).docx: uncertain tax positions \n",
            "we settled a portion of the internal revenue service (“irs”) audit for tax years 2004 to 2006 in fiscal year 2011\n",
            "Answer found in 2022_Annual_Report (1).docx: in february 2012, the irs withdrew its 2011 revenue agents report related to unresolved issues for tax years 2004 to 2006 and reopened the audit phase of the examination\n",
            "Answer found in 2022_Annual_Report (1).docx: unearned revenue \n",
            "unearned revenue comprises mainly unearned revenue related to volume licensing programs, which may include software assurance (“sa”) and cloud services\n",
            "Answer found in 2022_Annual_Report (1).docx: unearned revenue is generally invoiced annually at the beginning of each contract period for multi-year agreements and recognized ratably over the coverage period\n",
            "Answer found in 2022_Annual_Report (1).docx: unearned revenue also includes payments for other offerings for which we have been paid in advance and earn the revenue when we transfer control of the product or service\n",
            "Answer found in 2022_Annual_Report (1).docx: the following table outlines the expected future recognition of unearned revenue as of june 30, 2022: \n",
            " \n",
            "if our customers choose to license cloud-based versions of our products and services rather than licensing transaction-based products and services, the associated revenue will shift from being recognized at the time of the transaction to being recognized over the subscription period or upon consumption, as applicable\n",
            "Answer found in 2022_Annual_Report (1).docx: preparing consolidated financial statements requires management to make estimates and assumptions that affect the reported amounts of assets, liabilities, revenue, and expenses\n",
            "Answer found in 2022_Annual_Report (1).docx: we have critical accounting estimates in the areas of revenue recognition, impairment of investment securities, goodwill, research and development costs, legal and other contingencies, income taxes, and inventories\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue recognition \n",
            "our contracts with customers often include promises to transfer multiple products and services to a customer\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue from office 365 is recognized ratably over the period in which the cloud services are provided\n",
            "Answer found in 2022_Annual_Report (1).docx: our products are generally sold with a right of return, we may provide other credits or incentives, and in certain instances we estimate customer usage of our products and services, which are accounted for as variable consideration when determining the amount of revenue to recognize\n",
            "Answer found in 2022_Annual_Report (1).docx: the amortization of these costs is included in cost of revenue over the estimated life of the products\n",
            "Answer found in 2022_Annual_Report (1).docx: if our review indicates a reduction in utility below carrying value, we reduce our inventory to a new cost basis through a charge to cost of revenue\n",
            "Answer found in 2022_Annual_Report (1).docx: estimates and assumptions \n",
            "preparing financial statements requires management to make estimates and assumptions that affect the reported amounts of assets, liabilities, revenue, and expenses\n",
            "Answer found in 2022_Annual_Report (1).docx: examples of estimates and assumptions include: for revenue recognition, determining the nature and timing of satisfaction of performance obligations, and determining the standalone selling price (“ssp”) of performance obligations, variable consideration, and other obligations such as product returns and refunds; loss contingencies; product warranties; the fair value of and/or potential impairment of goodwill and intangible assets for our reporting units; product life cycles; useful lives of our tangible and intangible assets; allowances for doubtful accounts; the market value of, and demand for, our inventory; stock-based compensation forfeiture rates; when technological feasibility is achieved for our products; the potential outcome of uncertain tax positions that have been recognized in our consolidated financial statements or tax returns; and determining the timing and amount of impairments for investments\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue and expenses are translated at average rates of exchange prevailing during the year\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue \n",
            "product revenue and service and other revenue \n",
            "product revenue includes sales from operating systems, cross-device productivity applications, server applications, business solution applications, desktop and server management tools, software development tools, video games, and hardware such as pcs, tablets, gaming and entertainment consoles, other intelligent devices, and related accessories\n",
            "Answer found in 2022_Annual_Report (1).docx: service and other revenue includes sales from cloud-based solutions that provide customers with software, services, platforms, and content such as office 365, azure, dynamics 365, and xbox; solution support; and consulting services\n",
            "Answer found in 2022_Annual_Report (1).docx: service and other revenue also includes sales from online advertising and linkedin\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue recognition \n",
            "revenue is recognized upon transfer of control of promised products or services to customers in an amount that reflects the consideration we expect to receive in exchange for those products or services\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue is recognized net of allowances for returns and any taxes collected from customers, which are subsequently remitted to governmental authorities\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue from distinct on-premises licenses is recognized upfront at the point in time when the software is made available to the customer\n",
            "Answer found in 2022_Annual_Report (1).docx: in cases where we allocate revenue to software updates, primarily because the updates are provided at no additional charge, revenue is recognized as the updates are provided, which is generally ratably over the estimated life of the related device or license\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue allocated to sa is generally recognized ratably over the contract period as customers simultaneously consume and receive benefits, given that sa comprises distinct performance obligations that are satisfied over time\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue related to cloud services provided on a subscription basis is recognized ratably over the contract period\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue related to cloud services provided on a consumption basis, such as the amount of storage used in a period, is recognized based on the customer utilization of such resources\n",
            "Answer found in 2022_Annual_Report (1).docx: when cloud services require a significant level of integration and interdependency with software and the individual components are not considered distinct, all revenue is recognized over the period in which the cloud services are provided\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue from search advertising is recognized when the advertisement appears in the search results or when the action necessary to earn the revenue has been completed\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue from consulting services is recognized as services are provided\n",
            "Answer found in 2022_Annual_Report (1).docx: in these cases, the hardware and software license are accounted for as a single performance obligation and revenue is recognized at the point in time when ownership is transferred to resellers or directly to end customers through retail stores and online marketplaces\n",
            "Answer found in 2022_Annual_Report (1).docx: refer to note 19 – segment information and geographic data for further information, including revenue by significant product and service offering\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue from office 365 is recognized ratably over the period in which the cloud services are provided\n",
            "Answer found in 2022_Annual_Report (1).docx: our products are generally sold with a right of return, we may provide other credits or incentives, and in certain instances we estimate customer usage of our products and services, which are accounted for as variable consideration when determining the amount of revenue to recognize\n",
            "Answer found in 2022_Annual_Report (1).docx: contract balances and other receivables \n",
            "timing of revenue recognition may differ from the timing of invoicing to customers\n",
            "Answer found in 2022_Annual_Report (1).docx: we record a receivable when revenue is recognized prior to invoicing, or unearned revenue when revenue is recognized subsequent to invoicing\n",
            "Answer found in 2022_Annual_Report (1).docx: we record a receivable related to revenue recognized for multi-year on-premises licenses as we have an unconditional right to invoice and receive payment in the future related to those licenses\n",
            "Answer found in 2022_Annual_Report (1).docx: unearned revenue comprises mainly unearned revenue related to volume licensing programs, which may include sa and cloud services\n",
            "Answer found in 2022_Annual_Report (1).docx: unearned revenue is generally invoiced annually at the beginning of each contract period for multi-year agreements and recognized ratably over the coverage period\n",
            "Answer found in 2022_Annual_Report (1).docx: unearned revenue also includes payments for consulting services to be performed in the future, linkedin subscriptions, office 365 subscriptions, xbox subscriptions, windows post-delivery support, dynamics business solutions, and other offerings for which we have been paid in advance and earn the revenue when we transfer control of the product or service\n",
            "Answer found in 2022_Annual_Report (1).docx: refer to note 13 – unearned revenue for further information, including unearned revenue by segment and changes in unearned revenue during the period\n",
            "Answer found in 2022_Annual_Report (1).docx: in instances where the timing of revenue recognition differs from the timing of invoicing, we have determined our contracts generally do not include a significant financing component\n",
            "Answer found in 2022_Annual_Report (1).docx: examples include invoicing at the beginning of a subscription term with revenue recognized ratably over the contract period, and multi-year on-premises licenses that are invoiced annually with revenue recognized upfront\n",
            "Answer found in 2022_Annual_Report (1).docx: cost of revenue \n",
            "cost of revenue includes: manufacturing and distribution costs for products sold and programs licensed; operating costs related to product support service centers and product distribution centers; costs incurred to include software on pcs sold by original equipment manufacturers (“oem”), to drive traffic to our websites, and to acquire online \n",
            "advertising space; costs incurred to support and maintain online products and services, including datacenter costs and royalties; warranty costs; inventory valuation adjustments; costs associated with the delivery of consulting services; and the amortization of capitalized software development costs\n",
            "Answer found in 2022_Annual_Report (1).docx: product warranty \n",
            "we provide for the estimated costs of fulfilling our obligations under hardware and software warranties at the time the related revenue is recognized\n",
            "Answer found in 2022_Annual_Report (1).docx: once technological feasibility is reached, such costs are capitalized and amortized to cost of revenue over the estimated lives of the products\n",
            "Answer found in 2022_Annual_Report (1).docx: if our review indicates a reduction in utility below carrying value, we reduce our inventory to a new cost basis through a charge to cost of revenue\n",
            "Answer found in 2022_Annual_Report (1).docx: rate, generated 71%, 82%, and 86% of our foreign income before tax\n",
            "Answer found in 2022_Annual_Report (1).docx: the aggregate changes in the gross unrecognized tax benefits related to uncertain tax positions were as follows: \n",
            " \n",
            "we settled a portion of the internal revenue service (“irs”) audit for tax years 2004 to 2006 in fiscal year 2011\n",
            "Answer found in 2022_Annual_Report (1).docx: in february 2012, the irs withdrew its 2011 revenue agents report related to unresolved issues for tax years 2004 to 2006 and reopened the audit phase of the examination\n",
            "Answer found in 2022_Annual_Report (1).docx: note 13 — unearned revenue \n",
            "unearned revenue by segment was as follows: \n",
            " \n",
            "changes in unearned revenue were as follows: \n",
            " \n",
            "revenue allocated to remaining performance obligations, which includes unearned revenue and amounts that will be invoiced and recognized as revenue in future periods, was $193 billion as of june 30, 2022, of which $189 billion is related to the commercial portion of revenue\n",
            "Answer found in 2022_Annual_Report (1).docx: we expect to recognize approximately 45% of this revenue over the next 12 months and the remainder thereafter\n",
            "Answer found in 2022_Annual_Report (1).docx: that qualify under section 401(k) of the internal revenue code, and a number of savings plans in international locations\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue and costs are generally directly attributed to our segments\n",
            "Answer found in 2022_Annual_Report (1).docx: however, due to the integrated structure of our business, certain revenue recognized and costs incurred by one segment may benefit other segments\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue from certain contracts is allocated among the segments based on the relative value of the underlying products and services, which can include allocation based on actual prices charged, prices when sold separately, or estimated costs plus a profit margin\n",
            "Answer found in 2022_Annual_Report (1).docx: cost of revenue is allocated in certain cases based on a relative revenue methodology\n",
            "Answer found in 2022_Annual_Report (1).docx: segment revenue and operating income were as follows during the periods presented: \n",
            " \n",
            "no sales to an individual customer or country other than the united states accounted for more than 10% of revenue for fiscal years 2022, 2021, or 2020\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue, classified by the major geographic areas in which our customers were located, was as follows: \n",
            " \n",
            "(a)\tincludes billings to oems and certain multinational organizations because of the nature of these businesses and the impracticability of determining the geographic source of the revenue\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue, classified by significant product and service offerings, was as follows: \n",
            " \n",
            "we have recast certain previously reported amounts in the table above to conform to the way we internally manage and monitor our business\n",
            "Answer found in 2022_Annual_Report (1).docx: our microsoft cloud (formerly commercial cloud) revenue, which includes azure and other cloud services, office 365 commercial, the commercial portion of linkedin, dynamics 365, and other commercial cloud properties, was $91\n",
            "Answer found in 2022_Annual_Report (1).docx: revenue recognition – refer to note 1 to the financial statements \n",
            "critical audit matter description \n",
            "the company recognizes revenue upon transfer of control of promised products or services to customers in an amount that reflects the consideration the company expects to receive in exchange for those products or services\n",
            "Answer found in 2022_Annual_Report (1).docx: significant judgment is exercised by the company in determining revenue recognition for these customer agreements, and includes the following: \n",
            "•\tdetermination of whether products and services are considered distinct performance obligations that should be accounted for separately versus together, such as software licenses and related services that are sold with cloud-based services\n",
            "Answer found in 2022_Annual_Report (1).docx: , timing of when revenue is recognized) for each distinct performance obligation\n",
            "Answer found in 2022_Annual_Report (1).docx: •\tidentification and treatment of contract terms that may impact the timing and amount of revenue recognized (e\n",
            "Answer found in 2022_Annual_Report (1).docx: given these factors and due to the volume of transactions, the related audit effort in evaluating management’s judgments in determining revenue recognition for these customer agreements was extensive and required a high degree of auditor judgment\n",
            "Answer found in 2022_Annual_Report (1).docx: how the critical audit matter was addressed in the audit \n",
            "our principal audit procedures related to the company’s revenue recognition for these customer agreements included the following: \n",
            "•\twe tested the effectiveness of controls related to the identification of distinct performance obligations, the determination of the timing of revenue recognition, and the estimation of variable consideration\n",
            "Answer found in 2022_Annual_Report (1).docx: -\tassessed the terms in the customer agreement and evaluated the appropriateness of management’s application of their accounting policies, along with their use of estimates, in the determination of revenue recognition conclusions\n",
            "Answer found in 2022_Annual_Report (1).docx: •\twe tested the mathematical accuracy of management’s calculations of revenue and the associated timing of revenue recognized in the financial statements\n",
            "Answer found in 2022_Annual_Report (1).docx: income taxes — uncertain tax positions — refer to note 12 to the financial statements \n",
            "critical audit matter description \n",
            "the company’s long-term income taxes liability includes uncertain tax positions related to transfer pricing issues that remain unresolved with the internal revenue service (“irs”)\n",
            "Answer found in 2022_Annual_Report (1).docx: conclusions on recognizing and measuring uncertain tax positions involve significant estimates and management judgment and include complex considerations of the internal revenue code, related regulations, tax case laws, and prior-year audit settlements\n",
            "Answer found in 2023_Annual_Report.docx: and, finally, we will continue to drive operating leverage, aligning our cost structure with our revenue growth\n",
            "Answer found in 2023_Annual_Report.docx: as we make progress on these priorities, we delivered strong results in fiscal year 2023, including a record $211 billion in revenue and over $88 billion in operating income\n",
            "Answer found in 2023_Annual_Report.docx: all up, github surpassed $1 billion in annual recurring revenue for the first time this fiscal year\n",
            "Answer found in 2023_Annual_Report.docx: all up, dynamics surpassed $5 billion in revenue over the past fiscal year, with our customer experience, service, and finance and supply chain businesses each surpassing $1 billion in annual sales\n",
            "Answer found in 2023_Annual_Report.docx: all up, more than 1 million organizations now count on our comprehensive, ai-powered solutions to protect their digital estates, and our security business surpassed $20 billion in annual revenue, as we help protect customers across clouds and endpoint platforms\n",
            "Answer found in 2023_Annual_Report.docx: all up, linkedin’s revenue surpassed $15 billion for the first time this fiscal year, a testament to how mission critical the platform has become to help more than 950 million members connect, learn, sell, and get hired\n",
            "Answer found in 2023_Annual_Report.docx: and we are also transforming how windows is experienced and managed with azure virtual desktop and windows 365, which together surpassed $1 billion in annual revenue for the first time\n",
            "Answer found in 2023_Annual_Report.docx: in addition, we’re stepping up efforts to combat online disinformation through new media content provenance technologies—enabling users to verify if an image or video was generated by ai\n",
            "Answer found in 2023_Annual_Report.docx: office commercial revenue is mainly affected by a combination of continued installed base growth and average revenue per user expansion, as well as the continued shift from office licensed on-premises to office 365\n",
            "Answer found in 2023_Annual_Report.docx: office consumer revenue is mainly affected by the percentage of customers that buy office with their new devices and the continued shift from office licensed on-premises to microsoft 365 consumer subscriptions\n",
            "Answer found in 2023_Annual_Report.docx: office consumer services revenue is mainly affected by the demand for communication and storage through skype, outlook\n",
            "Answer found in 2023_Annual_Report.docx: linkedin revenue is mainly affected by demand from enterprises and professional organizations for subscriptions to talent solutions, sales solutions, and premium subscriptions offerings, as well as member engagement and the quality of the sponsored content delivered to those members to drive marketing solutions\n",
            "Answer found in 2023_Annual_Report.docx: dynamics revenue is driven by the number of users licensed and applications consumed, expansion of average revenue per user, and the continued shift to dynamics 365, a unified set of cloud-based intelligent business applications, including power apps and power automate\n",
            "Answer found in 2023_Annual_Report.docx: marketing solutions competes with online and offline outlets that generate revenue from advertisers and marketers, and sales solutions competes with online and offline outlets for companies with lead generation and customer intelligence and insights\n",
            "Answer found in 2023_Annual_Report.docx: azure revenue is mainly affected by infrastructure-as-a-service and platform-as-a-service consumption-based services, and per user-based services such as enterprise mobility + security\n",
            "Answer found in 2023_Annual_Report.docx: server products revenue is mainly affected by purchases through volume licensing programs, licenses sold to original equipment manufacturers (“oem”), and retail packaged products\n",
            "Answer found in 2023_Annual_Report.docx: cals provide access rights to certain server products, including sql server and windows server, and revenue is reported along with the associated server product\n",
            "Answer found in 2023_Annual_Report.docx: windows oem revenue is impacted significantly by the number of windows operating system licenses purchased by oems, which they pre-install on the devices they sell\n",
            "Answer found in 2023_Annual_Report.docx: in addition to computing device market volume, windows oem revenue is impacted by: \n",
            "•\tthe mix of computing devices based on form factor and screen size\n",
            "Answer found in 2023_Annual_Report.docx: windows commercial revenue, which includes volume licensing of the windows operating system and windows cloud services such as microsoft defender for endpoint, is affected mainly by the demand from commercial customers for volume licensing and software assurance (“sa”), as well as advanced security offerings\n",
            "Answer found in 2023_Annual_Report.docx: windows commercial revenue often reflects the number of information workers in a licensed enterprise and is relatively independent of the number of pcs sold in a given year\n",
            "Answer found in 2023_Annual_Report.docx: xbox revenue is mainly affected by subscriptions and sales of first- and third-party content, as well as advertising\n",
            "Answer found in 2023_Annual_Report.docx: we generate revenue by offering a wide range of cloud-based solutions, content, and other services to people and businesses; licensing and supporting an array of software products; delivering relevant online advertising to a global audience; and designing and selling devices\n",
            "Answer found in 2023_Annual_Report.docx: highlights from fiscal year 2023 compared with fiscal year 2022 included: \n",
            "•\tmicrosoft cloud revenue increased 22% to $111\n",
            "Answer found in 2023_Annual_Report.docx: •\toffice commercial products and cloud services revenue increased 10% driven by office 365 commercial growth of 13%\n",
            "Answer found in 2023_Annual_Report.docx: •\toffice consumer products and cloud services revenue increased 2% and microsoft 365 consumer subscribers increased to 67\n",
            "Answer found in 2023_Annual_Report.docx: •\tlinkedin revenue increased 10%\n",
            "Answer found in 2023_Annual_Report.docx: •\tdynamics products and cloud services revenue increased 16% driven by dynamics 365 growth of 24%\n",
            "Answer found in 2023_Annual_Report.docx: •\tserver products and cloud services revenue increased 19% driven by azure and other cloud services growth of 29%\n",
            "Answer found in 2023_Annual_Report.docx: •\twindows original equipment manufacturer licensing (“windows oem”) revenue decreased 25%\n",
            "Answer found in 2023_Annual_Report.docx: •\tdevices revenue decreased 24%\n",
            "Answer found in 2023_Annual_Report.docx: •\twindows commercial products and cloud services revenue increased 5%\n",
            "Answer found in 2023_Annual_Report.docx: •\txbox content and services revenue decreased 3%\n",
            "Answer found in 2023_Annual_Report.docx: •\tsearch and news advertising revenue excluding traffic acquisition costs increased 11%\n",
            "Answer found in 2023_Annual_Report.docx: our international operations provide a significant portion of our total revenue and expenses\n",
            "Answer found in 2023_Annual_Report.docx: many of these revenue and expenses are denominated in currencies other than the u\n",
            "Answer found in 2023_Annual_Report.docx: as a result, changes in foreign exchange rates may significantly affect revenue and expenses\n",
            "Answer found in 2023_Annual_Report.docx: dollar relative to certain foreign currencies reduced reported revenue and expenses from our international operations in fiscal year 2023\n",
            "Answer found in 2023_Annual_Report.docx: on january 18, 2023, we announced decisions we made to align our cost structure with our revenue and customer demand, prioritize our investments in strategic areas, and consolidate office space\n",
            "Answer found in 2023_Annual_Report.docx: seasonality \n",
            "our revenue fluctuates quarterly and is generally higher in the second and fourth quarters of our fiscal year\n",
            "Answer found in 2023_Annual_Report.docx: second quarter revenue is driven by corporate year-end spending trends in our major markets and holiday season spending by consumers, and fourth quarter revenue is driven by the volume of multi-year on-premises contracts executed during the period\n",
            "Answer found in 2023_Annual_Report.docx: in the first quarter of fiscal year 2023, we made updates to the presentation and method of calculation for certain metrics, most notably expanding our surface metric into a broader devices metric to incorporate additional revenue streams, along with other minor changes to align with how we manage our businesses\n",
            "Answer found in 2023_Annual_Report.docx: fiscal year 2023 compared with fiscal year 2022 \n",
            "revenue increased $13\n",
            "Answer found in 2023_Annual_Report.docx: intelligent cloud revenue increased driven by azure and other cloud services\n",
            "Answer found in 2023_Annual_Report.docx: productivity and business processes revenue increased driven by office 365 commercial and linkedin\n",
            "Answer found in 2023_Annual_Report.docx: more personal computing revenue decreased driven by windows and devices\n",
            "Answer found in 2023_Annual_Report.docx: cost of revenue increased $3\n",
            "Answer found in 2023_Annual_Report.docx: revenue, gross margin, and operating income included an unfavorable foreign currency impact of 4%, 4%, and 6%, respectively\n",
            "Answer found in 2023_Annual_Report.docx: cost of revenue and operating expenses both included a favorable foreign currency impact of 2%\n",
            "Answer found in 2023_Annual_Report.docx: segment results of operations \n",
            " \n",
            "reportable segments \n",
            "fiscal year 2023 compared with fiscal year 2022 \n",
            "productivity and business processes \n",
            "revenue increased $5\n",
            "Answer found in 2023_Annual_Report.docx: •\toffice commercial products and cloud services revenue increased $3\n",
            "Answer found in 2023_Annual_Report.docx: office 365 commercial revenue grew 13% with seat growth of 11%, driven by small and medium business and frontline worker offerings, as well as growth in revenue per user\n",
            "Answer found in 2023_Annual_Report.docx: office commercial products revenue declined 21% driven by continued customer shift to cloud offerings\n",
            "Answer found in 2023_Annual_Report.docx: •\toffice consumer products and cloud services revenue increased $140 million or 2%\n",
            "Answer found in 2023_Annual_Report.docx: •\tlinkedin revenue increased $1\n",
            "Answer found in 2023_Annual_Report.docx: •\tdynamics products and cloud services revenue increased $750 million or 16% driven by dynamics 365 growth of 24%\n",
            "Answer found in 2023_Annual_Report.docx: revenue, gross margin, and operating income included an unfavorable foreign currency impact of 5%, 5%, and 8%, respectively\n",
            "Answer found in 2023_Annual_Report.docx: intelligent cloud \n",
            "revenue increased $12\n",
            "Answer found in 2023_Annual_Report.docx: •\tserver products and cloud services revenue increased $12\n",
            "Answer found in 2023_Annual_Report.docx: azure and other cloud services revenue grew 29% driven by growth in our consumption-based services\n",
            "Answer found in 2023_Annual_Report.docx: server products revenue decreased 1%\n",
            "Answer found in 2023_Annual_Report.docx: •\tenterprise services revenue increased $315 million or 4% driven by growth in enterprise support services, offset in part by a decline in industry solutions (formerly microsoft consulting services)\n",
            "Answer found in 2023_Annual_Report.docx: revenue, gross margin, and operating income included an unfavorable foreign currency impact of 4%, 4%, and 6%, respectively\n",
            "Answer found in 2023_Annual_Report.docx: more personal computing \n",
            "revenue decreased $5\n",
            "Answer found in 2023_Annual_Report.docx: •\twindows revenue decreased $3\n",
            "Answer found in 2023_Annual_Report.docx: windows oem revenue decreased 25% as elevated channel inventory levels continued to drive additional weakness beyond declining pc demand\n",
            "Answer found in 2023_Annual_Report.docx: windows commercial products and cloud services revenue increased 5% driven by demand for microsoft 365\n",
            "Answer found in 2023_Annual_Report.docx: •\tdevices revenue decreased $1\n",
            "Answer found in 2023_Annual_Report.docx: •\tgaming revenue decreased $764 million or 5% driven by declines in xbox hardware and xbox content and services\n",
            "Answer found in 2023_Annual_Report.docx: xbox hardware revenue decreased 11% driven by lower volume and price of consoles sold\n",
            "Answer found in 2023_Annual_Report.docx: xbox content and services revenue decreased 3% driven by a decline in first-party content, offset in part by growth in xbox game pass\n",
            "Answer found in 2023_Annual_Report.docx: •\tsearch and news advertising revenue increased $617 million or 5%\n",
            "Answer found in 2023_Annual_Report.docx: search and news advertising revenue excluding traffic acquisition costs increased 11% driven by higher search volume and the xandr acquisition\n",
            "Answer found in 2023_Annual_Report.docx: revenue, gross margin, and operating income included an unfavorable foreign currency impact of 3%, 4%, and 6%, respectively\n",
            "Answer found in 2023_Annual_Report.docx: uncertain tax positions \n",
            "we settled a portion of the internal revenue service (“irs”) audit for tax years 2004 to 2006 in fiscal year 2011\n",
            "Answer found in 2023_Annual_Report.docx: in february 2012, the irs withdrew its 2011 revenue agents report related to unresolved issues for tax years 2004 to 2006 and reopened the audit phase of the examination\n",
            "Answer found in 2023_Annual_Report.docx: unearned revenue \n",
            "unearned revenue comprises mainly unearned revenue related to volume licensing programs, which may include software assurance (“sa”) and cloud services\n",
            "Answer found in 2023_Annual_Report.docx: unearned revenue is generally invoiced annually at the beginning of each contract period for multi-year agreements and recognized ratably over the coverage period\n",
            "Answer found in 2023_Annual_Report.docx: unearned revenue also includes payments for other offerings for which we have been paid in advance and earn the revenue when we transfer control of the product or service\n",
            "Answer found in 2023_Annual_Report.docx: the following table outlines the expected future recognition of unearned revenue as of june 30, 2023: \n",
            " \n",
            "if our customers choose to license cloud-based versions of our products and services rather than licensing transaction-based products and services, the associated revenue will shift from being recognized at the time of the transaction to being recognized over the subscription period or upon consumption, as applicable\n",
            "Answer found in 2023_Annual_Report.docx: refer to note 13 – unearned revenue of the notes to financial statements for further discussion\n",
            "Answer found in 2023_Annual_Report.docx: preparing consolidated financial statements requires management to make estimates and assumptions that affect the reported amounts of assets, liabilities, revenue, and expenses\n",
            "Answer found in 2023_Annual_Report.docx: we have critical accounting estimates in the areas of revenue recognition, impairment of investment securities, goodwill, research and development costs, legal and other contingencies, income taxes, and inventories\n",
            "Answer found in 2023_Annual_Report.docx: revenue recognition \n",
            "our contracts with customers often include promises to transfer multiple products and services to a customer\n",
            "Answer found in 2023_Annual_Report.docx: revenue from office 365 is recognized ratably over the period in which the cloud services are provided\n",
            "Answer found in 2023_Annual_Report.docx: our products are generally sold with a right of return, we may provide other credits or incentives, and in certain instances we estimate customer usage of our products and services, which are accounted for as variable consideration when determining the amount of revenue to recognize\n",
            "Answer found in 2023_Annual_Report.docx: the amortization of these costs is included in cost of revenue over the estimated life of the products\n",
            "Answer found in 2023_Annual_Report.docx: if our review indicates a reduction in utility below carrying value, we reduce our inventory to a new cost basis through a charge to cost of revenue\n",
            "Answer found in 2023_Annual_Report.docx: estimates and assumptions \n",
            "preparing financial statements requires management to make estimates and assumptions that affect the reported amounts of assets, liabilities, revenue, and expenses\n",
            "Answer found in 2023_Annual_Report.docx: examples of estimates and assumptions include: for revenue recognition, determining the nature and timing of satisfaction of performance obligations, and determining the standalone selling price (“ssp”) of performance obligations, variable consideration, and other obligations such as product returns and refunds; loss contingencies; product warranties; the fair value of and/or potential impairment of goodwill and intangible assets for our reporting units; product life cycles; useful lives of our tangible and intangible assets; allowances for doubtful accounts; the market value of, and demand for, our inventory; stock-based compensation forfeiture rates; when technological feasibility is achieved for our products; the potential outcome of uncertain tax positions that have been recognized in our consolidated financial statements or tax returns; and determining the timing and amount of impairments for investments\n",
            "Answer found in 2023_Annual_Report.docx: revenue and expenses are translated at average rates of exchange prevailing during the year\n",
            "Answer found in 2023_Annual_Report.docx: revenue \n",
            "product revenue and service and other revenue \n",
            "product revenue includes sales from operating systems, cross-device productivity and collaboration applications, server applications, business solution applications, desktop and server management tools, software development tools, video games, and hardware such as pcs, tablets, gaming and entertainment consoles, other intelligent devices, and related accessories\n",
            "Answer found in 2023_Annual_Report.docx: service and other revenue includes sales from cloud-based solutions that provide customers with software, services, platforms, and content such as office 365, azure, dynamics 365, and xbox; solution support; and consulting services\n",
            "Answer found in 2023_Annual_Report.docx: service and other revenue also includes sales from online advertising and linkedin\n",
            "Answer found in 2023_Annual_Report.docx: revenue recognition \n",
            "revenue is recognized upon transfer of control of promised products or services to customers in an amount that reflects the consideration we expect to receive in exchange for those products or services\n",
            "Answer found in 2023_Annual_Report.docx: revenue is recognized net of allowances for returns and any taxes collected from customers, which are subsequently remitted to governmental authorities\n",
            "Answer found in 2023_Annual_Report.docx: revenue from distinct on-premises licenses is recognized upfront at the point in time when the software is made available to the customer\n",
            "Answer found in 2023_Annual_Report.docx: in cases where we allocate revenue to software updates, primarily because the updates are provided at no additional charge, revenue is recognized as the updates are provided, which is generally ratably over the estimated life of the related device or license\n",
            "Answer found in 2023_Annual_Report.docx: revenue allocated to sa is generally recognized ratably over the contract period as customers simultaneously consume and receive benefits, given that sa comprises distinct performance obligations that are satisfied over time\n",
            "Answer found in 2023_Annual_Report.docx: revenue related to cloud services provided on a subscription basis is recognized ratably over the contract period\n",
            "Answer found in 2023_Annual_Report.docx: revenue related to cloud services provided on a consumption basis, such as the amount of storage used in a period, is recognized based on the customer utilization of such resources\n",
            "Answer found in 2023_Annual_Report.docx: when cloud services require a significant level of integration and interdependency with software and the individual components are not considered distinct, all revenue is recognized over the period in which the cloud services are provided\n",
            "Answer found in 2023_Annual_Report.docx: revenue from search advertising is recognized when the advertisement appears in the search results or when the action necessary to earn the revenue has been completed\n",
            "Answer found in 2023_Annual_Report.docx: revenue from consulting services is recognized as services are provided\n",
            "Answer found in 2023_Annual_Report.docx: in these cases, the hardware and software license are accounted for as a single performance obligation and revenue is recognized at the point in time when ownership is transferred to resellers or directly to end customers through retail stores and online marketplaces\n",
            "Answer found in 2023_Annual_Report.docx: refer to note 19 – segment information and geographic data for further information, including revenue by significant product and service offering\n",
            "Answer found in 2023_Annual_Report.docx: revenue from office 365 is recognized ratably over the period in which the cloud services are provided\n",
            "Answer found in 2023_Annual_Report.docx: our products are generally sold with a right of return, we may provide other credits or incentives, and in certain instances we estimate customer usage of our products and services, which are accounted for as variable consideration when determining the amount of revenue to recognize\n",
            "Answer found in 2023_Annual_Report.docx: contract balances and other receivables \n",
            "timing of revenue recognition may differ from the timing of invoicing to customers\n",
            "Answer found in 2023_Annual_Report.docx: we record a receivable when revenue is recognized prior to invoicing, or unearned revenue when revenue is recognized subsequent to invoicing\n",
            "Answer found in 2023_Annual_Report.docx: we record a receivable related to revenue recognized for multi-year on-premises licenses as we have an unconditional right to invoice and receive payment in the future related to those licenses\n",
            "Answer found in 2023_Annual_Report.docx: unearned revenue comprises mainly unearned revenue related to volume licensing programs, which may include sa and cloud services\n",
            "Answer found in 2023_Annual_Report.docx: unearned revenue is generally invoiced annually at the beginning of each contract period for multi-year agreements and recognized ratably over the coverage period\n",
            "Answer found in 2023_Annual_Report.docx: unearned revenue also includes payments for consulting services to be performed in the future, linkedin subscriptions, office 365 subscriptions, xbox subscriptions, windows post-delivery support, dynamics business solutions, and other offerings for which we have been paid in advance and earn the revenue when we transfer control of the product or service\n",
            "Answer found in 2023_Annual_Report.docx: refer to note 13 – unearned revenue for further information, including unearned revenue by segment and changes in unearned revenue during the period\n",
            "Answer found in 2023_Annual_Report.docx: in instances where the timing of revenue recognition differs from the timing of invoicing, we have determined our contracts generally do not include a significant financing component\n",
            "Answer found in 2023_Annual_Report.docx: examples include invoicing at the beginning of a subscription term with revenue recognized ratably over the contract period, and multi-year on-premises licenses that are invoiced annually with revenue recognized upfront\n",
            "Answer found in 2023_Annual_Report.docx: cost of revenue \n",
            "cost of revenue includes: manufacturing and distribution costs for products sold and programs licensed; operating costs related to product support service centers and product distribution centers; costs incurred to include software on pcs sold by original equipment manufacturers (“oem”), to drive traffic to our websites, and to acquire online advertising space; costs incurred to support and maintain cloud-based and other online products and services, including datacenter costs and royalties; warranty costs; inventory valuation adjustments; costs associated with the delivery of consulting services; and the amortization of capitalized software development costs\n",
            "Answer found in 2023_Annual_Report.docx: product warranty \n",
            "we provide for the estimated costs of fulfilling our obligations under hardware and software warranties at the time the related revenue is recognized\n",
            "Answer found in 2023_Annual_Report.docx: once technological feasibility is reached, such costs are capitalized and amortized to cost of revenue over the estimated lives of the products\n",
            "Answer found in 2023_Annual_Report.docx: if our review indicates a reduction in utility below carrying value, we reduce our inventory to a new cost basis through a charge to cost of revenue\n",
            "Answer found in 2023_Annual_Report.docx: rate, generated 81% of our foreign income before tax\n",
            "Answer found in 2023_Annual_Report.docx: rate, generated 71% and 82% of our foreign income before tax\n",
            "Answer found in 2023_Annual_Report.docx: the aggregate changes in the gross unrecognized tax benefits related to uncertain tax positions were as follows: \n",
            " \n",
            "we settled a portion of the internal revenue service (“irs”) audit for tax years 2004 to 2006 in fiscal year 2011\n",
            "Answer found in 2023_Annual_Report.docx: in february 2012, the irs withdrew its 2011 revenue agents report related to unresolved issues for tax years 2004 to 2006 and reopened the audit phase of the examination\n",
            "Answer found in 2023_Annual_Report.docx: note 13 — unearned revenue \n",
            "unearned revenue by segment was as follows: \n",
            " \n",
            "changes in unearned revenue were as follows: \n",
            " \n",
            "revenue allocated to remaining performance obligations, which includes unearned revenue and amounts that will be invoiced and recognized as revenue in future periods, was $229 billion as of june 30, 2023, of which $224 billion is related to the commercial portion of revenue\n",
            "Answer found in 2023_Annual_Report.docx: we expect to recognize approximately 45% of this revenue over the next 12 months and the remainder thereafter\n",
            "Answer found in 2023_Annual_Report.docx: that qualify under section 401(k) of the internal revenue code, and a number of savings plans in international locations\n",
            "Answer found in 2023_Annual_Report.docx: revenue and costs are generally directly attributed to our segments\n",
            "Answer found in 2023_Annual_Report.docx: however, due to the integrated structure of our business, certain revenue recognized and costs incurred by one segment may benefit other segments\n",
            "Answer found in 2023_Annual_Report.docx: revenue from certain contracts is allocated among the segments based on the relative value of the underlying products and services, which can include allocation based on actual prices charged, prices when sold separately, or estimated costs plus a profit margin\n",
            "Answer found in 2023_Annual_Report.docx: cost of revenue is allocated in certain cases based on a relative revenue methodology\n",
            "Answer found in 2023_Annual_Report.docx: segment revenue and operating income were as follows during the periods presented: \n",
            " \n",
            " \n",
            "no sales to an individual customer or country other than the united states accounted for more than 10% of revenue for fiscal years 2023, 2022, or 2021\n",
            "Answer found in 2023_Annual_Report.docx: revenue, classified by the major geographic areas in which our customers were located, was as follows: \n",
            " \n",
            "(a)\tincludes billings to oems and certain multinational organizations because of the nature of these businesses and the impracticability of determining the geographic source of the revenue\n",
            "Answer found in 2023_Annual_Report.docx: revenue, classified by significant product and service offerings, was as follows: \n",
            " \n",
            "our microsoft cloud revenue, which includes azure and other cloud services, office 365 commercial, the commercial portion of linkedin, dynamics 365, and other commercial cloud properties, was $111\n",
            "Answer found in 2023_Annual_Report.docx: revenue recognition – refer to note 1 to the financial statements \n",
            "critical audit matter description \n",
            "the company recognizes revenue upon transfer of control of promised products or services to customers in an amount that reflects the consideration the company expects to receive in exchange for those products or services\n",
            "Answer found in 2023_Annual_Report.docx: significant judgment is exercised by the company in determining revenue recognition for these customer agreements, and includes the following: \n",
            "•\tdetermination of whether products and services are considered distinct performance obligations that should be accounted for separately versus together, such as software licenses and related services that are sold with cloud-based services\n",
            "Answer found in 2023_Annual_Report.docx: , timing of when revenue is recognized) for each distinct performance obligation\n",
            "Answer found in 2023_Annual_Report.docx: •\tidentification and treatment of contract terms that may impact the timing and amount of revenue recognized (e\n",
            "Answer found in 2023_Annual_Report.docx: given these factors and due to the volume of transactions, the related audit effort in evaluating management’s judgments in determining revenue recognition for these customer agreements was extensive and required a high degree of auditor judgment\n",
            "Answer found in 2023_Annual_Report.docx: how the critical audit matter was addressed in the audit \n",
            "our principal audit procedures related to the company’s revenue recognition for these customer agreements included the following: \n",
            "•\twe tested the effectiveness of controls related to the identification of distinct performance obligations, the determination of the timing of revenue recognition, and the estimation of variable consideration\n",
            "Answer found in 2023_Annual_Report.docx: -\tassessed the terms in the customer agreement and evaluated the appropriateness of management’s application of their accounting policies, along with their use of estimates, in the determination of revenue recognition conclusions\n",
            "Answer found in 2023_Annual_Report.docx: •\twe tested the mathematical accuracy of management’s calculations of revenue and the associated timing of revenue recognized in the financial statements\n",
            "Answer found in 2023_Annual_Report.docx: income taxes – uncertain tax positions – refer to note 12 to the financial statements \n",
            "critical audit matter description \n",
            "the company’s long-term income taxes liability includes uncertain tax positions related to transfer pricing issues that remain unresolved with the internal revenue service (“irs”)\n",
            "Answer found in 2023_Annual_Report.docx: conclusions on recognizing and measuring uncertain tax positions involve significant estimates and management judgment and include complex considerations of the internal revenue code, related regulations, tax case laws, and prior-year audit settlements\n",
            "Answer found in 2021_Annual_Report.docx: in fiscal year 2021, we delivered $168 billion in revenue, up 18 percent year-over-year\n",
            "Answer found in 2021_Annual_Report.docx: linkedin and our security business both passed $10 billion in annual revenue for the first time\n",
            "Answer found in 2021_Annual_Report.docx: applications and infrastructure \n",
            "computing architecture is undergoing radical transformation as the number of connected devices and the volume of data generated at the edge increase dramatically\n",
            "Answer found in 2021_Annual_Report.docx: in the five years since microsoft acquired linkedin, revenue has nearly tripled and growth has accelerated\n",
            "Answer found in 2021_Annual_Report.docx: office commercial revenue is mainly affected by a combination of continued installed base growth and average revenue per user expansion, as well as the continued shift from office licensed on-premises to office 365\n",
            "Answer found in 2021_Annual_Report.docx: office consumer revenue is mainly affected by the percentage of customers that buy office with their new devices and the continued shift from office licensed on-premises to microsoft 365 consumer subscriptions\n",
            "Answer found in 2021_Annual_Report.docx: office consumer services revenue is mainly affected by the demand for communication and storage through skype, outlook\n",
            "Answer found in 2021_Annual_Report.docx: linkedin revenue is mainly affected by demand from enterprises and professional organizations for subscriptions to talent solutions, learning solutions, sales solutions, and premium subscriptions offerings, as well as member engagement and the quality of the sponsored content delivered to those members to drive marketing solutions\n",
            "Answer found in 2021_Annual_Report.docx: dynamics revenue is driven by the number of users licensed and applications consumed, expansion of average revenue per user, and the continued shift to dynamics 365, a unified set of cloud-based intelligent business applications, including power apps and power automate\n",
            "Answer found in 2021_Annual_Report.docx: marketing solutions competes with online and offline outlets that generate revenue from advertisers and marketers, and sales solutions competes with online and offline outlets for companies with lead generation and customer intelligence and insights\n",
            "Answer found in 2021_Annual_Report.docx: azure revenue is mainly affected by infrastructure-as-a-service and platform-as-a-service consumption-based services, and per user-based services such as enterprise mobility + security\n",
            "Answer found in 2021_Annual_Report.docx: server products revenue is mainly affected by purchases through volume licensing programs, licenses sold to original equipment manufacturers (“oem”), and retail packaged products\n",
            "Answer found in 2021_Annual_Report.docx: cals provide access rights to certain server products, including sql server and windows server, and revenue is reported along with the associated server product\n",
            "Answer found in 2021_Annual_Report.docx: windows oem revenue is impacted significantly by the number of windows operating system licenses purchased by oems, which they pre-install on the devices they sell\n",
            "Answer found in 2021_Annual_Report.docx: in addition to computing device market volume, windows oem revenue is impacted by: \n",
            "•\tthe mix of computing devices based on form factor and screen size\n",
            "Answer found in 2021_Annual_Report.docx: windows commercial revenue, which includes volume licensing of the windows operating system and windows cloud services such as microsoft defender advanced threat protection, is affected mainly by the demand from commercial customers for volume licensing and software assurance (“sa”), as well as advanced security offerings\n",
            "Answer found in 2021_Annual_Report.docx: windows commercial revenue often reflects the number of information workers in a licensed enterprise and is relatively independent of the number of pcs sold in a given year\n",
            "Answer found in 2021_Annual_Report.docx: xbox revenue is mainly affected by subscriptions and sales of first- and third-party content, as well as advertising\n",
            "Answer found in 2021_Annual_Report.docx: we generate revenue by offering a wide range of cloud-based and other services to people and businesses; licensing and supporting an array of software products; designing, manufacturing, and selling devices; and delivering relevant online advertising to a global audience\n",
            "Answer found in 2021_Annual_Report.docx: highlights from fiscal year 2021 compared with fiscal year 2020 included: \n",
            "•\tcommercial cloud revenue increased 34% to $69\n",
            "Answer found in 2021_Annual_Report.docx: •\toffice commercial products and cloud services revenue increased 13% driven by office 365 commercial growth of 22%\n",
            "Answer found in 2021_Annual_Report.docx: •\toffice consumer products and cloud services revenue increased 10% and microsoft 365 consumer subscribers increased to 51\n",
            "Answer found in 2021_Annual_Report.docx: •\tlinkedin revenue increased 27%\n",
            "Answer found in 2021_Annual_Report.docx: •\tdynamics products and cloud services revenue increased 25% driven by dynamics 365 growth of 43%\n",
            "Answer found in 2021_Annual_Report.docx: •\tserver products and cloud services revenue increased 27% driven by azure growth of 50%\n",
            "Answer found in 2021_Annual_Report.docx: •\twindows original equipment manufacturer licensing (“windows oem”) revenue increased slightly\n",
            "Answer found in 2021_Annual_Report.docx: •\twindows commercial products and cloud services revenue increased 14%\n",
            "Answer found in 2021_Annual_Report.docx: •\txbox content and services revenue increased 23%\n",
            "Answer found in 2021_Annual_Report.docx: •\tsearch advertising revenue, excluding traffic acquisition costs, increased 13%\n",
            "Answer found in 2021_Annual_Report.docx: •\tsurface revenue increased 5%\n",
            "Answer found in 2021_Annual_Report.docx: our international operations provide a significant portion of our total revenue and expenses\n",
            "Answer found in 2021_Annual_Report.docx: many of these revenue and expenses are denominated in currencies other than the u\n",
            "Answer found in 2021_Annual_Report.docx: as a result, changes in foreign exchange rates may significantly affect revenue and expenses\n",
            "Answer found in 2021_Annual_Report.docx: dollar relative to certain foreign currencies increased reported revenue and did not have a material impact on reported expenses from our international operations in fiscal year 2021\n",
            "Answer found in 2021_Annual_Report.docx: seasonality \n",
            "our revenue fluctuates quarterly and is generally higher in the second and fourth quarters of our fiscal year\n",
            "Answer found in 2021_Annual_Report.docx: second quarter revenue is driven by corporate year-end spending trends in our major markets and holiday season spending by consumers, and fourth quarter revenue is driven by the volume of multi-year on-premises contracts executed during the period\n",
            "Answer found in 2021_Annual_Report.docx: revenue increased $25\n",
            "Answer found in 2021_Annual_Report.docx: intelligent cloud revenue increased driven by azure\n",
            "Answer found in 2021_Annual_Report.docx: productivity and business processes revenue increased driven by office 365 commercial and linkedin\n",
            "Answer found in 2021_Annual_Report.docx: more personal computing revenue increased driven by gaming\n",
            "Answer found in 2021_Annual_Report.docx: cost of revenue increased $6\n",
            "Answer found in 2021_Annual_Report.docx: revenue, gross margin, and operating income included a favorable foreign currency impact of 3%, 3%, and 4%, respectively\n",
            "Answer found in 2021_Annual_Report.docx: segment results of operations \n",
            " \n",
            "reportable segments \n",
            "productivity and business processes \n",
            "revenue increased $7\n",
            "Answer found in 2021_Annual_Report.docx: •\toffice commercial products and cloud services revenue increased $4\n",
            "Answer found in 2021_Annual_Report.docx: office 365 commercial revenue grew 22% driven by seat growth of 17% and higher revenue per user\n",
            "Answer found in 2021_Annual_Report.docx: office commercial products revenue declined 23% driven by continued customer shift to cloud offerings and transactional weakness\n",
            "Answer found in 2021_Annual_Report.docx: •\toffice consumer products and cloud services revenue increased $474 million or 10% driven by microsoft 365 consumer subscription revenue, on a strong prior year comparable that benefited from transactional strength in japan\n",
            "Answer found in 2021_Annual_Report.docx: •\tlinkedin revenue increased $2\n",
            "Answer found in 2021_Annual_Report.docx: •\tdynamics products and cloud services revenue increased 25% driven by dynamics 365 growth of 43%\n",
            "Answer found in 2021_Annual_Report.docx: revenue, gross margin, and operating income included a favorable foreign currency impact of 2%, 3%, and 4%, respectively\n",
            "Answer found in 2021_Annual_Report.docx: intelligent cloud \n",
            "revenue increased $11\n",
            "Answer found in 2021_Annual_Report.docx: •\tserver products and cloud services revenue increased $11\n",
            "Answer found in 2021_Annual_Report.docx: azure revenue grew 50% due to growth in our consumption-based services\n",
            "Answer found in 2021_Annual_Report.docx: server products revenue increased 6% driven by hybrid and premium solutions, on a strong prior year comparable that benefited from demand related to sql server 2008 and windows server 2008 end of support\n",
            "Answer found in 2021_Annual_Report.docx: •\tenterprise services revenue increased $534 million or 8% driven by growth in premier support services\n",
            "Answer found in 2021_Annual_Report.docx: revenue, gross margin, and operating income included a favorable foreign currency impact of 2%, 3%, and 4%, respectively\n",
            "Answer found in 2021_Annual_Report.docx: more personal computing \n",
            "revenue increased $5\n",
            "Answer found in 2021_Annual_Report.docx: •\twindows revenue increased $933 million or 4% driven by growth in windows commercial\n",
            "Answer found in 2021_Annual_Report.docx: windows commercial products and cloud services revenue increased 14% driven by demand for microsoft 365\n",
            "Answer found in 2021_Annual_Report.docx: windows oem revenue increased slightly driven by consumer pc demand, on a strong prior year oem pro comparable that benefited from windows 7 end of support\n",
            "Answer found in 2021_Annual_Report.docx: windows oem pro revenue decreased 9% and windows oem non-pro revenue grew 21%\n",
            "Answer found in 2021_Annual_Report.docx: •\tgaming revenue increased $3\n",
            "Answer found in 2021_Annual_Report.docx: xbox content and services revenue increased $2\n",
            "Answer found in 2021_Annual_Report.docx: xbox hardware revenue increased 92% driven by higher price of consoles sold due to the xbox series x|s launches\n",
            "Answer found in 2021_Annual_Report.docx: •\tsearch advertising revenue increased $788 million or 10%\n",
            "Answer found in 2021_Annual_Report.docx: search advertising revenue excluding traffic acquisition costs increased 13% driven by higher revenue per search and search volume\n",
            "Answer found in 2021_Annual_Report.docx: •\tsurface revenue increased $302 million or 5%\n",
            "Answer found in 2021_Annual_Report.docx: uncertain tax positions \n",
            "we settled a portion of the internal revenue service (“irs”) audit for tax years 2004 to 2006 in fiscal year 2011\n",
            "Answer found in 2021_Annual_Report.docx: in february 2012, the irs withdrew its 2011 revenue agents report related to unresolved issues for tax years 2004 to \n",
            "2006 and reopened the audit phase of the examination\n",
            "Answer found in 2021_Annual_Report.docx: unearned revenue \n",
            "unearned revenue comprises mainly unearned revenue related to volume licensing programs, which may include software assurance (“sa”) and cloud services\n",
            "Answer found in 2021_Annual_Report.docx: unearned revenue is generally invoiced annually at the beginning of each contract period for multi-year agreements and recognized ratably over the coverage period\n",
            "Answer found in 2021_Annual_Report.docx: unearned revenue also includes payments for other offerings for which we have been paid in advance and earn the revenue when we transfer control of the product or service\n",
            "Answer found in 2021_Annual_Report.docx: the following table outlines the expected future recognition of unearned revenue as of june 30, 2021: \n",
            " \n",
            "if our customers choose to license cloud-based versions of our products and services rather than licensing transaction-based products and services, the associated revenue will shift from being recognized at the time of the transaction to being recognized over the subscription period or upon consumption, as applicable\n",
            "Answer found in 2021_Annual_Report.docx: we have also excluded unearned revenue and non-cash items\n",
            "Answer found in 2021_Annual_Report.docx: preparing consolidated financial statements requires management to make estimates and assumptions that affect the reported amounts of assets, liabilities, revenue, and expenses\n",
            "Answer found in 2021_Annual_Report.docx: critical accounting policies for us include revenue recognition, impairment of investment securities, goodwill, research and development costs, contingencies, income taxes, and inventories\n",
            "Answer found in 2021_Annual_Report.docx: revenue recognition \n",
            "our contracts with customers often include promises to transfer multiple products and services to a customer\n",
            "Answer found in 2021_Annual_Report.docx: revenue from office 365 is recognized ratably over the period in which the cloud services are provided\n",
            "Answer found in 2021_Annual_Report.docx: our products are generally sold with a right of return, we may provide other credits or incentives, and in certain instances we estimate customer usage of our products and services, which are accounted for as variable consideration when determining the amount of revenue to recognize\n",
            "Answer found in 2021_Annual_Report.docx: the amortization of these costs is included in cost of revenue over the estimated life of the products\n",
            "Answer found in 2021_Annual_Report.docx: if our review indicates a reduction in utility below carrying value, we reduce our inventory to a new cost basis through a charge to cost of revenue\n",
            "Answer found in 2021_Annual_Report.docx: estimates and assumptions \n",
            "preparing financial statements requires management to make estimates and assumptions that affect the reported amounts of assets, liabilities, revenue, and expenses\n",
            "Answer found in 2021_Annual_Report.docx: examples of estimates and assumptions include: for revenue recognition, determining the nature and timing of satisfaction of performance obligations, and determining the standalone selling price (“ssp”) of performance obligations, variable consideration, and other obligations such as product returns and refunds; loss contingencies; product warranties; the fair value of and/or potential impairment of goodwill and intangible assets for our reporting units; product life cycles; useful lives of our tangible and intangible assets; allowances for doubtful accounts; the market value of, and demand for, our inventory; stock-based compensation forfeiture rates; when technological feasibility is achieved for our products; the potential outcome of uncertain tax positions that have been recognized in our consolidated financial statements or tax returns; and determining the timing and amount of impairments for investments\n",
            "Answer found in 2021_Annual_Report.docx: revenue and expenses are translated at average rates of exchange prevailing during the year\n",
            "Answer found in 2021_Annual_Report.docx: revenue \n",
            "product revenue and service and other revenue \n",
            "product revenue includes sales from operating systems, cross-device productivity applications, server applications, business solution applications, desktop and server management tools, software development tools, video games, and hardware such as pcs, tablets, gaming and entertainment consoles, other intelligent devices, and related accessories\n",
            "Answer found in 2021_Annual_Report.docx: service and other revenue includes sales from cloud-based solutions that provide customers with software, services, platforms, and content such as office 365, azure, dynamics 365, and xbox; solution support; and consulting services\n",
            "Answer found in 2021_Annual_Report.docx: service and other revenue also includes sales from online advertising and linkedin\n",
            "Answer found in 2021_Annual_Report.docx: revenue recognition \n",
            "revenue is recognized upon transfer of control of promised products or services to customers in an amount that reflects the consideration we expect to receive in exchange for those products or services\n",
            "Answer found in 2021_Annual_Report.docx: revenue is recognized net of allowances for returns and any taxes collected from customers, which are subsequently remitted to governmental authorities\n",
            "Answer found in 2021_Annual_Report.docx: revenue from distinct on-premises licenses is recognized upfront at the point in time when the software is made available to the customer\n",
            "Answer found in 2021_Annual_Report.docx: in cases where we allocate revenue to software updates, primarily because the updates are provided at no additional charge, revenue is recognized as the updates are provided, which is generally ratably over the estimated life of the related device or license\n",
            "Answer found in 2021_Annual_Report.docx: revenue allocated to sa is generally recognized ratably over the contract period as customers simultaneously consume and receive benefits, given that sa comprises distinct performance obligations that are satisfied over time\n",
            "Answer found in 2021_Annual_Report.docx: revenue related to cloud services provided on a subscription basis is recognized ratably over the contract period\n",
            "Answer found in 2021_Annual_Report.docx: revenue related to cloud services provided on a consumption basis, such as the amount of storage used in a period, is recognized based on the customer utilization of such resources\n",
            "Answer found in 2021_Annual_Report.docx: when cloud services require a significant level of integration and interdependency with software and the individual components are not considered distinct, all revenue is recognized over the period in which the cloud services are provided\n",
            "Answer found in 2021_Annual_Report.docx: revenue from search advertising is recognized when the advertisement appears in the search results or when the action necessary to earn the revenue has been completed\n",
            "Answer found in 2021_Annual_Report.docx: revenue from consulting services is recognized as services are provided\n",
            "Answer found in 2021_Annual_Report.docx: in these cases, the hardware and software license are accounted for as a single performance obligation and revenue is recognized at the point in time when ownership is transferred to resellers or directly to end customers through retail stores and online marketplaces\n",
            "Answer found in 2021_Annual_Report.docx: refer to note 19 – segment information and geographic data for further information, including revenue by significant product and service offering\n",
            "Answer found in 2021_Annual_Report.docx: revenue from office 365 is recognized ratably over the period in which the cloud services are provided\n",
            "Answer found in 2021_Annual_Report.docx: our products are generally sold with a right of return, we may provide other credits or incentives, and in certain instances we estimate customer usage of our products and services, which are accounted for as variable consideration when determining the amount of revenue to recognize\n",
            "Answer found in 2021_Annual_Report.docx: contract balances and other receivables \n",
            "timing of revenue recognition may differ from the timing of invoicing to customers\n",
            "Answer found in 2021_Annual_Report.docx: we record a receivable when revenue is recognized prior to invoicing, or unearned revenue when revenue is recognized subsequent to invoicing\n",
            "Answer found in 2021_Annual_Report.docx: we record a receivable related to revenue recognized for multi-year on-premises licenses as we have an unconditional right to invoice and receive payment in the future related to those licenses\n",
            "Answer found in 2021_Annual_Report.docx: unearned revenue comprises mainly unearned revenue related to volume licensing programs, which may include sa and cloud services\n",
            "Answer found in 2021_Annual_Report.docx: unearned revenue is generally invoiced annually at the beginning of each contract period for multi-year agreements and recognized ratably over the coverage period\n",
            "Answer found in 2021_Annual_Report.docx: unearned revenue also includes payments for consulting services to be performed in the future, linkedin subscriptions, office 365 subscriptions, xbox subscriptions, windows 10 post-delivery support, dynamics business solutions, and other offerings for which we have been paid in advance and earn the revenue when we transfer control of the product or service\n",
            "Answer found in 2021_Annual_Report.docx: refer to note 13 – unearned revenue for further information, including unearned revenue by segment and changes in unearned revenue during the period\n",
            "Answer found in 2021_Annual_Report.docx: in instances where the timing of revenue recognition differs from the timing of invoicing, we have determined our contracts generally do not include a significant financing component\n",
            "Answer found in 2021_Annual_Report.docx: examples include invoicing at the beginning of a subscription term with revenue recognized ratably over the contract period, and multi-year on-premises licenses that are invoiced annually with revenue recognized upfront\n",
            "Answer found in 2021_Annual_Report.docx: cost of revenue \n",
            "cost of revenue includes: manufacturing and distribution costs for products sold and programs licensed; operating costs related to product support service centers and product distribution centers; costs incurred to include software on pcs sold by original equipment manufacturers (“oem”), to drive traffic to our websites, and to acquire online advertising space; costs incurred to support and maintain online products and services, including datacenter costs \n",
            "and royalties; warranty costs; inventory valuation adjustments; costs associated with the delivery of consulting services; and the amortization of capitalized software development costs\n",
            "Answer found in 2021_Annual_Report.docx: product warranty \n",
            "we provide for the estimated costs of fulfilling our obligations under hardware and software warranties at the time the related revenue is recognized\n",
            "Answer found in 2021_Annual_Report.docx: once technological feasibility is reached, such costs are capitalized and amortized to cost of revenue over the estimated lives of the products\n",
            "Answer found in 2021_Annual_Report.docx: if our review indicates a reduction in utility below carrying value, we reduce our inventory to a new cost basis through a charge to cost of revenue\n",
            "Answer found in 2021_Annual_Report.docx: in the past, option and forward contracts were used to hedge a portion of forecasted international revenue and were designated as cash flow hedging instruments\n",
            "Answer found in 2021_Annual_Report.docx: rate, generated 82% and 86% of our foreign income before tax\n",
            "Answer found in 2021_Annual_Report.docx: rate, generated 82% of our foreign income before tax, respectively\n",
            "Answer found in 2021_Annual_Report.docx: the aggregate changes in the gross unrecognized tax benefits related to uncertain tax positions were as follows: \n",
            " \n",
            "we settled a portion of the internal revenue service (“irs”) audit for tax years 2004 to 2006 in fiscal year 2011\n",
            "Answer found in 2021_Annual_Report.docx: in february 2012, the irs withdrew its 2011 revenue agents report related to unresolved issues for tax years 2004 to 2006 and reopened the audit phase of the examination\n",
            "Answer found in 2021_Annual_Report.docx: note 13 — unearned revenue \n",
            "unearned revenue by segment was as follows: \n",
            " \n",
            " \n",
            "changes in unearned revenue were as follows: \n",
            " \n",
            "revenue allocated to remaining performance obligations, which includes unearned revenue and amounts that will be invoiced and recognized as revenue in future periods, was $146 billion as of june 30, 2021, of which $141 billion is related to the commercial portion of revenue\n",
            "Answer found in 2021_Annual_Report.docx: we expect to recognize approximately 50% of this revenue over the next 12 months and the remainder thereafter\n",
            "Answer found in 2021_Annual_Report.docx: that qualify under section 401(k) of the internal revenue code, and a number of savings plans in international locations\n",
            "Answer found in 2021_Annual_Report.docx: revenue and costs are generally directly attributed to our segments\n",
            "Answer found in 2021_Annual_Report.docx: however, due to the integrated structure of our business, certain revenue recognized and costs incurred by one segment may benefit other segments\n",
            "Answer found in 2021_Annual_Report.docx: revenue from certain contracts is allocated among the segments based on the relative value of the underlying products and services, which can include allocation based on actual prices charged, prices when sold separately, or estimated costs plus a profit margin\n",
            "Answer found in 2021_Annual_Report.docx: cost of revenue is allocated in certain cases based on a relative revenue methodology\n",
            "Answer found in 2021_Annual_Report.docx: segment revenue and operating income were as follows during the periods presented: \n",
            " \n",
            " \n",
            "no sales to an individual customer or country other than the united states accounted for more than 10% of revenue for fiscal years 2021, 2020, or 2019\n",
            "Answer found in 2021_Annual_Report.docx: revenue, classified by the major geographic areas in which our customers were located, was as follows: \n",
            " \n",
            "(a)\tincludes billings to oems and certain multinational organizations because of the nature of these businesses and the impracticability of determining the geographic source of the revenue\n",
            "Answer found in 2021_Annual_Report.docx: revenue from external customers, classified by significant product and service offerings, was as follows: \n",
            " \n",
            "our commercial cloud revenue, which includes azure, office 365 commercial, the commercial portion of linkedin, dynamics 365, and other commercial cloud properties, was $69\n",
            "Answer found in 2021_Annual_Report.docx: revenue recognition — refer to note 1 to the financial statements \n",
            "critical audit matter description \n",
            "the company recognizes revenue upon transfer of control of promised products or services to customers in an amount that reflects the consideration the company expects to receive in exchange for those products or services\n",
            "Answer found in 2021_Annual_Report.docx: significant judgment is exercised by the company in determining revenue recognition for these customer agreements, and includes the following: \n",
            "•\tdetermination of whether products and services are considered distinct performance obligations that should be accounted for separately versus together, such as software licenses and related services that are sold with cloud-based services\n",
            "Answer found in 2021_Annual_Report.docx: , timing of when revenue is recognized) for each distinct performance obligation\n",
            "Answer found in 2021_Annual_Report.docx: •\tidentification and treatment of contract terms that may impact the timing and amount of revenue recognized (e\n",
            "Answer found in 2021_Annual_Report.docx: given these factors and due to the volume of transactions, the related audit effort in evaluating management’s judgments in determining revenue recognition for these customer agreements was extensive and required a high degree of auditor judgment\n",
            "Answer found in 2021_Annual_Report.docx: how the critical audit matter was addressed in the audit \n",
            "our principal audit procedures related to the company’s revenue recognition for these customer agreements included the following: \n",
            "•\twe tested the effectiveness of controls related to the identification of distinct performance obligations, the determination of the timing of revenue recognition, and the estimation of variable consideration\n",
            "Answer found in 2021_Annual_Report.docx: -\tassessed the terms in the customer agreement and evaluated the appropriateness of management’s application of their accounting policies, along with their use of estimates, in the determination of revenue recognition conclusions\n",
            "Answer found in 2021_Annual_Report.docx: •\twe tested the mathematical accuracy of management’s calculations of revenue and the associated timing of revenue recognized in the financial statements\n",
            "Answer found in 2021_Annual_Report.docx: income taxes — uncertain tax positions — refer to note 12 to the financial statements \n",
            "critical audit matter description \n",
            "the company’s long-term income taxes liability includes uncertain tax positions related to transfer pricing issues that remain unresolved with the internal revenue service (“irs”)\n",
            "Answer found in 2021_Annual_Report.docx: conclusions on recognizing and measuring uncertain tax positions involve significant estimates and management judgment and include complex considerations of the internal revenue code, related regulations, tax case laws, and prior-year audit settlements\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Extract Multiple Relevant Sentences: Instead of returning the first sentence that contains a keyword, extract all sentences that might contain relevant information. This allows us to display or choose the most relevant answer.\n",
        "\n",
        "Expand Keyword Search: Include more specific and varied keywords that could be relevant to the question (e.g., \"total revenue,\" \"Microsoft revenue,\" \"annual revenue 2023\"). This will help identify more sentences that may answer the query.\n",
        "\n",
        "Include a Context Window: When extracting sentences, consider the context around them (i.e., the preceding and following sentences). This helps in capturing any additional context that might make the answer clearer.\n",
        "\n",
        "Refine Ranking Strategy: After extracting relevant sentences, we can further refine the ranking of these sentences based on how closely they match the query, perhaps using cosine similarity again."
      ],
      "metadata": {
        "id": "pot9a4epwxoM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Explanation of the Improvements\n",
        "More Comprehensive Answers: By extracting multiple relevant sentences, we capture more comprehensive answers, increasing the chance of finding the exact figure or information requested.\n",
        "Better Keyword Coverage: Expanding the list of keywords ensures that we cover various ways that revenue information could be described in financial documents.\n",
        "Higher Recall: This approach should yield higher recall for relevant information as we are extracting more data points."
      ],
      "metadata": {
        "id": "2hbeKI_Zw3HX"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Pre trained LLM"
      ],
      "metadata": {
        "id": "q7dvARGbHFWD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install transformers sentence-transformers docx2txt scikit-learn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9UocKBTWHI2c",
        "outputId": "d4240ae2-a4e5-4e47-858d-09d198099b60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.44.2)\n",
            "Collecting sentence-transformers\n",
            "  Downloading sentence_transformers-3.0.1-py3-none-any.whl.metadata (10 kB)\n",
            "Collecting docx2txt\n",
            "  Downloading docx2txt-0.8.tar.gz (2.8 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.15.4)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.24.6)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.4)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.5)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (2.4.0+cu121)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.13.1)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (9.4.0)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.6.1)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (1.13.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.4)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.8)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.8.30)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (2.1.5)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11.0->sentence-transformers) (1.3.0)\n",
            "Downloading sentence_transformers-3.0.1-py3-none-any.whl (227 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m227.1/227.1 kB\u001b[0m \u001b[31m11.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: docx2txt\n",
            "  Building wheel for docx2txt (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for docx2txt: filename=docx2txt-0.8-py3-none-any.whl size=3959 sha256=e7c4b53cf224df8b08a9b4456915187c7110e178764e35c30696644ddca1bde9\n",
            "  Stored in directory: /root/.cache/pip/wheels/22/58/cf/093d0a6c3ecfdfc5f6ddd5524043b88e59a9a199cb02352966\n",
            "Successfully built docx2txt\n",
            "Installing collected packages: docx2txt, sentence-transformers\n",
            "Successfully installed docx2txt-0.8 sentence-transformers-3.0.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import docx2txt\n",
        "from sentence_transformers import SentenceTransformer, util\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hmWU_EFOHNwe",
        "outputId": "05dd2299-e463-4064-9b08-acf88d9f47e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sentence_transformers/cross_encoder/CrossEncoder.py:11: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n",
            "  from tqdm.autonotebook import tqdm, trange\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def load_documents_from_folder(folder_path):\n",
        "    documents = []\n",
        "    file_names = []\n",
        "\n",
        "    for file_name in os.listdir(folder_path):\n",
        "        if file_name.endswith('.docx'):\n",
        "            file_path = os.path.join(folder_path, file_name)\n",
        "            text = docx2txt.process(file_path)\n",
        "            documents.append(text)\n",
        "            file_names.append(file_name)\n",
        "\n",
        "    return documents, file_names\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "documents, file_names = load_documents_from_folder(folder_path)\n",
        "print(f\"Loaded {len(documents)} documents from {folder_path}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sXuZHgRUHQ6N",
        "outputId": "692a82a3-439d-4923-a216-76ea335904e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loaded 10 documents from /content/drive/MyDrive/Thesis/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load a pre-trained LLM from SentenceTransformers\n",
        "model = SentenceTransformer('multi-qa-MiniLM-L6-cos-v1')\n",
        "\n",
        "# Encode documents\n",
        "document_embeddings = model.encode(documents, convert_to_tensor=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 528,
          "referenced_widgets": [
            "e65f3fa09b6e4dac8018eccfb17ff525",
            "8ad654c5f81b4ff6ae2be77852d4461b",
            "e1e8baffa6994cf2910d8686bb31b824",
            "39985768889d41049bdd2b9c0a5be08b",
            "2b77bbe0f6aa467ebebd42a57e34db99",
            "5c37b300307d41679a17b67c3ea173a6",
            "22d359f327f641fdb8e777baef64beb2",
            "bc3b876c634348408311e2b8114a6941",
            "e345f96d133b47e881563ff8d7d93904",
            "f09f1744372c4fdfad374187c663dd18",
            "6c08385f6fbf4f799f2a6f0c1b478c53",
            "26c6c09fcf8e4d75a7cd7342dbbbefb5",
            "f01897f265e2436aa1fbc173264c7e3a",
            "d128f90634364a59b5eb78ba782555bd",
            "e802dfc0db0044e5977cd9554a88c10b",
            "3eef4b33b5bd4a26b3415b2c2877a5ac",
            "dc69eb3d45db4372a06d0e52f3f23400",
            "d864e7e8e4a3442cb72f448db638ae0c",
            "a6a0739e9cbf4812a16a1152ba3e9603",
            "d8087961cbb94b1580068956a37be779",
            "48a9be5ca97249ccafee58be2e51a979",
            "12b77008a2d54c04959a231bdb69ff65",
            "3f3542deefd040408200194917ac0030",
            "f74efb8984e247c8b977b6c28a795779",
            "fd28c971233d4adfb965fe5012826b26",
            "2df525a402d54e2ca4584e03473499e8",
            "fff6c603a5044f9bb0d033b60b7d4a8a",
            "06cf0f3bc920465da9a77cd01c939861",
            "2f2841f0370a4bdd91cb0c699ff2f021",
            "601d0140ae7d4ebc9ba5b9a099ba7a8c",
            "e512cd41ebab4ae4bf7a99624a4ffa29",
            "e20d632d53324f15ab0711c68ec0eb36",
            "39b4728f524748daaaa7691c1a355435",
            "731e57912009413d9e497b3d3bea01cf",
            "3667dc5d7f94489c8003bfef0fca692f",
            "65c3854da1304669b62b075687aec985",
            "fb5c7ed8520946afb05e73d865185128",
            "23f9e8060b6341a08474813858d00c2d",
            "5d4ac306e6b04f509cf38625c0752e57",
            "45394da7c63f4d5fb8abe1a5d83bddd3",
            "fc16cc398e474cea9e4e3501ab9edc24",
            "c49fb586d24e42a7afd5546f347f696f",
            "eef442574f4f45f2b518478428c3b656",
            "648b758dba9d433d9d2738a1fec47a02",
            "ff01d76b31dd40fabfbe50b975291f8b",
            "eef4f8993de845e388aaae324657b61a",
            "3b8391555e6f4a609548bb3b444569b0",
            "c81c30032ca04f97b4b791e2323c4422",
            "74b9c066ada54eb189a198f5d164bed9",
            "dd8345f9850444bca1db279721b8aec9",
            "ecb30cc2b3cd410e956ebef3117047b5",
            "090fbdf4116445bd9a378bcbad1cf237",
            "ccd10358637742b39d1a1db1a17f72db",
            "2cf81fb89dd6469a982a674c2bfc29ba",
            "870da40386a547a3afbd72db65fb3fed",
            "7cc7d683911b4f11bdd862ed8f648700",
            "64112d328a95447e9b44dd922992fdc9",
            "2d594a0e2b744deb9e1c39e23c0e9740",
            "8dc9d1f62cd34f93a74630cdde8f3355",
            "0082c04ea1164b3c9bdef7e94d1b815e",
            "d99b3341796e485e8eb62ff5266a8eb7",
            "3ddbd076385244a1a87e0a787050b183",
            "edc4221b86dc4b40947ec96e19d400e4",
            "126c45dfd5174e2986fb61b3c3231361",
            "4eb98dd4ad1645bfa134bac2e8b80d9f",
            "b5b31d13c9fa42a6889ce131adfa86f1",
            "a1492647f1974fbdbbaba807f3745d48",
            "03da2966b41143d18005d97cb7c40ddd",
            "2ef7801c07af4d039894fb8c777f9973",
            "ba9622cc59a341c7a8f5bb2f5094f469",
            "986cb1cdb0c74d6aa5adeba8d5899e13",
            "bb66f294cdc1437ca3cf0d4158be58ac",
            "9c83dea3c3b94b8d8f94e0efa57d47d4",
            "9fcfaaaf8e874788886101f105437d9d",
            "259fcebf1d6248a289c4eef8a77ffdc5",
            "a24dd28bde954407a50d139bd0650cb5",
            "d12071dbab5e427c912c1b31d6d5457d",
            "76219e0e496947eeaecac20b92b1c63c",
            "062ec0030ea84bfea84b3bd87b08cc33",
            "2b7bd2d80b3946408d964bb18be2ce75",
            "706fdeba948f4a2a905b507ae4d4512a",
            "dee2181fafda45cebb1c71355b33a558",
            "6319ff7cb91748739f6bf8135a879149",
            "c8376763a05e4d069dba8ec1f51989a7",
            "4fd16e48cb2f4cb196179f41167b2faa",
            "1dfb57681ca9494c914b8c1b771ab210",
            "2c275d92d7eb4754a5257b63f5705fb5",
            "c88bcc6ba16c4cf49fce99c43bf5858d",
            "6ff4568c64af48d988f779da86d02e09",
            "a42fe4d0e1ad4abb855747c74b5d271a",
            "94a0395bf592450e9a56b4cbd9c96674",
            "4802caaa19ce48d487e305ed1f12b16f",
            "6d56cb1c40b744189db521793aa1e40f",
            "d39e04c27c7142d0bd0cc5ebf93f403f",
            "6fde65e2279a4987979d671a45f35528",
            "c77d0c66a6b643e5b13d0746e7864c5b",
            "88c192ed36b5423094573d20182a99c4",
            "c16a648c5fa1410ab512e360cbb1b348",
            "872fbcc7cc7d40d088a38204fb99f20e",
            "9ba4f028391a48a89dcee173516baefd",
            "3300a1948ef94c008fabaa802a5abecd",
            "36fffc40a0a6400a8532dd68beb645dd",
            "80d8d38f92c946ebba92eb81729c9587",
            "a96e427615d54dee87dcfc8e33dbc1f3",
            "e47327380a9f48e4b444b76a139e8d8b",
            "9bf18fdcac7742e5a62460e56fa8fbb2",
            "2d0cec0acff4418ca1464598e0548061",
            "6e89c2136ce543b6a565779f8bc694fd",
            "87cfbfae10624021844c61ed1bb1a6ee",
            "1ac65b8bd3394cd080afd9af231b0167",
            "d36a12f0a8b64eb5b4750b9a6c2f3688",
            "255d16bcdea749ccbfb638ad6ea07f11",
            "abe7bcbbfa5e418287d4731a230a0e60",
            "d9a143b4f6f64315bc390e5cda61a4ee",
            "db4985f8618f4214a034bbf0b7eb61d7",
            "ad665fd32aa844259cdd9757267988b5",
            "ea1e381667864b83b3c54c0033facac4",
            "f9a353f49050434fb336662f91701a43",
            "7717cdda97084a208769391096e3142c",
            "cddc5ba3fa7b4bf3954ac9f7c0be47a5",
            "12a3ab54ed3648c0ac3e4fa6ec868f37"
          ]
        },
        "id": "IbXK3scwHjWB",
        "outputId": "b4424cc2-4c35-4e5c-dfb3-eb7475e8e365"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:89: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "e65f3fa09b6e4dac8018eccfb17ff525"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "26c6c09fcf8e4d75a7cd7342dbbbefb5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "README.md:   0%|          | 0.00/11.6k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3f3542deefd040408200194917ac0030"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "731e57912009413d9e497b3d3bea01cf"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/612 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ff01d76b31dd40fabfbe50b975291f8b"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/90.9M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7cc7d683911b4f11bdd862ed8f648700"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/383 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "a1492647f1974fbdbbaba807f3745d48"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "76219e0e496947eeaecac20b92b1c63c"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6ff4568c64af48d988f779da86d02e09"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "9ba4f028391a48a89dcee173516baefd"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "1_Pooling/config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d36a12f0a8b64eb5b4750b9a6c2f3688"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_retrieved_documents(query, top_results, cosine_scores, file_names):\n",
        "    \"\"\"\n",
        "    Plots a bar chart of the top-k retrieved documents based on cosine similarity scores.\n",
        "\n",
        "    Args:\n",
        "        query (str): The query for which documents are retrieved.\n",
        "        top_results (list): List of indices of the top-k retrieved documents.\n",
        "        cosine_scores (torch.Tensor): Tensor containing cosine similarity scores of documents.\n",
        "        file_names (list): List of document names corresponding to embeddings.\n",
        "    \"\"\"\n",
        "    # Extract the names and scores for the top-k documents\n",
        "    top_documents = [file_names[idx] for idx in top_results]\n",
        "    top_scores = [cosine_scores[idx].item() for idx in top_results]\n",
        "\n",
        "    # Plot\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    plt.barh(top_documents, top_scores, color='skyblue')\n",
        "    plt.xlabel('Cosine Similarity Score')\n",
        "    plt.ylabel('Document')\n",
        "    plt.title(f\"Top-{len(top_results)} Retrieved Documents for Query: '{query}'\")\n",
        "    plt.gca().invert_yaxis()\n",
        "    plt.grid(axis='x', linestyle='--', alpha=0.7)\n",
        "    plt.show()\n",
        "\n",
        "# Example query\n",
        "query = \"Revenue, net income and operating expenses Trends in 2021 Annual Report\"\n",
        "\n",
        "\n",
        "top_k = 8\n",
        "top_results, cosine_scores = retrieve_relevant_documents(query, document_embeddings, model, top_k=10)\n",
        "\n",
        "\n",
        "for idx in top_results:\n",
        "    print(f\"Document: {file_names[idx]}, Score: {cosine_scores[idx].item()}\")\n",
        "\n",
        "\n",
        "plot_retrieved_documents(query, top_results, cosine_scores, file_names)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 738
        },
        "id": "2Y_M2XoDXjKl",
        "outputId": "d439a549-a105-4c0c-f128-599c4686e9fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Document: 2021_Annual_Report.docx, Score: 0.5993265509605408\n",
            "Document: 2016_Annual_Report.docx, Score: 0.5449041128158569\n",
            "Document: 2017_Annual_Report.docx, Score: 0.5191137790679932\n",
            "Document: 2022_Annual_Report (1).docx, Score: 0.41512244939804077\n",
            "Document: 2015_Annual_Report.docx, Score: 0.4110594689846039\n",
            "Document: 2019_Annual_Report (1).docx, Score: 0.3370822072029114\n",
            "Document: 2020_Annual_Report (1).docx, Score: 0.3245048522949219\n",
            "Document: 2023_Annual_Report.docx, Score: 0.2545560896396637\n",
            "Document: 2018_Annual_Report.docx, Score: 0.2379012107849121\n",
            "Document: 2014_Annual_Report.docx, Score: 0.21804839372634888\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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j2wdXV4XL15EeHg4bG1t4eHhga+//rrIx/TcjouLFi1C8+bN4ebmBktLS/j7++td7uDl5YXTp09jz5490n6oO9bl9pkryOfgypUreOedd2Braws3NzeMGjUKO3bsyPfl6//88w8GDBiAsmXLStktXLhQuj8rKwu+vr7w9fVFVlaWtPzu3bsoV64cGjZsKH0OivO9f9nfUwB49uwZoqOjUa1aNVhZWaFMmTJ46623sHPnTtl6+flM5HdbBfWy74WGfj8A4PTp02jevDmsra1RoUIFfPPNN7n25i7M9w1A/2+2bl9evXo1Jk6ciAoVKsDKygotWrTA+fPnX7m9hg0b6vUsq1atGgICApCUlCRbvnbtWrRv3x4VK1aUlrVs2RI+Pj6y84Hg4GDY2dnJHlumTBk0btxYb5vOzs6wt7d/ZTtfZcWKFXjvvffQvn17ODo6YsWKFXrr6MbmOn/+PCIiIuDk5ARHR0f0799f729/fo+xeY1/mds4YPk5bhWVq6srfH199c6vCrqv//bbb6hduzasrKzg7+8v+z6pc/HiRbz//vtwdnaGjY0N6tevj61bt8rW0e2fK1euxJdffony5cvDxsYGs2bNeun38UIpagWJKKcXe9RotVrRvHlzoVKpxKBBg8Ts2bNFhw4dBAAxcuRI2WMBiBo1aggXFxfx9ddfi8mTJ4tKlSoJa2trcfLkyQK142UVzf379wsAYtWqVXr3vfXWW6JOnTov3XZePWpOnTol9QjQefjwoahVq5YoU6aM+OKLL8S8efNE3759hUqlEiNGjBBCPP8vyNy5cwUA0blzZ7F06VKxdOlSkZiYKIQQol+/fsLS0lJUqVJF9OvXT8ybN08sWbJEuq9SpUqydgwaNEiYm5uLwYMHi3nz5onPPvtM2NraitDQUPH06VMhhBBLliwRAMThw4dlj718+bLea/vmm2+ESqUS3bp1E3PmzBHR0dHCxcVFeHl5iXv37knrLViwQAAQDRs2FLNmzRIjR44UTk5Owtvbu0g9anQGDhwoAIhTp04JIQq2b40fP15q25QpU8TMmTNFz549xWeffSatgzx6NFWqVElWAdf9F6l27dqidevW4scffxR9+vQRAMSnn34q3nrrLdGzZ08xZ84c0b59ewFALF68WLbN/GSke+7q1auLsmXLii+++ELMnj1b1KlTR6hUKul9uHDh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aN26Ne7evYs///wTHh4esLGxwccff4ynT58qz/WmkS6zZ89GnTp1YGlpCRcXFwwdOhSPHz9W9ue8H9u3b0etWrVgamqKpKQkrUufgoKCEBERgblz50KSJEiShL///hvVqlXDzJkztZ4vOjoakiThypUredazfft2fPvtt+jYsSNcXV3h7e2Nzz//HAMGDFCOef78Ob755hu4uLjA1NQU1apVQ2hoqLI/IiICjRs3hqmpKZycnDB69GhkZ2drvSchISEYPnw4ypYtCz8/PwBAbGwsOnToACsrK5QvXx59+/bF/fv3X/neERERvSts1BAREVGx8+DBA+zevRvBwcGwtLTMtT+nuaLRaNC1a1c8ePAAERER2Lt3L65evYqePXsqx/bp0wcVK1bE6dOnERUVhdGjR6NUqVKvfO7ExERs3boVO3bswI4dOxAREYHp06cr+6dNm4aVK1fi559/RlxcHEaMGIGAgABERETkeT4HBweoVCps2rQJarW6QO/DxIkTsWDBAhw7dgw3btxAjx498NNPP2Ht2rXYuXMn/vrrL8yfPz/f51OpVJg3bx7i4uKwYsUK7N+/H19//bXWMU+fPsWMGTOwdOlSxMXFoVy5clr7586dCx8fHwwePBjJyclITk5GpUqVMGDAACxfvlzr2OXLl6NFixaoVq1anvU4Ojpi165dWo2wf+vXrx/WrVuHefPmIT4+Hr/88gusrKwAALdu3ULHjh3RqFEjxMTEYPHixQgNDcV3332ndY4VK1bAxMQER48exc8//4zU1FS0bt0aXl5eiIyMxO7du3Hnzh306NEj3+8lERFRkZGJiIiIipmTJ0/KAOTNmze/9ri//vpLNjIykpOSkpRtcXFxMgD51KlTsizLsrW1tRwWFpbn45cvXy7b2toq9ydMmCBbWFjI6enpyravvvpKfu+992RZluVnz57JFhYW8rFjx7TOM3DgQLl3796vrHPBggWyhYWFbG1tLbdq1UqePHmynJiYqOz/+++/ZQDy2bNnZVmW5QMHDsgA5H379inHTJs2TQag9bhPP/1U9vPzU+63bNlSHjZsmHK/cuXK8pw5c15Z18aNG+UyZcpovR8A5OjoaK3jAgMD5a5du77yeWRZlm/duiUbGRnJJ0+elGVZljMzM+WyZcu+8r2XZVmOiIiQK1asKJcqVUpu2LChPHz4cPnIkSPK/oSEBBmAvHfv3jwf/+2338o1a9aUNRqNsm3hwoWylZWVrFarlVq9vLy0HjdlyhS5Xbt2Wttu3LghA5ATEhJeWS8REdG7wBE1REREVOzIspyv4+Lj4+Hi4gIXFxdlW61atWBnZ4f4+HgAwMiRIzFo0CC0bdsW06dPR2Ji4mvP6erqCmtra+W+k5MT7t69CwC4cuUKnj59ivfffx9WVlbKbeXKla89b3BwMFJSUrBmzRr4+Phg48aNqF27Nvbu3fvaWurWrat8Xb58eVhYWMDNzU1rW05t+bFv3z60adMGFSpUgLW1Nfr27Yt//vlH6/IpExMTrefNL2dnZ3Tq1AnLli0DAPzxxx94/vw5Pvroo1c+pkWLFrh69SrCw8Px4YcfIi4uDs2bN1cmRI6OjoaRkRFatmyZ5+Pj4+Ph4+MDSZKUbc2aNcPjx49x8+ZNZZu3t7fW42JiYnDgwAGtDN3d3QHgjd8fRERERY2NGiIiIip2qlevDkmSdDJh8MSJExEXF4dOnTph//79qFWrFrZs2fLK4/99WZQkSdBoNACgzOeyc+dOREdHK7cLFy68dp4aALC2tkaXLl0wdepUxMTEoHnz5rku0XldLZIkvba2N7l27Ro6d+6MunXr4vfff0dUVBQWLlwI4MUEuznMzc21Gh8FMWjQIKxfvx4ZGRlYvnw5evbsCQsLi9c+plSpUmjevDm++eYb/PXXX5g8eTKmTJmCzMxMnU30/O/L5x4/fowuXbpoZRgdHY3Lly+jRYsWOnlOIiKiwmKjhoiIiIode3t7+Pn5YeHChXjy5Emu/TmrJXl4eODGjRu4ceOGsu/ChQtITU1FrVq1lG01atTAiBEj8Ndff+GDDz7INZdKfr08wW61atW0bi+P6nkTSZLg7u6e52srKlFRUdBoNJg1axaaNGmCGjVq4Pbt24U6l4mJSZ7z7XTs2BGWlpZYvHgxdu/erTUpcH7VqlUL2dnZePbsGerUqQONRvPK+X88PDxw/PhxrRFYR48ehbW1NSpWrPjK52jQoAHi4uLg6uqaK8e85kQiIiJ6l9ioISIiomJp4cKFUKvVaNy4MX7//XdcvnwZ8fHxmDdvHnx8fAAAbdu2RZ06ddCnTx+cOXMGp06dQr9+/dCyZUs0bNgQGRkZCAkJwcGDB3H9+nUcPXoUp0+fhoeHR6Fqsra2xqhRozBixAisWLECiYmJOHPmDObPn48VK1bk+Zjo6Gh07doVmzZtwoULF3DlyhWEhoZi2bJl6Nq1a6Hfn4KqVq0asrKyMH/+fFy9ehWrVq3Czz//XKhzubq64uTJk7h27Rru37+vjOoxMjJCUFAQxowZg+rVqys5vYqvry9++eUXREVF4dq1a9i1axe+/fZbtGrVCjY2NnB1dUVgYCAGDBiArVu34u+//8bBgwfx22+/AXixMtiNGzfw+eef4+LFi9i2bRsmTJiAkSNHQqV69a+5wcHBePDgAXr37o3Tp08jMTERe/bsQf/+/Qs84TMREZGusVFDRERExZKbmxvOnDmDVq1a4csvv4Snpyfef/99hIeHY/HixQBejEzZtm0bSpcujRYtWqBt27Zwc3PDhg0bALxoHPzzzz/o168fatSogR49eqBDhw6YNGlSoeuaMmUKxo8fj2nTpsHDwwPt27fHzp07UaVKlTyPr1ixIlxdXTFp0iS89957aNCgAebOnYtJkyZh7Nixha6joOrVq4fZs2djxowZ8PT0xJo1azBt2rRCnWvUqFEwMjJCrVq14ODggKSkJGXfwIEDkZmZif79+7/xPH5+flixYgXatWsHDw8PfP755/Dz81MaMQCwePFifPjhhxg6dCjc3d0xePBgZSRShQoVsGvXLpw6dQr16tXDkCFDMHDgQIwbN+61z+vs7IyjR49CrVajXbt2qFOnDoYPHw47O7vXNniIiIjeBUnO72x9RERERERvcPjwYbRp0wY3btxA+fLl9V0OERFRicNGDRERERG9tefPn+PevXsIDAyEo6Mj1qxZo++SiIiISiSO7SQiIiKit7Zu3TpUrlwZqamp+OGHH/RdDhERUYnFETVERERERERERMUER9QQERERERERERUTbNQQERERERERERUTbNQQERERERERERUTbNQQERERERERERUTbNQQERERERERERUTbNQQERERERERERUTbNQQERERERERERUTbNQQERERERERERUT/w+63phUxEKWHwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "!pip install transformers sentence-transformers docx2txt scikit-learn\n",
        "\n",
        "\n",
        "import os\n",
        "import docx2txt\n",
        "from sentence_transformers import SentenceTransformer, util\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"\n",
        "    Load .docx documents from the specified folder and return a list of texts and file names.\n",
        "    \"\"\"\n",
        "    documents = []\n",
        "    file_names = []\n",
        "\n",
        "    for file_name in os.listdir(folder_path):\n",
        "        if file_name.endswith('.docx'):\n",
        "            file_path = os.path.join(folder_path, file_name)\n",
        "            text = docx2txt.process(file_path)\n",
        "            documents.append(text)\n",
        "            file_names.append(file_name)\n",
        "\n",
        "    return documents, file_names\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "documents, file_names = load_documents_from_folder(folder_path)\n",
        "print(f\"Loaded {len(documents)} documents from {folder_path}\")\n",
        "\n",
        "\n",
        "def load_ground_truth_documents(folder_path):\n",
        "    \"\"\"\n",
        "    Load relevant documents from a folder as ground truth for evaluation.\n",
        "    \"\"\"\n",
        "    ground_truth_documents = []\n",
        "\n",
        "    for file_name in os.listdir(folder_path):\n",
        "        if file_name.endswith('.docx'):\n",
        "            ground_truth_documents.append(file_name)\n",
        "\n",
        "    return ground_truth_documents\n",
        "\n",
        "\n",
        "ground_truth_folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "\n",
        "\n",
        "ground_truth_relevant_docs = load_ground_truth_documents(ground_truth_folder_path)\n",
        "print(f\"Loaded {len(ground_truth_relevant_docs)} ground truth documents from {ground_truth_folder_path}\")\n",
        "\n",
        "\n",
        "models = {\n",
        "    'all-MiniLM-L6-v2': SentenceTransformer('all-MiniLM-L6-v2'),\n",
        "    'multi-qa-MiniLM-L6-cos-v1': SentenceTransformer('multi-qa-MiniLM-L6-cos-v1')\n",
        "}\n",
        "\n",
        "\n",
        "document_embeddings_dict = {}\n",
        "for model_name, model in models.items():\n",
        "    print(f\"Encoding documents with model: {model_name}\")\n",
        "    document_embeddings = model.encode(documents, convert_to_tensor=True)\n",
        "    document_embeddings_dict[model_name] = document_embeddings\n",
        "\n",
        "\n",
        "def retrieve_relevant_documents(query, document_embeddings, model, top_k=5):\n",
        "    \"\"\"\n",
        "    Retrieve the top-k relevant documents for a given query using cosine similarity.\n",
        "    \"\"\"\n",
        "\n",
        "    query_embedding = model.encode(query, convert_to_tensor=True)\n",
        "\n",
        "\n",
        "    cosine_scores = util.pytorch_cos_sim(query_embedding, document_embeddings)[0]\n",
        "\n",
        "\n",
        "    top_results = np.argpartition(-cosine_scores, range(top_k))[0:top_k]\n",
        "\n",
        "    return top_results, cosine_scores\n",
        "\n",
        "\n",
        "def evaluate_multiple_queries(queries, document_embeddings, file_names, ground_truth_relevant_docs, model, top_k=5):\n",
        "    \"\"\"\n",
        "    Evaluate multiple queries by retrieving relevant documents and calculating precision and recall.\n",
        "    \"\"\"\n",
        "    precision_scores = []\n",
        "    recall_scores = []\n",
        "\n",
        "    for query in queries:\n",
        "        print(f\"Processing query: {query}\")\n",
        "\n",
        "        # Retrieve relevant documents for the current query\n",
        "        top_results, cosine_scores = retrieve_relevant_documents(query, document_embeddings, model, top_k=top_k)\n",
        "\n",
        "\n",
        "        predicted_relevant_docs = [file_names[idx] for idx in top_results]\n",
        "\n",
        "\n",
        "        true_positives = len(set(predicted_relevant_docs) & set(ground_truth_relevant_docs))\n",
        "        precision = true_positives / len(predicted_relevant_docs) if len(predicted_relevant_docs) > 0 else 0\n",
        "        recall = true_positives / len(ground_truth_relevant_docs) if len(ground_truth_relevant_docs) > 0 else 0\n",
        "\n",
        "\n",
        "        precision_scores.append(precision)\n",
        "        recall_scores.append(recall)\n",
        "\n",
        "        print(f\"Query: {query}\")\n",
        "        print(f\"Precision: {precision:.2f}\")\n",
        "        print(f\"Recall: {recall:.2f}\\n\")\n",
        "\n",
        "\n",
        "    avg_precision = sum(precision_scores) / len(precision_scores)\n",
        "    avg_recall = sum(recall_scores) / len(recall_scores)\n",
        "\n",
        "    print(f\"Average Precision: {avg_precision:.2f}\")\n",
        "    print(f\"Average Recall: {avg_recall:.2f}\")\n",
        "\n",
        "\n",
        "# queries\n",
        "queries = [\n",
        "    \"tree\",\n",
        "    \"net income 2021\",\n",
        "    \"profit margin\",\n",
        "    \"operating expenses\",\n",
        "    \"margin\",\n",
        "    \"fiscal year 2023 revenues\",\n",
        "    \"AI\",\n",
        "    \"cloud\",\n",
        "]\n",
        "\n",
        "\n",
        "for model_name, model in models.items():\n",
        "    print(f\"Evaluating model: {model_name}\")\n",
        "    document_embeddings = document_embeddings_dict[model_name]\n",
        "    evaluate_multiple_queries(queries, document_embeddings, file_names, ground_truth_relevant_docs, model, top_k=8)\n",
        "    print(\"=\"*50)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H5xylvT2D8s0",
        "outputId": "1af35ce8-d6c5-4a3c-9883-5a0af8e1e35e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.44.2)\n",
            "Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.10/dist-packages (3.0.1)\n",
            "Requirement already satisfied: docx2txt in /usr/local/lib/python3.10/dist-packages (0.8)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.15.4)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.24.6)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.4)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.5)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (2.4.0+cu121)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.13.1)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (9.4.0)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.6.1)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (1.13.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.4)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.8)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.8.30)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (2.1.5)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11.0->sentence-transformers) (1.3.0)\n",
            "Loaded 10 documents from /content/drive/MyDrive/Thesis/\n",
            "Loaded 10 ground truth documents from /content/drive/MyDrive/Thesis/\n",
            "Encoding documents with model: all-MiniLM-L6-v2\n",
            "Encoding documents with model: multi-qa-MiniLM-L6-cos-v1\n",
            "Evaluating model: all-MiniLM-L6-v2\n",
            "Processing query: tree\n",
            "Query: tree\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: net income 2021\n",
            "Query: net income 2021\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: profit margin\n",
            "Query: profit margin\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: operating expenses\n",
            "Query: operating expenses\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: margin\n",
            "Query: margin\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: fiscal year 2023 revenues\n",
            "Query: fiscal year 2023 revenues\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: AI\n",
            "Query: AI\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: cloud\n",
            "Query: cloud\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Average Precision: 1.00\n",
            "Average Recall: 0.80\n",
            "==================================================\n",
            "Evaluating model: multi-qa-MiniLM-L6-cos-v1\n",
            "Processing query: tree\n",
            "Query: tree\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: net income 2021\n",
            "Query: net income 2021\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: profit margin\n",
            "Query: profit margin\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: operating expenses\n",
            "Query: operating expenses\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: margin\n",
            "Query: margin\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: fiscal year 2023 revenues\n",
            "Query: fiscal year 2023 revenues\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: AI\n",
            "Query: AI\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Processing query: cloud\n",
            "Query: cloud\n",
            "Precision: 1.00\n",
            "Recall: 0.80\n",
            "\n",
            "Average Precision: 1.00\n",
            "Average Recall: 0.80\n",
            "==================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "!pip install transformers sentence-transformers docx2txt scikit-learn\n",
        "\n",
        "\n",
        "import os\n",
        "import docx2txt\n",
        "from sentence_transformers import SentenceTransformer, util\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "def load_documents_from_folder(folder_path):\n",
        "    \"\"\"\n",
        "    Load .docx documents from the specified folder and return a list of texts and file names.\n",
        "    \"\"\"\n",
        "    documents = []\n",
        "    file_names = []\n",
        "\n",
        "    for file_name in os.listdir(folder_path):\n",
        "        if file_name.endswith('.docx'):\n",
        "            file_path = os.path.join(folder_path, file_name)\n",
        "            text = docx2txt.process(file_path)\n",
        "            documents.append(text)\n",
        "            file_names.append(file_name)\n",
        "\n",
        "    return documents, file_names\n",
        "\n",
        "\n",
        "folder_path = '/content/drive/MyDrive/Thesis/'\n",
        "documents, file_names = load_documents_from_folder(folder_path)\n",
        "print(f\"Loaded {len(documents)} documents from {folder_path}\")\n",
        "\n",
        "\n",
        "model_name = 'multi-qa-MiniLM-L6-cos-v1'\n",
        "model = SentenceTransformer(model_name)\n",
        "\n",
        "\n",
        "print(f\"Encoding documents with model: {model_name}\")\n",
        "document_embeddings = model.encode(documents, convert_to_tensor=True)\n",
        "\n",
        "\n",
        "def retrieve_relevant_documents(query, document_embeddings, model, top_k=5):\n",
        "    \"\"\"\n",
        "    Retrieve the top-k relevant documents for a given query using cosine similarity.\n",
        "    \"\"\"\n",
        "\n",
        "    query_embedding = model.encode(query, convert_to_tensor=True)\n",
        "\n",
        "\n",
        "    cosine_scores = util.pytorch_cos_sim(query_embedding, document_embeddings)[0]\n",
        "\n",
        "\n",
        "    top_results = np.argpartition(-cosine_scores, range(top_k))[0:top_k]\n",
        "\n",
        "    return top_results, cosine_scores\n",
        "\n",
        "\n",
        "def extract_answers_from_documents(query, documents, top_results, file_names, model):\n",
        "    \"\"\"\n",
        "    Extract the most relevant sentences from the top-k retrieved documents that answer the query.\n",
        "    \"\"\"\n",
        "    query_embedding = model.encode(query, convert_to_tensor=True)\n",
        "\n",
        "\n",
        "    answers = []\n",
        "    for idx in top_results:\n",
        "        document = documents[idx]\n",
        "        sentences = document.split('. ')\n",
        "\n",
        "\n",
        "        sentence_embeddings = model.encode(sentences, convert_to_tensor=True)\n",
        "\n",
        "        cosine_scores = util.pytorch_cos_sim(query_embedding, sentence_embeddings)[0]\n",
        "\n",
        "        top_sentence_idx = np.argmax(cosine_scores)\n",
        "        top_sentence_score = cosine_scores[top_sentence_idx].item()\n",
        "        top_sentence = sentences[top_sentence_idx].strip()\n",
        "\n",
        "        answers.append((file_names[idx], top_sentence, top_sentence_score))\n",
        "\n",
        "    return answers\n",
        "\n",
        "# Question to answer\n",
        "question = \"Please give the number how much Microsoft generated in revenue in annual report 2023.\"\n",
        "\n",
        "# Retrieve relevant documents\n",
        "top_k = 8\n",
        "top_results, cosine_scores = retrieve_relevant_documents(question, document_embeddings, model, top_k=top_k)\n",
        "\n",
        "# Extract answers from retrieved documents\n",
        "answers = extract_answers_from_documents(question, documents, top_results, file_names, model)\n",
        "\n",
        "\n",
        "print(f\"Answers for the question: '{question}'\")\n",
        "for file_name, answer, score in answers:\n",
        "    print(f\"Document: {file_name}, Score: {score:.4f}\")\n",
        "    print(f\"Answer: {answer}\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O2fyVcjSLJA8",
        "outputId": "49c75809-8baa-49ac-c738-a84e93da3d10"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: transformers in /usr/local/lib/python3.10/dist-packages (4.44.2)\n",
            "Requirement already satisfied: sentence-transformers in /usr/local/lib/python3.10/dist-packages (3.0.1)\n",
            "Requirement already satisfied: docx2txt in /usr/local/lib/python3.10/dist-packages (0.8)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers) (3.15.4)\n",
            "Requirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.24.6)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from transformers) (24.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (6.0.2)\n",
            "Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers) (2024.5.15)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from transformers) (2.32.3)\n",
            "Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.4.4)\n",
            "Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers) (0.19.1)\n",
            "Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.10/dist-packages (from transformers) (4.66.5)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (2.4.0+cu121)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.13.1)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (9.4.0)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.6.1)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (1.13.2)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.3)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.4)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (3.8)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->transformers) (2024.8.30)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (2.1.5)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11.0->sentence-transformers) (1.3.0)\n",
            "Loaded 10 documents from /content/drive/MyDrive/Thesis/\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Encoding documents with model: multi-qa-MiniLM-L6-cos-v1\n",
            "Answers for the question: 'Please give the number how much Microsoft generated in revenue in annual report 2023.'\n",
            "Document: 2016_Annual_Report.docx, Score: 0.6339\n",
            "Answer: Following are the supplemental consolidated results of Microsoft Corporation on an unaudited pro forma basis, as if the Acquisition had been consummated on July 1, 2012: \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "(In millions, except per share amounts)\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Year Ended June 30,\n",
            "\n",
            "2014\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Revenue\n",
            "\n",
            "\t\t$\t  96,248\t \n",
            "\n",
            "Net income\n",
            "\n",
            "\t\t$\t20,234\t\n",
            "\n",
            "Diluted earnings per share\n",
            "\n",
            "\t\t$\t2.41\t\n",
            "\n",
            " \n",
            "\n",
            "These pro forma results were based on estimates and assumptions, which we believe are reasonable\n",
            "\n",
            "Document: 2017_Annual_Report.docx, Score: 0.6172\n",
            "Answer: Revenue from external customers, classified by significant product and service offerings, were as follows: \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "(In millions)\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Year Ended June 30,\n",
            "\n",
            "2017\n",
            "\n",
            "2016\n",
            "\n",
            "2015\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Microsoft Office system\n",
            "\n",
            "\t\t$\t25,389\t\n",
            "\n",
            "\t\t$\t23,588\t\n",
            "\n",
            "\t\t$\t23,538\t\n",
            "\n",
            "Server products and tools\n",
            "\n",
            "\t\t\t21,758\t\n",
            "\n",
            "\t\t\t19,177\t\n",
            "\n",
            "\t\t\t18,612\t\n",
            "\n",
            "Xbox\n",
            "\n",
            "\t\t\t9,256\t\n",
            "\n",
            "\t\t\t9,395\t\n",
            "\n",
            "\t\t\t9,121\t\n",
            "\n",
            "Windows PC operating system\n",
            "\n",
            "\t\t\t8,625\t (a)\n",
            "\n",
            "\t\t\t8,104\t (a)\n",
            "\n",
            "\t\t\t14,826\t\n",
            "\n",
            "Advertising\n",
            "\n",
            "\t\t\t6,971\t\n",
            "\n",
            "\t\t\t6,098\t\n",
            "\n",
            "\t\t\t4,557\t\n",
            "\n",
            "Consulting and product support services\n",
            "\n",
            "\t\t\t5,588\t\n",
            "\n",
            "\t\t\t5,641\t\n",
            "\n",
            "\t\t\t5,090\t\n",
            "\n",
            "Devices\n",
            "\n",
            "\t\t\t4,557\t\n",
            "\n",
            "\t\t\t7,466\t\n",
            "\n",
            "\t\t\t11,602\t\n",
            "\n",
            "LinkedIn\n",
            "\n",
            "\t\t\t2,268\t (b)\n",
            "\n",
            "\t\t\t0\t\n",
            "\n",
            "\t\t\t0\t\n",
            "\n",
            "Other\n",
            "\n",
            "\t\t\t5,538\t\n",
            "\n",
            "\t\t\t5,851\t\n",
            "\n",
            "\t\t\t6,234\t\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "\t\t \n",
            "\n",
            "Total\n",
            "\n",
            "\t\t$\t  89,950\t\n",
            "\n",
            "\t\t$\t  85,320\t \n",
            "\n",
            "\t\t$\t  93,580\t \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "(a)\tIncludes the net revenue deferral from Windows 10\n",
            "\n",
            "Document: 2021_Annual_Report.docx, Score: 0.6033\n",
            "Answer: •\tWindows revenue increased $933 million or 4% driven by growth in Windows Commercial\n",
            "\n",
            "Document: 2015_Annual_Report.docx, Score: 0.6260\n",
            "Answer: Following are the supplemental consolidated results of Microsoft Corporation on an unaudited pro forma basis, as if the Acquisition had been consummated on July 1, 2012: \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "(In millions, except per share amounts)\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Year Ended June 30,\n",
            "\n",
            " \n",
            "\n",
            "2014\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "2013\n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Revenue\n",
            "\n",
            " \n",
            "\n",
            "$\n",
            "\n",
            "  96,248\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "$\n",
            "\n",
            "  93,243\n",
            "\n",
            " \n",
            "\n",
            "Net income\n",
            "\n",
            " \n",
            "\n",
            "$\n",
            "\n",
            "  20,234\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "$\n",
            "\n",
            "  20,153\n",
            "\n",
            " \n",
            "\n",
            "Diluted earnings per share\n",
            "\n",
            " \n",
            "\n",
            "$\n",
            "\n",
            "2.41\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "$\n",
            "\n",
            "2.38\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "These pro forma results were based on estimates and assumptions, which we believe are reasonable\n",
            "\n",
            "Document: 2022_Annual_Report (1).docx, Score: 0.6030\n",
            "Answer: Windows OEM revenue growth\n",
            "\n",
            "Revenue from sales of Windows Pro and non-Pro licenses sold through the OEM channel\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Windows Commercial products and cloud services revenue growth\n",
            "\n",
            "Revenue from Windows Commercial products and cloud services, comprising volume licensing of the Windows operating system, Windows cloud services, and other Windows commercial offerings\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Surface revenue growth\n",
            "\n",
            "Revenue from Surface devices and accessories\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Xbox content and services revenue growth\n",
            "\n",
            "Revenue from Xbox content and services, comprising first- and third-party content (including games and in-game content), Xbox Game Pass and other subscriptions, Xbox Cloud Gaming, third-party disc royalties, advertising, and other cloud services\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Search and news advertising revenue, excluding TAC, growth\n",
            "\n",
            "Revenue from search and news advertising excluding traffic acquisition costs (“TAC”) paid to Bing Ads network publishers and news partners\n",
            "\n",
            "SUMMARY RESULTS OF OPERATIONS \n",
            "\n",
            " \n",
            "\n",
            "(In millions, except percentages and per share amounts)\n",
            "\n",
            "2022\n",
            "\n",
            "2021\n",
            "\n",
            "Percentage\n",
            "Change\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Revenue\n",
            "\n",
            "\t\t$\t 198,270\t\n",
            "\n",
            "\t\t$\t  168,088\t\n",
            "\n",
            "\t\t\t18%\t\n",
            "\n",
            "Gross margin\n",
            "\n",
            "\t\t\t135,620\t\n",
            "\n",
            "\t\t\t115,856\t\n",
            "\n",
            "\t\t\t17%\t\n",
            "\n",
            "Operating income\n",
            "\n",
            "\t\t\t83,383\t\n",
            "\n",
            "\t\t\t69,916\t\n",
            "\n",
            "\t\t\t19%\t\n",
            "\n",
            "Net income\n",
            "\n",
            "\t\t\t72,738\t\n",
            "\n",
            "\t\t\t61,271\t\n",
            "\n",
            "\t\t\t19%\t\n",
            "\n",
            "Diluted earnings per share\n",
            "\n",
            "\t\t\t9.65\t\n",
            "\n",
            "\t\t\t8.05\t\n",
            "\n",
            "\t\t\t20%\t\n",
            "\n",
            " \n",
            "\n",
            "\t \n",
            "\n",
            "\t \n",
            "\n",
            "\t \n",
            "\n",
            "Adjusted net income (non-GAAP)\n",
            "\n",
            "\t\t\t69,447\t\n",
            "\n",
            "\t\t\t60,651\t\n",
            "\n",
            "\t\t\t15%\t\n",
            "\n",
            "Adjusted diluted earnings per share (non-GAAP)\n",
            "\n",
            "\t\t\t9.21\t\n",
            "\n",
            "\t\t\t7.97\t\n",
            "\n",
            "\t\t\t16%\t\n",
            "\n",
            "\t \n",
            "\n",
            "Adjusted net income and adjusted diluted earnings per share (“EPS”) are non-GAAP financial measures which exclude the net income tax benefit related to transfer of intangible properties in the first quarter of fiscal year 2022 and the \n",
            "\n",
            "\n",
            "net income tax benefit related to an India Supreme Court decision on withholding taxes in the third quarter of fiscal year 2021\n",
            "\n",
            "Document: 2019_Annual_Report (1).docx, Score: 0.5911\n",
            "Answer: •\tMicrosoft Surface revenue increased 23%\n",
            "\n",
            "Document: 2014_Annual_Report.docx, Score: 0.6260\n",
            "Answer: Following are the supplemental consolidated results of Microsoft Corporation on an unaudited pro forma basis, as if the Acquisition had been consummated on July 1, 2012: \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "(In millions, except per share amounts)\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Year Ended June 30,\n",
            "\n",
            "2014\n",
            "\n",
            "2013\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "Revenue\n",
            "\n",
            "\t\t$\t  96,248\t \n",
            "\n",
            "\t\t$\t  93,243\t \n",
            "\n",
            "Net income\n",
            "\n",
            "\t\t$\t  20,234\t\n",
            "\n",
            "\t\t$\t  20,153\t\n",
            "\n",
            "Diluted earnings per share\n",
            "\n",
            "\t\t$\t2.41\t\n",
            "\n",
            "\t\t$\t2.38\t\n",
            "\n",
            " \n",
            "\n",
            "These pro forma results were based on estimates and assumptions, which we believe are reasonable\n",
            "\n",
            "Document: 2020_Annual_Report (1).docx, Score: 0.6144\n",
            "Answer: Windows OEM Pro revenue growth\n",
            "\n",
            "Revenue from sales of Windows Pro licenses sold through the OEM channel, which primarily addresses demand in the commercial market\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Windows OEM non-Pro revenue growth\n",
            "\n",
            "Revenue from sales of Windows non-Pro licenses sold through the OEM channel, which primarily addresses demand in the consumer market\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Windows Commercial products and cloud \n",
            "services revenue growth\n",
            "\n",
            "Revenue from Windows Commercial products and cloud services, comprising volume licensing of the Windows operating system, Windows cloud services, and other Windows commercial offerings\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Surface revenue\n",
            "\n",
            "Revenue from Surface devices and accessories\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Xbox content and services revenue growth\n",
            "\n",
            "Revenue from Xbox content and services, comprising Xbox Live (transactions, subscriptions, cloud services, and advertising), video games, and third-party video game royalties\n",
            "\n",
            " \n",
            "\n",
            " \n",
            "\n",
            "Search advertising revenue, excluding TAC, growth\n",
            "\n",
            "Revenue from search advertising excluding traffic acquisition costs (“TAC”) paid to Bing Ads network publishers\n",
            "\n",
            "SUMMARY RESULTS OF OPERATIONS \n",
            "\n",
            " \n",
            "\n",
            "\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "(In millions, except percentages and per share amounts)\n",
            "\n",
            "\t\t2020\n",
            "\n",
            "\t\t2019\n",
            "\n",
            "\t\t2018\n",
            "\n",
            "\t\tPercentage\n",
            "Change 2020\n",
            "\n",
            "\t\tVersus 2019\n",
            "\n",
            "\t\tPercentage\n",
            "Change 2019\n",
            "\n",
            "\t\tVersus 2018\n",
            "\n",
            "\t\t\n",
            "\n",
            " \n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "Revenue\n",
            "\n",
            "\t\t$\t  143,015\n",
            "\n",
            "\t\t$\t  125,843\n",
            "\n",
            "\t\t$\t  110,360\n",
            "\n",
            "\t\t14%\n",
            "\n",
            "\t\t14%\n",
            "\n",
            "Gross margin\n",
            "\n",
            "\t\t96,937\n",
            "\n",
            "\t\t82,933\n",
            "\n",
            "\t\t72,007\n",
            "\n",
            "\t\t17%\n",
            "\n",
            "\t\t15%\n",
            "\n",
            "Operating income\n",
            "\n",
            "\t\t52,959\n",
            "\n",
            "\t\t42,959\n",
            "\n",
            "\t\t35,058\n",
            "\n",
            "\t\t23%\n",
            "\n",
            "\t\t23%\n",
            "\n",
            "Net income\n",
            "\n",
            "\t\t44,281\n",
            "\n",
            "\t\t39,240\n",
            "\n",
            "\t\t16,571\n",
            "\n",
            "\t\t13%\n",
            "\n",
            "\t\t137%\n",
            "\n",
            "Diluted earnings per share\n",
            "\n",
            "\t\t5.76\n",
            "\n",
            "\t\t5.06\n",
            "\n",
            "\t\t2.13\n",
            "\n",
            "\t\t14%\n",
            "\n",
            "\t\t138%\n",
            "\n",
            " \n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "\t\t\n",
            "\n",
            "Non-GAAP net income\n",
            "\n",
            "\t\t44,281\n",
            "\n",
            "\t\t36,830\n",
            "\n",
            "\t\t30,267\n",
            "\n",
            "\t\t20%\n",
            "\n",
            "\t\t22%\n",
            "\n",
            "Non-GAAP diluted earnings per share\n",
            "\n",
            "\t\t5.76\n",
            "\n",
            "\t\t4.75\n",
            "\n",
            "\t\t3.88\n",
            "\n",
            "\t\t21%\n",
            "\n",
            "\t\t22%\n",
            "\n",
            "\t\t \n",
            "\n",
            "\n",
            " \n",
            "\n",
            "Non-GAAP net income and diluted earnings per share (“EPS”) exclude the net tax impact of transfer of intangible properties in fiscal year 2019 and the net tax impact of the Tax Cuts and Jobs Act (“TCJA”) in fiscal years 2019 and 2018\n",
            "\n"
          ]
        }
      ]
    }
  ]
}